2020-11-13 09:20:23.613 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 16476 (E:\Ideadaima\blog\target\classes started by adminstrator in E:\Ideadaima\blog)
2020-11-13 09:20:23.625 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-11-13 09:20:32.577 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-11-13 09:20:32.994 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 387ms. Found 4 MongoDB repository interfaces.
2020-11-13 09:20:34.422 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:34.756 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$5a6a37c2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:34.970 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:34.987 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$40bd763e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:34.993 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$27951a80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:34.997 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-11-13 09:20:35.180 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:35.245 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:35.589 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:20:57.289 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-11-13 09:20:57.304 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-11-13 09:24:16.017 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 236 (E:\Ideadaima\blog\target\classes started by adminstrator in E:\Ideadaima\blog)
2020-11-13 09:24:16.023 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-11-13 09:24:18.596 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-11-13 09:24:18.802 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 184ms. Found 4 MongoDB repository interfaces.
2020-11-13 09:24:19.365 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:19.593 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$85f728a0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:19.700 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:19.744 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$6c4a671c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:19.752 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$53220b5e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:19.762 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-11-13 09:24:19.934 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:19.995 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:20.057 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:29.867 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-11-13 09:24:29.886 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-11-13 09:24:51.709 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 7280 (E:\Ideadaima\blog\target\classes started by adminstrator in E:\Ideadaima\blog)
2020-11-13 09:24:51.715 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-11-13 09:24:53.004 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-11-13 09:24:53.138 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 124ms. Found 4 MongoDB repository interfaces.
2020-11-13 09:24:53.663 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:53.809 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$14f11bde] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:53.873 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:53.895 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fb445a5a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:53.901 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$e21bfe9c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:53.909 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-11-13 09:24:53.991 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:54.020 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:24:54.056 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:25:15.476 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-11-13 09:25:15.497 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-11-13 09:29:09.807 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 8460 (E:\Ideadaima\blog\target\classes started by adminstrator in E:\Ideadaima\blog)
2020-11-13 09:29:09.814 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-11-13 09:29:11.147 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-11-13 09:29:11.255 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 102ms. Found 4 MongoDB repository interfaces.
2020-11-13 09:29:11.692 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:11.870 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$a1e1e620] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:11.945 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:11.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$8835249c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:11.968 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$6f0cc8de] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:11.973 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-11-13 09:29:12.033 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:12.049 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:12.086 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:15.689 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-11-13 09:29:15.691 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:15.810 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.709 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.744 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.768 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.775 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.777 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.782 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.784 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.807 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#352c44a8' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.810 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#352c44a8' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.846 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7a0e7ecd' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.864 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#62dbe64e' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.873 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#62dbe64e' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.916 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.919 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.924 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:16.929 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:17.578 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-11-13 09:29:17.579 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-11-13 09:29:17.773 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:17.832 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:17.842 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:18.797 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:18.881 INFO  [cluster-ClusterId{value='5fade16ddcf49b75616c176f', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server 39.97.183.122:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:128)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:64)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-11-13 09:29:18.971 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:19.128 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:19.620 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.594 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.612 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.647 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#17e0933c' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.648 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#17e0933c' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.649 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2349f14d' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.651 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#1dcedc93' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.652 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#1dcedc93' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.668 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.669 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.700 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.706 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.859 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:20.914 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 09:29:21.894 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-11-13 09:29:21.928 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-11-13 09:29:21.929 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-11-13 09:29:21.929 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-11-13 09:29:22.163 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-11-13 09:29:22.164 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 12161 ms
2020-11-13 09:29:25.539 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-11-13 09:29:25.600 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-11-13 09:29:25.605 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.749 seconds (JVM running for 18.422)
2020-11-13 09:29:26.013 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-13 09:29:26.013 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-11-13 09:29:26.031 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 17 ms
2020-11-13 09:29:26.408 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/login
2020-11-13 09:29:26.409 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:29:26.410 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:29:26.412 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.login
2020-11-13 09:29:26.413 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-11-13 09:29:27.198 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 790
2020-11-13 09:29:27.391 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"token":"D4BD47E70F749C5ACE32A5054CF39479"},"msg":"操作成功！"}
2020-11-13 09:29:28.927 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/info
2020-11-13 09:29:28.927 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:29:28.928 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:29:28.928 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-11-13 09:29:28.928 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:29:28.929 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 2
2020-11-13 09:29:28.934 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-11-13 09:29:31.096 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/login
2020-11-13 09:29:31.097 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:29:31.097 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:29:31.098 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.login
2020-11-13 09:29:31.098 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-11-13 09:29:31.566 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/getList
2020-11-13 09:29:31.566 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:29:31.567 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:29:31.568 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.getList
2020-11-13 09:29:31.569 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:29:31.707 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 611
2020-11-13 09:29:31.707 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"token":"D4BD47E70F749C5ACE32A5054CF39479"},"msg":"操作成功！"}
2020-11-13 09:29:32.426 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 860
2020-11-13 09:29:32.430 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:29:44.442 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/listBack
2020-11-13 09:29:44.443 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:29:44.443 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:29:44.444 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.list
2020-11-13 09:29:44.444 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:29:44.604 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 162
2020-11-13 09:29:44.605 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:29:46.916 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:29:46.918 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:29:46.919 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:29:46.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:29:46.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:29:47.036 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /about/getByPage
2020-11-13 09:29:47.037 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:29:47.037 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:29:47.038 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AboutController.getByPage
2020-11-13 09:29:47.039 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:29:47.538 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 622
2020-11-13 09:29:47.550 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:29:48.194 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 1158
2020-11-13 09:29:48.198 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":0,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-05-25 01:35:29"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:34:13.725 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/listBack
2020-11-13 09:34:13.727 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:34:13.727 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:34:13.728 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.list
2020-11-13 09:34:13.729 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:34:13.861 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 136
2020-11-13 09:34:13.863 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:36:48.478 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:36:48.479 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:36:48.480 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:36:48.480 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:36:48.481 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:36:48.745 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 268
2020-11-13 09:36:48.749 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:37:02.589 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /upload/uploadImage
2020-11-13 09:37:02.589 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:02.590 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:02.590 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-11-13 09:37:02.591 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@44022178]
2020-11-13 09:37:08.028 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/save
2020-11-13 09:37:08.028 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:08.028 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:08.029 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.save
2020-11-13 09:37:08.029 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Blog(blogId=, blogTitle=q2w, blogImage=null, blogContent=<p>13w2eds</p>
<div>&nbsp;</div>, blogGoods=null, blogRead=null, blogCollection=null, blogType=2, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-11-13 09:37:08.535 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 508
2020-11-13 09:37:08.536 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"msg":"添加成功"}
2020-11-13 09:37:09.181 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:37:09.181 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:09.182 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:09.183 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:37:09.184 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:37:09.549 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 368
2020-11-13 09:37:09.550 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1327062910382067712","blogRead":0,"blogTitle":"q2w","createdTime":"2020-11-13 01:37:07","typeName":"linux","updateTime":"2020-11-13 01:37:07"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:37:21.382 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/listBack
2020-11-13 09:37:21.383 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:37:21.384 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:21.384 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.list
2020-11-13 09:37:21.385 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:37:21.472 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 90
2020-11-13 09:37:21.474 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":4,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:37:22.370 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:37:22.370 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:22.371 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:22.372 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:37:22.372 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:37:22.630 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 260
2020-11-13 09:37:22.631 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1327062910382067712","blogRead":0,"blogTitle":"q2w","createdTime":"2020-11-13 01:37:07","typeName":"linux","updateTime":"2020-11-13 01:37:07"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:37:29.577 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/get/1327062910382067712
2020-11-13 09:37:29.578 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:29.578 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:29.578 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getById
2020-11-13 09:37:29.578 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[1327062910382067712]
2020-11-13 09:37:29.791 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 214
2020-11-13 09:37:29.813 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>13w2eds</p>\n<div>&nbsp;</div>","blogGoods":0,"blogId":"1327062910382067712","blogRead":0,"blogTitle":"q2w","blogType":2,"createdTime":"2020-11-13 01:37:07","version":1},"msg":"操作成功！"}
2020-11-13 09:37:35.057 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /upload/uploadImage
2020-11-13 09:37:35.057 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:35.058 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:35.058 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-11-13 09:37:35.059 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@206f7545]
2020-11-13 09:37:48.839 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/update
2020-11-13 09:37:48.840 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : PUT
2020-11-13 09:37:48.840 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:48.841 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.update
2020-11-13 09:37:48.841 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Blog(blogId=1327062910382067712, blogTitle=q2w, blogImage=null, blogContent=<p>13w2eds</p>
<div>&nbsp;</div>, blogGoods=0, blogRead=0, blogCollection=0, blogType=2, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-11-13 01:37:07, updateTime=null, version=1, deleted=null)]
2020-11-13 09:37:49.227 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 388
2020-11-13 09:37:49.227 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"msg":"更新成功"}
2020-11-13 09:37:49.465 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:37:49.466 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:49.467 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:49.467 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:37:49.468 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=9, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56), BlogVo(blogId=1327062910382067712, blogTitle=q2w, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-11-13 01:37:07, updateTime=2020-11-13 01:37:07)], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:37:49.718 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 253
2020-11-13 09:37:49.719 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1327062910382067712","blogRead":0,"blogTitle":"q2w","createdTime":"2020-11-13 01:37:07","typeName":"linux","updateTime":"2020-11-13 01:37:48"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:37:52.908 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/getAdmin
2020-11-13 09:37:52.909 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:37:52.909 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:52.910 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-11-13 09:37:52.910 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:37:58.253 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /user/getByPage
2020-11-13 09:37:58.255 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:37:58.255 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:37:58.255 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.UserController.getByPage
2020-11-13 09:37:58.257 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:37:58.277 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 5369
2020-11-13 09:37:58.277 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-11-13 09:38:04.467 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /comment/getByPage
2020-11-13 09:38:04.467 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:04.468 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:04.468 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-11-13 09:38:04.469 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:38:04.938 INFO  [http-nio-1001-exec-1]org.mongodb.driver.cluster.info:71 -Cluster description not yet available. Waiting for 30000 ms before timing out
2020-11-13 09:38:08.070 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /log/getByPage
2020-11-13 09:38:08.071 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:08.072 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:08.072 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.LogController.getByPage
2020-11-13 09:38:08.073 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:38:11.278 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/info
2020-11-13 09:38:11.279 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:38:11.279 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:11.279 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-11-13 09:38:11.280 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:38:11.281 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 3
2020-11-13 09:38:11.283 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-11-13 09:38:15.008 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 6938
2020-11-13 09:38:15.013 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":748,"totalPage":75},"msg":"操作成功！"}
2020-11-13 09:38:15.201 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 16948
2020-11-13 09:38:15.205 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:38:15.570 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/getList
2020-11-13 09:38:15.571 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:38:15.571 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:15.572 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.getList
2020-11-13 09:38:15.572 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:38:15.573 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /log/getByPage
2020-11-13 09:38:15.573 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:15.574 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:15.574 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.LogController.getByPage
2020-11-13 09:38:15.575 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:38:16.383 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 813
2020-11-13 09:38:16.384 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":4,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:38:17.977 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 2404
2020-11-13 09:38:17.979 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":753,"totalPage":76},"msg":"操作成功！"}
2020-11-13 09:38:18.850 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /music/getByPage
2020-11-13 09:38:18.851 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:18.852 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:18.852 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-11-13 09:38:18.853 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:38:21.225 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /link/list
2020-11-13 09:38:21.226 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:38:21.226 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:21.227 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.LinkController.list
2020-11-13 09:38:21.227 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:38:22.075 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 850
2020-11-13 09:38:22.076 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-11-13 09:38:24.034 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /music/getByPage
2020-11-13 09:38:24.034 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:24.035 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:24.035 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-11-13 09:38:24.035 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:38:25.241 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /log/getByPage
2020-11-13 09:38:25.242 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:25.242 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:25.242 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.LogController.getByPage
2020-11-13 09:38:25.242 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:38:26.805 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 1564
2020-11-13 09:38:26.806 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":756,"totalPage":76},"msg":"操作成功！"}
2020-11-13 09:38:33.408 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /music/getByPage
2020-11-13 09:38:33.408 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:33.409 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:33.409 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-11-13 09:38:33.410 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:38:43.273 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/getAdmin
2020-11-13 09:38:43.273 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:38:43.274 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:43.274 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-11-13 09:38:43.274 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:38:43.372 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 99
2020-11-13 09:38:43.373 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-11-13 09:38:46.784 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /music/getByPage
2020-11-13 09:38:46.784 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:38:46.785 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:38:46.785 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-11-13 09:38:46.786 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:39:45.061 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/listBack
2020-11-13 09:39:45.062 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:39:45.063 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:45.063 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.list
2020-11-13 09:39:45.063 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:39:45.398 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:39:45.399 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:39:45.399 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:45.400 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:39:45.400 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:39:49.184 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 3786
2020-11-13 09:39:49.185 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1327062910382067712","blogRead":0,"blogTitle":"q2w","createdTime":"2020-11-13 01:37:07","typeName":"linux","updateTime":"2020-11-13 01:37:48"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:39:49.268 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 4207
2020-11-13 09:39:49.268 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":4,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:39:49.435 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/info
2020-11-13 09:39:49.435 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:39:49.436 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:49.436 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-11-13 09:39:49.437 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:39:49.437 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 2
2020-11-13 09:39:49.438 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-11-13 09:39:50.190 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/getList
2020-11-13 09:39:50.192 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:39:50.193 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:50.194 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.getList
2020-11-13 09:39:50.195 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:39:50.199 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:39:50.199 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:39:50.199 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:50.200 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:39:50.200 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:39:52.863 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 2673
2020-11-13 09:39:52.864 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":4,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:39:53.118 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 2919
2020-11-13 09:39:53.118 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1327062910382067712","blogRead":0,"blogTitle":"q2w","createdTime":"2020-11-13 01:37:07","typeName":"linux","updateTime":"2020-11-13 01:37:48"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:39:53.446 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /about/getByPage
2020-11-13 09:39:53.446 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:39:53.447 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:53.447 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AboutController.getByPage
2020-11-13 09:39:53.447 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:39:53.703 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 257
2020-11-13 09:39:53.703 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":0,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-05-25 01:35:29"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:39:55.388 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/listBack
2020-11-13 09:39:55.388 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 09:39:55.389 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:55.389 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.list
2020-11-13 09:39:55.390 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 09:39:55.481 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 93
2020-11-13 09:39:55.481 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":4,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 09:39:57.165 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 09:39:57.166 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:39:57.166 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:39:57.166 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 09:39:57.166 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 09:39:57.418 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 253
2020-11-13 09:39:57.418 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1327062910382067712","blogRead":0,"blogTitle":"q2w","createdTime":"2020-11-13 01:37:07","typeName":"linux","updateTime":"2020-11-13 01:37:48"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-11-13 09:40:01.691 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/get/1264358056178458624
2020-11-13 09:40:01.692 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:40:01.692 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:40:01.693 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getById
2020-11-13 09:40:01.693 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[1264358056178458624]
2020-11-13 09:40:01.917 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 226
2020-11-13 09:40:01.918 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","blogType":2,"createdTime":"2020-05-24 00:50:27","version":3},"msg":"操作成功！"}
2020-11-13 09:40:07.672 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /upload/uploadImage
2020-11-13 09:40:07.673 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 09:40:07.673 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 09:40:07.673 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-11-13 09:40:07.674 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@39635c5]
2020-11-13 10:35:17.618 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 13908 (E:\Ideadaima\blog\target\classes started by adminstrator in E:\Ideadaima\blog)
2020-11-13 10:35:17.730 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-11-13 10:35:22.505 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-11-13 10:35:22.940 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 420ms. Found 4 MongoDB repository interfaces.
2020-11-13 10:35:24.299 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:24.536 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$bda8d9c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:24.644 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:24.660 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$a3fc183f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:24.664 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$8ad3bc81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:24.669 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-11-13 10:35:24.854 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:24.876 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:25.087 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:25.992 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-11-13 10:35:25.993 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:26.085 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.387 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.408 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.418 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.423 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.426 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.433 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.435 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.465 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3cbf1ba4' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.469 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3cbf1ba4' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.512 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#19962194' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.526 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#16c587de' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.529 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#16c587de' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.558 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.561 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.563 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:27.568 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:28.995 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-11-13 10:35:28.996 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-11-13 10:35:29.171 INFO  [cluster-ClusterId{value='5fadf0f0dbf92128220292ff', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server 39.97.183.122:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:128)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.NoRouteToHostException: No route to host: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:64)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-11-13 10:35:29.177 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:29.262 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:29.273 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:29.919 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:30.034 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:30.179 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:30.419 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.152 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.165 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.194 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#16a2ed51' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.195 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#16a2ed51' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.197 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3e28fee1' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.199 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#57ddd45b' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.200 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#57ddd45b' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.210 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.211 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.230 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.233 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.436 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:31.500 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-13 10:35:32.516 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-11-13 10:35:32.595 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-11-13 10:35:32.596 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-11-13 10:35:32.597 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-11-13 10:35:33.029 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-11-13 10:35:33.030 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 14680 ms
2020-11-13 10:35:35.330 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-11-13 10:35:35.378 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-11-13 10:35:35.382 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 21.497 seconds (JVM running for 26.161)
2020-11-13 10:38:18.382 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-13 10:38:18.383 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-11-13 10:38:18.405 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 22 ms
2020-11-13 10:38:18.747 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/login
2020-11-13 10:38:18.747 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 10:38:18.748 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:38:18.751 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.login
2020-11-13 10:38:18.751 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-11-13 10:38:19.068 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 322
2020-11-13 10:38:19.237 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"token":"4DF580FA44E716C8C0344969D23E0391"},"msg":"操作成功！"}
2020-11-13 10:38:19.615 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /admin/info
2020-11-13 10:38:19.616 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 10:38:19.616 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:38:19.617 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-11-13 10:38:19.617 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 10:38:19.618 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 3
2020-11-13 10:38:19.626 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-11-13 10:38:19.934 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/getList
2020-11-13 10:38:19.935 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 10:38:19.936 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:38:19.937 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.getList
2020-11-13 10:38:19.937 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 10:38:19.954 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 20
2020-11-13 10:38:19.959 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 10:39:02.989 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/getByPage
2020-11-13 10:39:02.990 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 10:39:02.991 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:39:02.991 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-11-13 10:39:02.992 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 10:39:03.228 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 239
2020-11-13 10:39:03.241 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-11-13 10:39:47.402 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /blog/get/1264357690636476416
2020-11-13 10:39:47.402 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 10:39:47.403 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:39:47.403 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.BlogController.getById
2020-11-13 10:39:47.403 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[1264357690636476416]
2020-11-13 10:39:47.417 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 15
2020-11-13 10:39:47.424 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","blogType":1,"createdTime":"2020-05-24 00:49:00","version":2},"msg":"操作成功！"}
2020-11-13 10:44:32.080 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /type/listBack
2020-11-13 10:44:32.081 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 10:44:32.082 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:44:32.083 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.TypeController.list
2020-11-13 10:44:32.084 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 10:44:32.099 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 19
2020-11-13 10:44:32.099 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-11-13 10:51:03.751 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /user/getByPage
2020-11-13 10:51:03.752 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 10:51:03.753 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:51:03.753 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.UserController.getByPage
2020-11-13 10:51:03.754 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 10:51:03.778 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 27
2020-11-13 10:51:03.782 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-11-13 10:53:29.197 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /user/get/1
2020-11-13 10:53:29.198 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 10:53:29.198 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:53:29.198 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.UserController.getById
2020-11-13 10:53:29.198 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[1]
2020-11-13 10:53:29.214 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 17
2020-11-13 10:53:29.215 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"userEmail":"123@qq.com","userId":1,"username":"鸡哥","version":3},"msg":"操作成功！"}
2020-11-13 10:59:17.497 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /log/getByPage
2020-11-13 10:59:17.498 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 10:59:17.498 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 10:59:17.498 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.LogController.getByPage
2020-11-13 10:59:17.499 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 10:59:17.528 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 31
2020-11-13 10:59:17.533 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":726,"totalPage":73},"msg":"操作成功！"}
2020-11-13 11:04:41.732 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /music/getByPage
2020-11-13 11:04:41.733 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 11:04:41.733 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 11:04:41.738 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-11-13 11:04:41.739 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 11:14:00.974 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /link/list
2020-11-13 11:14:00.975 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : GET
2020-11-13 11:14:00.976 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 11:14:00.977 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.LinkController.list
2020-11-13 11:14:00.978 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[]
2020-11-13 11:14:01.001 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:70 -耗时 : 27
2020-11-13 11:14:01.002 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:84 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-11-13 11:18:30.209 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:116 -请求地址 : /comment/getByPage
2020-11-13 11:18:30.210 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:117 -请求方式 : POST
2020-11-13 11:18:30.211 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -IP : 127.0.0.1
2020-11-13 11:18:30.212 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-11-13 11:18:30.212 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:124 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-11-13 11:18:30.966 INFO  [http-nio-1001-exec-2]org.mongodb.driver.cluster.info:71 -Cluster description not yet available. Waiting for 30000 ms before timing out
