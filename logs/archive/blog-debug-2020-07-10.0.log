2020-07-10 12:47:20.970 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-07-10 12:49:24.135 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 12:49:24.135 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 12:49:24.139 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 12:49:24.285 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 12:49:24.285 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 12:49:24.285 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 12:49:24.516 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 12:49:24.534 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 12:49:24.628 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:24.635 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 900(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:49:24.686 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 12:49:24.688 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 12:49:24.721 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:24.723 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 917(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:49:24.730 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 12:49:24.732 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 12:49:24.733 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 12:49:24.735 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:49:24.788 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 12:49:24.828 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:24.829 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), null, 127.0.0.1(String)
2020-07-10 12:49:24.831 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:49:24.948 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:49:25.028 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:25.031 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 618(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:49:25.232 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:49:33.996 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:49:34.000 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-07-10 12:49:34.037 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-07-10 12:49:34.122 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:34.124 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 123(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:49:34.203 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:49:36.547 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:49:36.548 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-07-10 12:49:36.581 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-07-10 12:49:36.644 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:36.646 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 153(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:49:36.777 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:49:42.614 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:49:42.614 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: tangtu22(String)
2020-07-10 12:49:42.645 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-07-10 12:49:42.685 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:42.687 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=tangtu22, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 79(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:49:42.775 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:49:44.560 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:49:44.562 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: tangtu22(String)
2020-07-10 12:49:44.609 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-07-10 12:49:44.694 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:49:44.695 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=tangtu22, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 101(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:49:44.782 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:03.599 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:03.601 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: te(String)
2020-07-10 12:50:03.633 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-07-10 12:50:03.694 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:03.696 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=te, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 127(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:03.785 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:05.526 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:05.527 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:05.573 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:06.447 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:06.448 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 938(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:06.528 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:07.043 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:07.044 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:07.076 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:07.113 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:07.115 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 79(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:07.200 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:07.298 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:07.300 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:07.332 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:07.419 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:07.421 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 78(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:07.439 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:07.440 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:07.476 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:07.485 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:07.519 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:07.521 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 80(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:07.637 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:07.639 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:07.660 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:07.670 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:07.715 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:07.717 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 78(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:07.813 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:14.165 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:14.167 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:14.195 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:14.231 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:14.233 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 70(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:14.330 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:14.696 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:14.698 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:14.732 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:14.790 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:14.795 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 90(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:14.831 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:14.832 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:14.880 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:14.886 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:14.944 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:14.946 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:14.951 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:14.953 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 107(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:14.981 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:15.019 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:15.021 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 83(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:15.162 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:15.216 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:33.071 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:33.072 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:33.105 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:33.158 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:33.159 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 80(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:33.233 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:43.031 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:43.032 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:43.073 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:43.110 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:43.111 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 99(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:43.198 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:56.268 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:50:56.268 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:50:56.312 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:50:56.359 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:56.360 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 98(Long), {"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"D4C678053A8BF38FE25C198D3946C081"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:50:56.435 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:56.946 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 12:50:56.948 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 12:50:56.995 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 12:50:56.999 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 12:50:57.000 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 12:50:57.057 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 12:50:57.171 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:57.173 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 259(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:50:57.238 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 12:50:57.240 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 12:50:57.278 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 12:50:57.279 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 12:50:57.283 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 12:50:57.284 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 12:50:57.285 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 12:50:57.289 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:57.299 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 12:50:57.300 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 12:50:57.431 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 12:50:57.433 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 12:50:57.439 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:57.441 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 96(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:50:57.485 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:57.486 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 211(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:50:57.491 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:57.492 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 224(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:50:57.496 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:50:57.498 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:50:57.546 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:57.608 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:57.640 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:50:57.648 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:52:44.282 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 12:52:44.283 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 12:52:44.287 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 12:52:44.289 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 12:52:44.327 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 12:52:44.328 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 12:52:44.329 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 12:52:44.332 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 12:52:44.370 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 12:52:44.371 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 12:52:44.372 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 12:52:44.376 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:52:44.377 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 112(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:52:44.384 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:52:44.386 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 101(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:52:44.423 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 12:52:44.447 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 12:52:44.448 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 12:52:44.452 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 12:52:44.453 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 12:52:44.490 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 12:52:44.502 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:52:44.519 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:52:44.530 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:52:44.530 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:52:44.583 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:52:44.544 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:52:44.636 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 91(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:52:44.635 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 286(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:52:44.709 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:52:44.744 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:52:44.747 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:53:39.633 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 12:53:39.634 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 12:53:39.640 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 12:53:39.641 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 12:53:39.650 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 12:53:39.651 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 12:53:39.672 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 12:53:39.683 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 12:53:39.686 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 12:53:39.687 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 12:53:39.699 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 12:53:39.721 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:53:39.722 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 115(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:53:39.722 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 12:53:39.738 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:53:39.740 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 136(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:53:39.797 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:53:39.859 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:53:39.862 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:53:39.864 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 232(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:53:39.995 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:53:39.997 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 12:53:39.998 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 12:53:40.002 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 12:53:40.004 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 12:53:40.038 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 12:53:40.105 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:53:40.106 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 90(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:53:40.110 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:53:40.128 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-07-10 12:53:40.232 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:53:40.246 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:54:55.760 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 12:54:55.762 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 12:54:55.802 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 12:54:55.804 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 12:54:55.806 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 12:54:55.836 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 12:54:55.891 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 12:54:55.893 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 12:54:55.917 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 12:54:55.918 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 12:54:55.925 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 12:54:55.947 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 12:54:55.948 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 12:54:55.952 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:54:55.954 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 250(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:54:55.980 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:54:55.981 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 81(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:54:55.985 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 12:54:56.048 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:54:56.049 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:54:56.148 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:54:56.148 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:54:56.205 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:54:56.283 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:54:56.284 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 88(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:54:56.363 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:03.227 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 12:55:03.230 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 12:55:03.278 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 12:55:03.356 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:03.357 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 124(Long), {"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"3B591417F74CCF0CEEB728BCB17CFA3F"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:03.483 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:04.231 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 12:55:04.233 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 12:55:04.286 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 12:55:04.287 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 12:55:04.289 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 12:55:04.331 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 12:55:04.356 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 12:55:04.357 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 12:55:04.360 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 12:55:04.361 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 12:55:04.365 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 12:55:04.367 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 12:55:04.388 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 12:55:04.389 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 12:55:04.422 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 12:55:04.425 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 12:55:04.441 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 12:55:04.469 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:04.471 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:04.483 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:04.484 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 167(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:04.492 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:04.493 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 172(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:04.497 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:04.498 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 185(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:04.510 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:04.512 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 329(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:04.571 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:04.589 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:04.591 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:04.607 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:04.607 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:30.982 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 12:55:30.983 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 12:55:31.018 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 12:55:31.023 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 12:55:31.024 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 12:55:31.063 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 12:55:31.065 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 12:55:31.066 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 12:55:31.069 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:31.071 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 89(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:31.100 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 12:55:31.190 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:31.219 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 12:55:31.220 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 12:55:31.263 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 12:55:31.264 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 12:55:31.266 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 12:55:31.267 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 12:55:31.270 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:31.272 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 12:55:31.272 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 245(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:31.293 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 12:55:31.319 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:31.321 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 102(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:31.336 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:31.337 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 123(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:31.341 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 12:55:31.342 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 12:55:31.363 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:31.419 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:31.444 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 12:55:31.444 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:13.552 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:02:13.558 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:02:13.614 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:02:13.616 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:02:13.616 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:02:13.617 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:02:13.617 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:02:13.630 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:02:13.632 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:02:13.634 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:02:13.635 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:02:13.637 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:02:13.638 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:02:13.645 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:02:13.646 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:02:13.667 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:02:13.671 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:02:13.712 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:13.715 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 70(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:13.717 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:13.718 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 91(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:13.725 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:13.726 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 91(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:13.729 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:13.730 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:13.747 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:13.749 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 275(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:13.871 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:13.888 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:13.893 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:13.894 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:13.896 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:40.760 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:40.767 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 1(Integer), null, GET(String), 1490(Long), {"code":20000,"data":{"collectionCount":0,"commentCount":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:40.877 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:40.942 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:40.943 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollectionList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 512(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:41.038 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:41.514 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:41.516 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 146(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:41.620 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:45.286 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:45.288 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 108(Long), {"code":20000,"data":{"collectionCount":0,"commentCount":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:45.411 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:46.495 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-07-10 13:02:46.517 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-07-10 13:02:46.569 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-07-10 13:02:46.627 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:46.629 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 207(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:46.777 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:47.242 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==>  Preparing: select blog_id, blog_title, created_time, date_format(created_time, '%Y-%m') as blog_month from bl_blog order by created_time desc 
2020-07-10 13:02:47.243 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==> Parameters: 
2020-07-10 13:02:47.338 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -<==      Total: 9
2020-07-10 13:02:47.391 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:47.393 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getTimeLine(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 176(Long), {"code":20000,"data":[{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:47.491 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:02:47.619 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==>  Preparing: select about_id, about_title, about_content, about_read, created_time, update_time, version from bl_about where enable=1 and deleted=0 limit 1 
2020-07-10 13:02:47.620 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==> Parameters: 
2020-07-10 13:02:47.669 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -<==      Total: 1
2020-07-10 13:02:47.674 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==>  Preparing: update bl_about set version=version+1 ,about_title = ? ,about_content = ? , about_read= ? where about_id = ? and version = ? 
2020-07-10 13:02:47.675 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==> Parameters: 关于稽哥(String), <p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>(String), 2(Integer), 4(Integer), 4(Integer)
2020-07-10 13:02:48.035 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -<==    Updates: 1
2020-07-10 13:02:48.224 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:02:48.225 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/read(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3c4974ad.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 724(Long), {"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":2,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-06-29 14:14:25","version":4},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:02:48.327 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:05:02.126 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-07-10 13:07:04.826 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:07:04.854 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:07:05.069 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:07:05.120 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:07:05.120 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:07:05.120 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:07:05.283 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:07:05.536 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:07:05.742 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:05.753 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 1044(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:05.920 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:05.922 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 1099(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:05.951 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:06.056 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:07:06.072 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:06.120 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:06.120 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:07:06.121 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), null, 127.0.0.1(String)
2020-07-10 13:07:06.172 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:07:06.174 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:07:06.175 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:07:06.212 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:07:06.242 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:06.374 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:09.049 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 771(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:09.178 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:18.410 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 13:07:18.412 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 13:07:18.759 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 13:07:18.816 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:18.819 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 424(Long), {"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"A519D7F404622BB610CC8C8AF599BE5B"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:18.907 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:19.407 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:07:19.409 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:07:20.681 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:07:20.683 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:07:20.687 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:07:20.729 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:07:20.756 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:07:20.757 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:07:20.769 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:07:20.770 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:07:20.774 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:07:20.779 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:07:20.783 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:07:20.784 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:07:20.790 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:07:20.815 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:07:20.822 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:07:20.837 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:20.839 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 106(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:20.853 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:20.856 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 1481(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:20.857 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:20.862 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), null, 127.0.0.1(String)
2020-07-10 13:07:20.891 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:20.893 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 148(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:20.897 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:07:20.898 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 141(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:07:21.039 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:21.040 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:21.043 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:21.043 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:07:21.248 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:10:01.212 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:10:01.214 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:10:01.222 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:10:01.223 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:10:01.250 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:10:01.254 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:10:01.258 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:10:01.260 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:10:01.298 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:10:01.300 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:10:01.301 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:10:01.305 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:10:01.308 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 144(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:10:01.337 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:10:01.340 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 154(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:10:01.368 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:10:01.421 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:10:01.422 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:10:01.422 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:10:01.458 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:10:01.485 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:10:01.458 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:10:01.488 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 315(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:10:01.505 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:10:01.541 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:10:01.541 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:10:01.545 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:10:01.593 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:10:01.599 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:10:01.602 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 230(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:10:01.670 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:10:01.692 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:11:06.695 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:11:06.696 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:11:06.721 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:11:06.722 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:11:06.801 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:11:06.803 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:11:06.847 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:11:06.849 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:11:06.888 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:11:06.891 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:11:06.895 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 215(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:11:06.895 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 225(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:11:06.903 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:11:06.905 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:11:06.905 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:11:07.005 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:11:07.016 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:11:07.017 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:11:07.019 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:11:07.020 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:11:07.079 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:11:07.114 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:11:07.114 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:11:07.207 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:11:07.209 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 558(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:11:07.213 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:11:07.214 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:11:07.219 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:11:07.221 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 211(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:11:07.325 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:11:07.389 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:11:07.389 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:12:45.480 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:12:45.486 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:12:45.493 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:12:45.494 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:12:45.497 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:12:45.498 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:12:45.566 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:12:45.570 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:12:45.570 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:12:45.574 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:12:45.613 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:12:45.620 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:12:45.621 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:12:45.625 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:12:45.626 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:12:45.641 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:12:45.644 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 145(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:12:45.645 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:12:45.647 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 176(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:12:45.663 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:12:45.724 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:12:45.725 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:12:45.726 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:12:45.754 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:12:45.755 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:12:45.759 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:12:45.822 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:12:45.823 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 305(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:12:45.829 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:12:45.831 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 96(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:12:45.981 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:12:46.000 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:13:25.700 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:13:25.701 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:13:25.736 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:13:25.781 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:13:25.782 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 77(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:13:25.908 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:13:33.609 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:13:33.611 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:13:33.637 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:13:33.638 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:13:33.651 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:13:33.676 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:13:33.716 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:13:33.718 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 98(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:13:33.730 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:13:33.732 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:13:33.775 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:13:33.778 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:13:33.778 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 83(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:13:33.780 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:13:33.781 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:13:33.819 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:13:33.822 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:13:33.916 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:13:33.933 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:13:33.934 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:13:33.936 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:13:33.937 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:13:33.961 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:13:33.962 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 358(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:13:34.077 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:13:34.108 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:13:34.125 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:13:34.126 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 188(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:13:34.128 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:13:34.129 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$a515b675.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:13:34.264 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:13:34.274 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:13:35.873 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:13:35.875 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 1(Integer), null, GET(String), 615(Long), {"code":20000,"data":{"collectionCount":0,"commentCount":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:13:35.974 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:26:13.995 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-07-10 13:28:53.346 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:28:53.456 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:28:53.468 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:28:53.489 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:28:53.489 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:28:53.489 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:28:53.724 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:28:53.738 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:28:54.283 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:28:56.866 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$86db4a7a.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), null, 127.0.0.1(String)
2020-07-10 13:28:56.935 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:28:57.026 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:28:56.947 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:28:56.947 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:28:57.059 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:28:57.059 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 4222(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:28:57.060 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 4166(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:28:57.107 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:28:57.189 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:28:57.196 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:28:57.200 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:28:57.205 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:28:57.234 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:28:57.417 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:28:57.420 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 3813(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:28:57.531 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:07.733 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-07-10 13:29:07.735 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-07-10 13:29:07.784 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-07-10 13:29:07.872 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:07.874 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 128(Long), {"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"9B265F4E8C83118BC8CBA87A01ED2189"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:07.975 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:08.335 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:29:08.337 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:29:08.397 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:29:08.400 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:29:08.402 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:29:08.437 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:29:08.592 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:08.594 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 280(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:14:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:09.826 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-07-10 13:29:09.828 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-07-10 13:29:09.844 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-07-10 13:29:09.854 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-07-10 13:29:09.894 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-07-10 13:29:09.895 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-07-10 13:29:09.902 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-07-10 13:29:09.903 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-07-10 13:29:09.911 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-07-10 13:29:09.923 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:09.934 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:09.935 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$86db4a7a.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), null, 127.0.0.1(String)
2020-07-10 13:29:09.940 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-07-10 13:29:09.944 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-07-10 13:29:09.961 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:09.964 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 1355(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":1,"blogGoods":5,"blogId":"1264726600279891968","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:09.983 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:09.984 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 1342(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:09.999 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:10.001 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 1348(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:10.049 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:10.080 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:10.090 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:10.133 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:12.153 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-07-10 13:29:12.154 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-07-10 13:29:12.196 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-07-10 13:29:12.202 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-07-10 13:29:12.204 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 5(Integer), 6(Integer), 0(Integer), 1(Integer), 1(Integer), 1264726600279891968(String), 7(Integer)
2020-07-10 13:29:12.489 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-07-10 13:29:12.500 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-07-10 13:29:12.502 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 1(Integer)
2020-07-10 13:29:12.539 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-07-10 13:29:12.840 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:12.843 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264726600279891968(String), [1264726600279891968](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$86db4a7a.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 788(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:12.889 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:12.890 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollection/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 842(Long), {"code":20000,"data":0,"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:12.926 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:12.926 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:12.928 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getGood/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 864(Long), {"code":20000,"data":1,"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:12.965 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:13.025 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:13.241 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:13.244 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 1137(Long), {"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:13.470 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:19.728 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-07-10 13:29:19.729 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-07-10 13:29:19.767 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-07-10 13:29:19.810 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-07-10 13:29:19.812 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 5(Integer), 6(Integer), 0(Integer), 1(Integer), 2(Integer), 1264726600279891968(String), 8(Integer)
2020-07-10 13:29:19.958 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-07-10 13:29:20.008 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, version from bl_user where user_id = ? and deleted = 0 
2020-07-10 13:29:20.009 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer)
2020-07-10 13:29:20.064 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 1
2020-07-10 13:29:20.496 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:20.498 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=55555555555555, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 1(Integer), null, POST(String), 751(Long), {"code":20000,"msg":"评论成功"}(String), 127.0.0.1(String)
2020-07-10 13:29:20.570 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:20.961 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:20.966 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 77(Long), {"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:21.064 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:24.726 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:24.727 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$86db4a7a.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 99(Long), {"code":20000,"data":{"collectionCount":0,"commentCount":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:24.825 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:26.344 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:26.347 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollectionList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 56(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:26.458 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:31.335 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:31.338 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 70(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:31.470 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:33.368 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-07-10 13:29:33.370 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-07-10 13:29:33.435 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-07-10 13:29:33.480 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:33.481 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 134(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:33.592 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:36.314 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id like CONCAT('%', ?, '%') order by created_time desc limit ?, ? 
2020-07-10 13:29:36.316 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 1(String), 0(Integer), 10(Integer)
2020-07-10 13:29:36.391 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-07-10 13:29:36.393 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? 
2020-07-10 13:29:36.394 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 1(String)
2020-07-10 13:29:36.431 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:29:36.578 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:36.579 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=1}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$86db4a7a.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 309(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:20"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{"typeId":"1"},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:36.695 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:37.682 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-07-10 13:29:37.683 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-07-10 13:29:37.733 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-07-10 13:29:37.786 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:37.787 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 110(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:37.910 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:38.906 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==>  Preparing: select blog_id, blog_title, created_time, date_format(created_time, '%Y-%m') as blog_month from bl_blog order by created_time desc 
2020-07-10 13:29:38.907 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==> Parameters: 
2020-07-10 13:29:38.947 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -<==      Total: 9
2020-07-10 13:29:39.012 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:39.014 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getTimeLine(String), [](String), 1(Integer), null, GET(String), 91(Long), {"code":20000,"data":[{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:39.139 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:40.717 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==>  Preparing: select about_id, about_title, about_content, about_read, created_time, update_time, version from bl_about where enable=1 and deleted=0 limit 1 
2020-07-10 13:29:40.719 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==> Parameters: 
2020-07-10 13:29:40.755 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -<==      Total: 1
2020-07-10 13:29:40.758 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==>  Preparing: update bl_about set version=version+1 ,about_title = ? ,about_content = ? , about_read= ? where about_id = ? and version = ? 
2020-07-10 13:29:40.759 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==> Parameters: 关于稽哥(String), <p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>(String), 3(Integer), 4(Integer), 5(Integer)
2020-07-10 13:29:40.860 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -<==    Updates: 1
2020-07-10 13:29:41.052 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:41.056 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/read(String), [](String), 1(Integer), null, GET(String), 377(Long), {"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":3,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-10 05:02:48","version":5},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:41.142 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:44.812 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-07-10 13:29:44.813 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-07-10 13:29:44.822 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:44.823 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getGood/1264726600279891968(String), [1264726600279891968](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$86db4a7a.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 64(Long), {"code":20000,"data":1,"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:44.863 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-07-10 13:29:44.865 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-07-10 13:29:44.866 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 5(Integer), 7(Integer), 0(Integer), 1(Integer), 2(Integer), 1264726600279891968(String), 9(Integer)
2020-07-10 13:29:44.863 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:44.869 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 92(Long), {"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:44.872 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:44.874 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollection/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 87(Long), {"code":20000,"data":0,"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:44.936 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:44.970 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-07-10 13:29:44.971 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-07-10 13:29:44.972 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 1(Integer)
2020-07-10 13:29:44.978 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:44.992 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:45.022 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-07-10 13:29:45.173 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:45.174 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 414(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:45.254 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:56.377 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==>  Preparing: select blog_id, blog_title, created_time, date_format(created_time, '%Y-%m') as blog_month from bl_blog order by created_time desc 
2020-07-10 13:29:56.378 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==> Parameters: 
2020-07-10 13:29:56.418 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -<==      Total: 9
2020-07-10 13:29:56.458 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:56.460 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getTimeLine(String), [](String), 1(Integer), null, GET(String), 91(Long), {"code":20000,"data":[{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:56.629 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-07-10 13:29:56.630 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-07-10 13:29:56.665 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-07-10 13:29:56.704 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:56.705 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 84(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:56.791 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:56.798 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-07-10 13:29:57.732 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-07-10 13:29:57.733 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-07-10 13:29:57.771 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-07-10 13:29:57.773 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-07-10 13:29:57.774 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-07-10 13:29:57.936 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-07-10 13:29:58.058 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-07-10 13:29:58.061 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$86db4a7a.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 388(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-07-10 13:29:58.149 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
