2020-11-09 14:33:01.003 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-11-09 14:35:31.121 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-11-09 14:42:27.064 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-11-09 14:42:27.103 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-11-09 14:42:27.607 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-11-09 14:42:28.131 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:42:28.136 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 1881(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-11-09 14:42:29.192 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:10.658 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-11-09 14:44:10.659 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-11-09 14:44:10.701 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-11-09 14:44:10.763 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:10.764 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)](String), 1(Integer), null, POST(String), 102(Long), {"code":20000,"data":{"token":"1B00BF360D838B317CCB405805665E77"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:10.860 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:10.987 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:10.989 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:11.082 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:11.378 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-11-09 14:44:11.379 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-11-09 14:44:11.429 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-11-09 14:44:11.488 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:11.489 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 133(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:11.580 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:15.132 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-11-09 14:44:15.133 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-11-09 14:44:15.173 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 6
2020-11-09 14:44:15.212 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:15.213 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 78(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:15.314 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:17.015 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-09 14:44:17.019 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:44:17.070 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-11-09 14:44:17.073 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-09 14:44:17.074 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:44:17.134 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:44:17.246 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:17.248 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 343(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:17.333 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:18.450 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==>  Preparing: select about_id, about_title, about_read, created_time, update_time, enable from bl_about where deleted=0 limit ?, ? 
2020-11-09 14:44:18.452 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:44:18.496 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -<==      Total: 3
2020-11-09 14:44:18.498 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_about where deleted = 0 
2020-11-09 14:44:18.499 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:44:18.544 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:44:18.656 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:18.659 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 253(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":0,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-05-25 01:35:29"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:18.759 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:19.340 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-09 14:44:19.342 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:44:19.396 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-11-09 14:44:19.397 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-09 14:44:19.398 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:44:19.442 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:44:19.869 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:19.871 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 562(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:19.970 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:24.730 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-11-09 14:44:24.730 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-11-09 14:44:24.766 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-11-09 14:44:24.808 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:24.809 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 98(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:24.898 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:26.887 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByPage.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time from bl_user where deleted = 0 limit ?, ? 
2020-11-09 14:44:26.889 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:44:26.924 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getByPage.debug:159 -<==      Total: 2
2020-11-09 14:44:26.958 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_user where deleted = 0 
2020-11-09 14:44:26.959 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:44:26.991 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.UserMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:44:27.029 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:27.030 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 148(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:27.132 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:35.042 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:35.043 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 3751(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:35.247 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:38.340 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getByPage.debug:159 -==>  Preparing: select id, name, artist, url, cover, created_time, enabled from bl_music where deleted = 0 limit ?, ? 
2020-11-09 14:44:38.342 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:44:38.923 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-11-09 14:44:38.924 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-11-09 14:44:38.986 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-11-09 14:44:39.254 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:39.255 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 398(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:39.259 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:39.260 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
### The error may involve com.jg.blog.mapper.MusicMapper.getByPage-Inline
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
	at com.jg.blog.service.impl.MusicServiceImpl.getByPage(MusicServiceImpl.java:63)
	at com.jg.blog.controller.MusicController.getByPage(MusicController.java:118)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$78363b6b.getByPage(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
(String), POST(String), 0(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:39.389 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:39.426 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:39.563 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getByPage.debug:159 -==>  Preparing: select id, name, artist, url, cover, created_time, enabled from bl_music where deleted = 0 limit ?, ? 
2020-11-09 14:44:39.565 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:44:39.730 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:39.731 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
### The error may involve com.jg.blog.mapper.MusicMapper.getByPage-Inline
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
	at com.jg.blog.service.impl.MusicServiceImpl.getByPage(MusicServiceImpl.java:63)
	at com.jg.blog.controller.MusicController.getByPage(MusicController.java:118)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$78363b6b.getByPage(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
(String), POST(String), 0(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:39.871 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -==>  Preparing: select log_id, log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip, created_time from bl_log limit ?, ? 
2020-11-09 14:44:39.873 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:44:39.943 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:40.087 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -<==      Total: 10
2020-11-09 14:44:40.089 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_log 
2020-11-09 14:44:40.089 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:44:40.137 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:44:40.440 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:40.443 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /log/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 4828(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":731,"totalPage":74},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:42.139 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:44:59.241 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:44:59.243 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 408(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:44:59.326 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:45:02.087 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -==>  Preparing: select log_id, log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip, created_time from bl_log limit ?, ? 
2020-11-09 14:45:02.088 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:45:02.232 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -<==      Total: 10
2020-11-09 14:45:02.233 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_log 
2020-11-09 14:45:02.235 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:45:02.268 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:45:02.465 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:45:02.486 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /log/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 447(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":734,"totalPage":74},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:45:02.604 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:45:18.453 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:45:18.455 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 56(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:45:18.550 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:45:20.822 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==>  Preparing: select about_id, about_title, about_read, created_time, update_time, enable from bl_about where deleted=0 limit ?, ? 
2020-11-09 14:45:20.823 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:45:20.856 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -<==      Total: 3
2020-11-09 14:45:20.857 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_about where deleted = 0 
2020-11-09 14:45:20.858 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:45:20.890 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:45:21.006 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:45:21.008 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 200(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":0,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-05-25 01:35:29"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:45:21.113 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:45:23.532 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-09 14:45:23.533 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:45:23.576 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-11-09 14:45:23.577 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-09 14:45:23.578 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:45:23.637 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:45:23.741 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:45:23.742 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 261(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:45:23.860 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:47:13.182 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-09 14:47:13.182 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264357690636476416(String)
2020-11-09 14:47:13.315 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-11-09 14:47:13.366 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:47:13.368 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/get/1264357690636476416(String), [1264357690636476416](String), 1(Integer), null, POST(String), 261(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","blogType":1,"createdTime":"2020-05-24 00:49:00","version":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:47:13.477 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:47:42.876 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:47:42.878 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /upload/uploadImage(String), [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@15145d54](String), 1(Integer), null, POST(String), 2772(Long), {"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl-o5g-AMI-vABXexjMdfNQ448.jpg","msg":"上传成功"}(String), 127.0.0.1(String)
2020-11-09 14:47:42.973 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:47:49.166 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:47:49.167 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
### The error may involve com.jg.blog.mapper.MusicMapper.getByPage-Inline
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
	at com.jg.blog.service.impl.MusicServiceImpl.getByPage(MusicServiceImpl.java:63)
	at com.jg.blog.controller.MusicController.getByPage(MusicController.java:118)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$78363b6b.getByPage(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
(String), GET(String), 4(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:47:49.266 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:47:49.889 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-11-09 14:47:49.890 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-11-09 14:47:49.930 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-11-09 14:47:49.963 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-09 14:47:49.964 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:47:49.970 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:47:49.972 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 78(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:47:50.003 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-11-09 14:47:50.004 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-09 14:47:50.005 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:47:50.041 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:47:50.088 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:47:50.160 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:47:50.161 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
### The error may involve com.jg.blog.mapper.MusicMapper.getByPage-Inline
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
	at com.jg.blog.service.impl.MusicServiceImpl.getByPage(MusicServiceImpl.java:63)
	at com.jg.blog.controller.MusicController.getByPage(MusicController.java:118)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:68)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$78363b6b.getByPage(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
(String), POST(String), 264(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:47:50.260 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:48:46.544 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-09 14:48:46.545 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264357690636476416(String)
2020-11-09 14:48:46.623 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-11-09 14:48:46.665 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:48:46.666 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/get/1264357690636476416(String), [1264357690636476416](String), 1(Integer), null, POST(String), 122(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","blogType":1,"createdTime":"2020-05-24 00:49:00","version":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:48:46.780 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:49:08.029 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:49:08.030 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /upload/uploadImage(String), [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@60bd639c](String), 1(Integer), null, POST(String), 13606(Long), {"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl-o5mSAE9RHAFADkgthimk666.jpg","msg":"上传成功"}(String), 127.0.0.1(String)
2020-11-09 14:49:08.144 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:49:13.999 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-09 14:49:14.000 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264357690636476416(String)
2020-11-09 14:49:14.062 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-11-09 14:49:14.066 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-11-09 14:49:14.067 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 垃圾回收算法(String), http://39.97.183.122/group1/M00/00/00/rBGvAl-o5mSAE9RHAFADkgthimk666.jpg(String), <p>标记清除算法<br />概念<br />该算法有两个阶段。</p>
<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>
<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>
<p>缺点：会产生碎片，不够连贯</p>
<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>
<p>优缺点<br />标记清除算法的优点和缺点</p>
<p>1. 优点</p>
<p>- 是可以解决循环引用的问题</p>
<p>- 必要时才回收(内存不足时)</p>
<p>2. 缺点：</p>
<p>- 回收时，应用需要挂起，也就是stop the world。</p>
<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>
<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>
<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>
<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>
<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>
<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>
<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>
<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>
<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>
<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>
<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>
<p>概念</p>
<p><br />&nbsp;</p>
<p>压缩算法简单介绍</p>
<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>
<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>
<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>
<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>
<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>
<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>
<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>
<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>
<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>
<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>(String), 0(Integer), 0(Integer), 0(Integer), 1(Integer), 0(Integer), 1264357690636476416(String), 2(Integer)
2020-11-09 14:49:14.142 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-11-09 14:49:14.298 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:49:14.299 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/update(String), [Blog(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl-o5mSAE9RHAFADkgthimk666.jpg, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>
<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>
<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>
<p>缺点：会产生碎片，不够连贯</p>
<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>
<p>优缺点<br />标记清除算法的优点和缺点</p>
<p>1. 优点</p>
<p>- 是可以解决循环引用的问题</p>
<p>- 必要时才回收(内存不足时)</p>
<p>2. 缺点：</p>
<p>- 回收时，应用需要挂起，也就是stop the world。</p>
<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>
<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>
<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>
<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>
<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>
<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>
<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>
<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>
<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>
<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>
<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>
<p>概念</p>
<p><br />&nbsp;</p>
<p>压缩算法简单介绍</p>
<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>
<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>
<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>
<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>
<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>
<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>
<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>
<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>
<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>
<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=0, blogRead=0, blogCollection=0, blogType=1, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-05-24 00:49:00, updateTime=null, version=2, deleted=null)](String), 1(Integer), null, PUT(String), 343(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-11-09 14:49:14.400 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:49:14.551 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-09 14:49:14.552 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-09 14:49:14.593 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-11-09 14:49:14.595 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-09 14:49:14.597 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-09 14:49:14.637 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-09 14:49:14.740 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:49:14.741 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 229(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl-o5mSAE9RHAFADkgthimk666.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-11-09 06:49:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-11-09 14:49:14.816 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-11-09 14:49:15.759 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-09 14:49:15.759 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /upload/uploadImage(String), [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@39015b50](String), 1(Integer), null, POST(String), 12302(Long), {"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl-o5myAbVW2AFADkgthimk951.jpg","msg":"上传成功"}(String), 127.0.0.1(String)
2020-11-09 14:49:15.832 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
