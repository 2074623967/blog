2020-06-01 06:53:27.347 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 18352 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 06:53:27.416 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 06:53:27.429 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 06:53:34.606 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 06:53:34.840 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 201ms. Found 0 MongoDB repository interfaces.
2020-06-01 06:53:36.302 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$16ce7574] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:36.459 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:36.483 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fd21b3f0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:36.495 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$e3f95832] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:36.502 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 06:53:36.676 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:36.702 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:36.736 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:43.801 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 06:53:43.803 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:43.924 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.038 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.071 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.119 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.135 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.144 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.144 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.345 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:45.444 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 06:53:46.780 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 06:53:46.862 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 06:53:46.863 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 06:53:46.867 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 06:53:47.437 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 06:53:47.437 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 19209 ms
2020-06-01 06:53:49.744 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 06:53:50.962 INFO  [cluster-ClusterId{value='5ed4357dd1b4855a094693d8', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 06:53:53.171 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 06:53:53.202 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 06:53:53.218 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 30.56 seconds (JVM running for 37.109)
2020-06-01 07:00:04.747 INFO  [http-nio-1001-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-01 07:00:04.752 INFO  [http-nio-1001-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-01 07:00:04.860 INFO  [http-nio-1001-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 107 ms
2020-06-01 07:00:05.054 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 07:00:05.054 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:00:05.058 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:00:05.062 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 07:00:05.062 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:00:05.064 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:00:05.065 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 07:00:05.065 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:00:05.068 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 07:00:05.069 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:00:05.069 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:00:05.070 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 07:00:05.070 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:00:05.083 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 07:00:05.085 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:00:05.313 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 07:00:05.313 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 07:00:05.321 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 07:00:05.440 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 07:00:05.440 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 07:00:05.442 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 07:00:05.578 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 07:00:05.583 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 07:00:05.584 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 530
2020-06-01 07:00:05.585 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 531
2020-06-01 07:00:05.585 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 07:00:05.585 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 523
2020-06-01 07:00:05.865 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 07:00:05.872 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 07:00:05.874 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 07:00:05.943 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:00:05.954 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:00:05.958 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 530(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:00:05.959 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 531(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:00:05.964 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:00:05.968 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 523(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:00:06.063 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:00:06.065 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:00:06.065 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:00:11.873 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 07:00:11.874 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:00:11.874 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:00:11.875 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 07:00:11.877 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:00:11.878 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:00:11.879 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 07:00:11.875 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 07:00:11.879 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:00:11.879 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:00:11.945 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 07:00:11.948 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 07:00:11.950 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 07:00:11.952 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 07:00:12.022 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 07:00:12.023 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:00:12.024 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:00:12.026 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 07:00:12.029 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:00:12.274 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 07:00:12.276 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 403
2020-06-01 07:00:12.277 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 07:00:12.279 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 07:00:12.281 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 407
2020-06-01 07:00:12.282 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 07:00:12.282 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 07:00:12.282 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 07:00:12.344 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 07:00:12.344 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 322
2020-06-01 07:00:12.348 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 07:00:12.361 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:00:12.364 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 403(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:00:12.364 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:00:12.376 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 407(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:00:12.432 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:00:12.435 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 322(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:00:12.473 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:00:12.496 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:00:12.547 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:05:36.898 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 07:05:36.898 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 07:05:36.911 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:05:36.911 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:05:36.912 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:05:36.912 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:05:36.898 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 07:05:36.913 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 07:05:36.913 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 07:05:36.914 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:05:36.914 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:05:36.914 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:05:36.915 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:05:36.916 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 07:05:36.919 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:05:37.016 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 07:05:37.022 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 07:05:37.022 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 07:05:37.023 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 07:05:37.026 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 07:05:37.027 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 07:05:37.090 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 07:05:37.091 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 07:05:37.092 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 195
2020-06-01 07:05:37.092 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 195
2020-06-01 07:05:37.093 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 07:05:37.093 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 07:05:37.094 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 197
2020-06-01 07:05:37.094 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 07:05:37.096 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 07:05:37.163 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:05:37.165 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 195(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:05:37.169 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:05:37.173 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:05:37.171 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 195(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:05:37.180 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 197(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:05:37.277 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:05:37.293 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:05:37.296 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:05:43.701 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 07:05:43.703 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:05:43.704 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:05:43.705 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 07:05:43.705 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:05:43.706 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 07:05:43.706 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:05:43.706 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:05:43.709 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 07:05:43.710 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:05:43.719 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 07:05:43.720 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:05:43.721 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:05:43.722 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 07:05:43.722 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:05:43.771 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 07:05:43.772 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 07:05:43.773 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 07:05:43.773 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 07:05:43.785 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 07:05:43.785 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 07:05:43.825 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 07:05:43.826 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 125
2020-06-01 07:05:43.827 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 07:05:43.837 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 07:05:43.839 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 07:05:43.839 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 133
2020-06-01 07:05:43.841 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 122
2020-06-01 07:05:43.841 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 07:05:43.842 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 07:05:43.889 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:05:43.891 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 125(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:05:43.902 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:05:43.906 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 133(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:05:43.911 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:05:43.911 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 122(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:05:44.003 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:05:44.010 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:05:44.027 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:06:00.850 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 07:06:00.851 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 07:06:00.852 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:06:00.853 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:06:00.853 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:06:00.853 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 07:06:00.853 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:06:00.853 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:06:00.854 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 07:06:00.854 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:06:00.850 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 07:06:00.854 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:06:00.854 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:06:00.858 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 07:06:00.858 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:06:00.926 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 07:06:00.928 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 07:06:00.929 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 07:06:00.932 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 07:06:00.936 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 07:06:00.937 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 07:06:00.987 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 07:06:00.987 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 07:06:00.988 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 07:06:00.988 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 138
2020-06-01 07:06:00.988 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 138
2020-06-01 07:06:00.989 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 138
2020-06-01 07:06:00.989 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 07:06:00.989 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 07:06:00.989 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 07:06:01.051 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:06:01.053 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 138(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:06:01.057 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:06:01.058 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 138(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:06:01.064 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:06:01.065 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 138(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:06:01.168 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:06:01.170 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:06:01.177 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:11:23.529 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 07:11:23.528 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 07:11:23.528 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 07:11:23.531 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:11:23.531 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:11:23.531 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:11:23.531 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:11:23.532 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 07:11:23.531 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:11:23.532 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:11:23.532 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 07:11:23.531 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:11:23.533 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:11:23.534 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 07:11:23.534 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:11:23.600 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 07:11:23.600 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 07:11:23.604 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 07:11:23.606 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 07:11:23.610 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 07:11:23.611 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 07:11:23.657 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 07:11:23.662 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 138
2020-06-01 07:11:23.664 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 07:11:23.872 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 07:11:23.873 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 349
2020-06-01 07:11:23.876 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 07:11:23.879 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:11:23.893 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 138(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:11:23.938 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:11:23.939 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 349(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:11:23.998 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:11:24.050 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:11:24.206 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 07:11:24.214 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 690
2020-06-01 07:11:24.216 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 07:11:24.280 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:11:24.283 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 690(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:11:24.382 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:11:33.037 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-01 07:11:33.040 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:11:33.041 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:11:33.042 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-01 07:11:33.042 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:11:33.136 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-06-01 07:11:33.137 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-06-01 07:11:33.199 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 5
2020-06-01 07:11:33.200 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 163
2020-06-01 07:11:33.215 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-01 07:11:33.279 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:11:33.280 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 163(Long), {"code":20000,"data":[{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:11:33.380 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 07:11:36.077 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-06-01 07:11:36.078 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 07:11:36.080 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 07:11:36.081 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-06-01 07:11:36.081 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 07:11:36.278 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==>  Preparing: select about_id, about_title, about_content, about_read, created_time, update_time, version from bl_about where enable=1 and deleted=0 limit 1 
2020-06-01 07:11:36.280 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==> Parameters: 
2020-06-01 07:11:36.355 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -<==      Total: 1
2020-06-01 07:11:36.495 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==>  Preparing: update bl_about set version=version+1 ,about_title = ? ,about_content = ? , about_read= ? where about_id = ? and version = ? 
2020-06-01 07:11:36.497 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==> Parameters: 关于稽哥(String), <p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>(String), 2(Integer), 4(Integer), 4(Integer)
2020-06-01 07:11:36.604 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -<==    Updates: 1
2020-06-01 07:11:36.715 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 638
2020-06-01 07:11:36.722 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":2,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-05-31 12:59:01","version":4},"msg":"操作成功！"}
2020-06-01 07:11:36.778 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 07:11:36.779 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/read(String), [](String), 1(Integer), null, GET(String), 638(Long), {"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":2,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-05-31 12:59:01","version":4},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 07:11:36.881 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:24:47.644 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 10:24:47.644 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 10:24:47.644 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 10:24:48.015 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:24:48.015 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:24:48.014 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:24:48.015 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:24:48.015 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:24:48.015 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:24:48.015 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 10:24:48.016 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 10:24:48.016 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 10:24:48.016 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:24:48.016 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:24:48.016 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:24:51.133 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 10:24:51.133 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 10:24:51.438 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 10:24:51.438 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3795
2020-06-01 10:24:51.438 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 10:24:51.498 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 10:24:51.498 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 10:24:51.558 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 10:24:51.558 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3915
2020-06-01 10:24:51.558 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 10:24:51.608 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 10:24:51.618 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 10:24:51.658 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 10:24:51.658 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4015
2020-06-01 10:24:51.658 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 10:24:51.718 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:24:51.718 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 3795(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:24:51.738 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:24:51.738 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 3915(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:24:51.818 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:24:51.838 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:24:51.874 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:24:51.875 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 4015(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:24:51.978 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:25:42.769 WARN  [http-nio-1001-exec-5]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /login.jsp;jsessionid=770550E10A2F3720342B9B0F59E6C3B2
2020-06-01 10:25:42.963 ERROR [http-nio-1001-exec-5]com.jg.blog.advice.BlogExceptionAdvice.exceptionHandler:27 -统一异常处理：
com.jg.blog.exception.BlogException: 当前账号未登录！
	at com.jg.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:46)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-06-01 10:28:39.769 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 10:28:39.780 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:28:39.781 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:28:39.773 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 10:28:39.782 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:28:39.782 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 10:28:39.782 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:28:39.782 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:28:39.783 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 10:28:39.783 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:28:39.867 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 10:28:39.871 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 10:28:39.872 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 10:28:39.872 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 10:28:39.913 WARN  [http-nio-1001-exec-10]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /login.jsp
2020-06-01 10:28:39.931 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 10:28:39.934 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 165
2020-06-01 10:28:39.936 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 10:28:39.957 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 10:28:39.938 ERROR [http-nio-1001-exec-10]com.jg.blog.advice.BlogExceptionAdvice.exceptionHandler:27 -统一异常处理：
com.jg.blog.exception.BlogException: 当前账号未登录！
	at com.jg.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:46)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-06-01 10:28:39.987 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 214
2020-06-01 10:28:39.993 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:28:39.989 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 10:28:39.997 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 165(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:28:40.050 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:28:40.052 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 214(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:28:40.093 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:28:40.119 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 10:28:40.120 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:28:40.120 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:28:40.120 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 10:28:40.120 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:28:40.200 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:28:40.274 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 10:28:40.276 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 10:28:40.332 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 10:28:40.333 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 214
2020-06-01 10:28:40.334 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 10:28:40.387 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:28:40.388 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 214(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:28:40.487 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:29:22.014 WARN  [http-nio-1001-exec-1]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /login.jsp
2020-06-01 10:29:22.026 ERROR [http-nio-1001-exec-1]com.jg.blog.advice.BlogExceptionAdvice.exceptionHandler:27 -统一异常处理：
com.jg.blog.exception.BlogException: 当前账号未登录！
	at com.jg.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:46)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-06-01 10:29:35.285 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 10:29:35.285 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 10:29:35.288 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:29:35.288 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:29:35.288 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:29:35.288 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:29:35.290 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 10:29:35.290 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 10:29:35.290 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:29:35.290 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:29:35.361 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 10:29:35.362 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 10:29:35.367 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 10:29:35.368 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 10:29:35.429 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 10:29:35.429 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 10:29:35.431 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 146
2020-06-01 10:29:35.431 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 147
2020-06-01 10:29:35.433 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 10:29:35.433 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 10:29:35.457 WARN  [http-nio-1001-exec-9]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /login.jsp
2020-06-01 10:29:35.460 ERROR [http-nio-1001-exec-9]com.jg.blog.advice.BlogExceptionAdvice.exceptionHandler:27 -统一异常处理：
com.jg.blog.exception.BlogException: 当前账号未登录！
	at com.jg.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:46)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-06-01 10:29:35.475 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 10:29:35.476 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:29:35.476 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:29:35.477 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 10:29:35.478 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:29:35.487 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:29:35.489 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 147(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:29:35.490 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:29:35.492 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 146(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:29:35.534 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 10:29:35.535 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 10:29:35.593 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 10:29:35.594 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 119
2020-06-01 10:29:35.595 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 10:29:35.602 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:29:35.613 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:29:35.651 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:29:35.652 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 119(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:29:35.753 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:30:49.125 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 10:30:49.137 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:30:49.138 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:30:49.139 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 10:30:49.139 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:30:49.111 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 10:30:49.149 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:30:49.150 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:30:49.150 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 10:30:49.152 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:30:49.266 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 10:30:49.267 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:30:49.267 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:30:49.268 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 10:30:49.268 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:30:49.417 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 10:30:49.419 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 10:30:49.420 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 10:30:49.421 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 10:30:49.392 WARN  [http-nio-1001-exec-5]org.springframework.web.servlet.PageNotFound.noHandlerFound:1251 -No mapping for GET /login.jsp
2020-06-01 10:30:49.464 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 10:30:49.465 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 10:30:49.476 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 10:30:49.476 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 10:30:49.476 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 210
2020-06-01 10:30:49.476 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 366
2020-06-01 10:30:49.476 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 10:30:49.476 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 10:30:49.552 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 10:30:49.553 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 428
2020-06-01 10:30:49.554 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 10:30:49.559 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:30:49.561 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 210(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:30:49.568 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:30:49.570 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 366(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:30:49.456 ERROR [http-nio-1001-exec-5]com.jg.blog.advice.BlogExceptionAdvice.exceptionHandler:27 -统一异常处理：
com.jg.blog.exception.BlogException: 当前账号未登录！
	at com.jg.blog.interceptor.LoginInterceptor.preHandle(LoginInterceptor.java:46)
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:141)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1035)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:175)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-06-01 10:30:49.608 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:30:49.610 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 428(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:30:49.657 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:30:49.670 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:30:49.706 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:32:22.792 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 20224 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 10:32:22.799 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 10:32:22.801 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 10:32:25.553 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 10:32:25.624 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 57ms. Found 0 MongoDB repository interfaces.
2020-06-01 10:32:26.622 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$5820ab4a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:26.799 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:26.836 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$3e73e9c6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:26.894 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$254b8e08] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:26.915 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 10:32:27.088 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:27.129 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:27.184 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:32.505 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 10:32:32.506 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:32.687 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.312 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.329 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.350 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.364 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.366 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.368 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.436 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:33.486 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 10:32:34.039 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 10:32:34.062 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 10:32:34.064 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 10:32:34.064 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 10:32:34.294 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 10:32:34.295 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 11249 ms
2020-06-01 10:32:36.449 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 10:32:37.521 INFO  [cluster-ClusterId{value='5ed468c4fa8b9f3ae521c304', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 10:32:37.950 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 10:32:37.989 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 10:32:38.006 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 17.914 seconds (JVM running for 23.215)
2020-06-01 10:33:30.273 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-01 10:33:30.274 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-01 10:33:30.349 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 74 ms
2020-06-01 10:33:30.482 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 10:33:30.483 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 10:33:30.484 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:33:30.491 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 10:33:30.492 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:33:30.756 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 10:33:30.946 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 10:33:31.074 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 10:33:31.078 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 596
2020-06-01 10:33:31.360 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 10:33:31.428 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:33:31.435 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 596(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:33:31.546 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:33:38.845 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 10:33:38.846 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 10:33:38.847 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:33:38.848 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 10:33:38.849 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:33:38.871 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 10:33:38.871 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 10:33:38.872 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:33:38.872 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:33:38.873 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:33:38.873 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:33:38.873 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 10:33:38.873 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 10:33:38.874 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:33:38.874 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:33:38.912 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 10:33:38.913 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 10:33:38.958 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 10:33:38.959 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 10:33:38.961 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 10:33:38.962 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 10:33:38.972 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 10:33:38.974 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 129
2020-06-01 10:33:38.975 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 10:33:39.025 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 10:33:39.026 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 155
2020-06-01 10:33:39.032 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 10:33:39.033 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 162
2020-06-01 10:33:39.038 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 10:33:39.039 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:33:39.043 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 129(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:33:39.045 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 10:33:39.057 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 10:33:39.058 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 10:33:39.058 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 10:33:39.059 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 10:33:39.060 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 10:33:39.091 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:33:39.092 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 155(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:33:39.103 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:33:39.106 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 162(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:33:39.115 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 10:33:39.116 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 10:33:39.142 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:33:39.167 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 10:33:39.169 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 112
2020-06-01 10:33:39.174 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 10:33:39.189 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:33:39.200 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 10:33:39.228 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 10:33:39.230 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 112(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 10:33:39.322 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 11:36:35.300 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 11:36:35.325 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 11:36:35.357 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 11:36:35.359 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 11:36:35.360 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 11:36:35.357 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 11:36:35.360 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 11:36:35.360 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 11:36:35.361 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 11:36:35.362 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 11:36:35.317 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 11:36:35.364 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 11:36:35.365 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 11:36:35.366 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 11:36:35.366 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 11:36:35.397 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 11:36:35.398 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 11:36:35.399 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 11:36:35.400 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 11:36:35.400 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 11:36:37.157 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 11:36:37.161 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 11:36:37.214 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 11:36:37.215 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1890
2020-06-01 11:36:37.218 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 11:36:37.275 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 11:36:37.277 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 11:36:37.324 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 11:36:37.325 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2008
2020-06-01 11:36:37.326 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 11:36:37.382 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 11:36:37.383 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 11:36:37.430 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 11:36:37.432 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2035
2020-06-01 11:36:37.433 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 11:36:37.490 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 11:36:37.493 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 1890(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 11:36:37.590 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 11:36:37.648 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 11:36:37.650 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 2008(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 11:36:37.747 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 11:36:37.781 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 11:36:37.784 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 2035(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 11:36:37.798 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 11:36:37.800 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 11:36:37.848 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 11:36:37.851 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2552
2020-06-01 11:36:37.852 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 11:36:37.880 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 11:36:37.911 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 11:36:37.914 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 2552(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 11:36:38.015 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 15:48:19.366 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 11060 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 15:48:19.374 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 15:48:19.376 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 15:48:21.234 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 15:48:21.277 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 36ms. Found 0 MongoDB repository interfaces.
2020-06-01 15:48:21.816 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$1e9f0e89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:21.891 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:21.921 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4f24d05] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:21.929 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$ebc9f147] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:21.934 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 15:48:22.009 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:22.033 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:22.076 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:26.826 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 15:48:26.826 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:26.912 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.245 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.253 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.264 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.269 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.273 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.275 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.320 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.351 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 15:48:27.774 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 15:48:27.784 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 15:48:27.785 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 15:48:27.785 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 15:48:27.935 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 15:48:27.935 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 8474 ms
2020-06-01 15:48:29.451 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 15:48:30.482 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 15:48:30.493 INFO  [cluster-ClusterId{value='5ed4b2cdde18391d112d44d3', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 15:48:30.515 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 15:48:30.530 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 12.472 seconds (JVM running for 14.358)
2020-06-01 15:58:43.582 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-01 15:58:43.585 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-01 15:58:43.638 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 50 ms
2020-06-01 15:58:43.807 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 15:58:43.807 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 15:58:43.807 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 15:58:43.807 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 15:58:43.807 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 15:58:43.813 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 15:58:43.807 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 15:58:43.814 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 15:58:43.814 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 15:58:43.813 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 15:58:43.814 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 15:58:43.813 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 15:58:43.819 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 15:58:43.819 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 15:58:43.821 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 15:58:43.821 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 15:58:43.820 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 15:58:43.822 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 15:58:43.820 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 15:58:43.822 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 15:58:44.004 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 15:58:44.005 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 15:58:44.004 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 15:58:44.070 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 15:58:44.070 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 15:58:44.071 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 15:58:44.181 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 15:58:44.186 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 380
2020-06-01 15:58:44.190 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 15:58:44.191 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 385
2020-06-01 15:58:44.206 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 15:58:44.207 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 400
2020-06-01 15:58:44.226 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 15:58:44.229 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 15:58:44.283 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 15:58:44.285 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 479
2020-06-01 15:58:44.410 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 15:58:44.417 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 15:58:44.419 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 15:58:44.419 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 15:58:44.502 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 15:58:44.506 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 15:58:44.511 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 380(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 15:58:44.515 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 385(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 15:58:44.517 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 15:58:44.519 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 400(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 15:58:44.523 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 15:58:44.528 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 479(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 15:58:44.601 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 15:58:44.614 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 15:58:44.634 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 15:58:44.639 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 15:58:52.584 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 15:58:52.585 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 15:58:52.585 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 15:58:52.586 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 15:58:52.586 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 15:58:52.755 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 15:58:52.756 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 15:58:52.822 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 15:58:52.825 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 15:58:52.827 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 15:58:52.894 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 15:58:53.002 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 418
2020-06-01 15:58:53.013 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 15:58:53.070 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 15:58:53.073 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 418(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 15:58:53.168 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:33:44.351 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 4420 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 16:33:44.359 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 16:33:44.361 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 16:33:46.143 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 16:33:46.228 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 71ms. Found 0 MongoDB repository interfaces.
2020-06-01 16:33:46.983 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$acb94f6f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:47.077 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:47.106 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$930c8deb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:47.115 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$79e4322d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:47.139 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 16:33:47.338 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:47.399 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:47.464 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.076 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 16:33:53.077 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.225 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.694 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.713 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.742 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.750 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.757 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.760 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.861 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:53.944 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 16:33:54.781 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 16:33:54.799 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 16:33:54.804 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 16:33:54.805 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 16:33:55.112 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 16:33:55.113 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 10630 ms
2020-06-01 16:33:57.657 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 16:33:58.896 INFO  [cluster-ClusterId{value='5ed4bd75abe3c5568e612104', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 16:33:59.121 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 16:33:59.174 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 16:33:59.196 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.561 seconds (JVM running for 20.496)
2020-06-01 16:35:03.198 INFO  [http-nio-1001-exec-8]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-01 16:35:03.199 INFO  [http-nio-1001-exec-8]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-01 16:35:03.229 INFO  [http-nio-1001-exec-8]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 30 ms
2020-06-01 16:35:03.323 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 16:35:03.323 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 16:35:03.323 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:35:03.326 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:35:03.323 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 16:35:03.328 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:35:03.325 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 16:35:03.333 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:35:03.334 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:35:03.336 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 16:35:03.336 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 16:35:03.336 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:35:03.336 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:35:03.326 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 16:35:03.338 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:35:03.339 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:35:03.339 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 16:35:03.353 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:35:03.332 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 16:35:03.354 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:35:03.744 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 16:35:03.746 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 16:35:03.749 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 16:35:03.753 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 16:35:03.799 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 16:35:03.799 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 16:35:03.799 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 16:35:03.802 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 16:35:03.905 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 16:35:03.907 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 16:35:03.908 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 586
2020-06-01 16:35:03.921 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 16:35:03.911 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 16:35:03.925 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 603
2020-06-01 16:35:03.925 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 603
2020-06-01 16:35:03.924 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 16:35:03.926 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:35:03.908 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 16:35:03.927 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 16:35:03.928 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 602
2020-06-01 16:35:03.928 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 16:35:04.089 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 16:35:04.093 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 16:35:04.093 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 16:35:04.109 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 16:35:04.124 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 16:35:04.126 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 16:35:04.154 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:35:04.157 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:35:04.159 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 586(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:35:04.159 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 603(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:35:04.161 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:35:04.163 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 602(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:35:04.171 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:35:04.173 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 603(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:35:04.185 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 16:35:04.187 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 16:35:04.187 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 16:35:04.232 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 16:35:04.248 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:35:04.253 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:35:04.257 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:35:04.282 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:35:04.324 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 403
2020-06-01 16:35:04.336 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 16:35:04.398 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:35:04.399 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 403(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:35:04.501 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:40.384 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 16:58:40.405 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 16:58:40.406 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:40.408 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 16:58:40.414 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:40.433 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 16:58:40.449 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 16:58:40.471 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:40.472 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 16:58:40.473 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 16:58:40.615 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 16:58:40.622 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 16:58:40.678 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 16:58:40.681 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 16:58:40.690 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 16:58:40.693 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 311
2020-06-01 16:58:40.697 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 16:58:40.749 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 16:58:40.751 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 16:58:40.752 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 16:58:40.759 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:40.761 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 311(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:40.893 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 16:58:40.939 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:40.990 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 608
2020-06-01 16:58:40.993 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 16:58:41.054 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:41.058 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 608(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:41.158 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:43.520 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 16:58:43.520 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 16:58:43.521 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:58:43.521 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:58:43.522 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:43.524 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 16:58:43.525 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:43.527 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 16:58:43.522 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:43.530 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:58:43.530 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 16:58:43.531 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:43.531 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:43.531 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 16:58:43.532 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:43.600 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 16:58:43.601 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 16:58:43.605 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 16:58:43.608 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 16:58:43.613 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 16:58:43.614 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 16:58:43.655 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 16:58:43.656 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 16:58:43.658 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 138
2020-06-01 16:58:43.660 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 16:58:43.656 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 136
2020-06-01 16:58:43.664 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 16:58:43.666 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 16:58:43.667 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 140
2020-06-01 16:58:43.668 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 16:58:43.716 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:43.718 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 138(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:43.736 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:43.738 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 140(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:43.742 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:43.746 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 136(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:43.814 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:43.836 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:43.855 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:46.189 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 16:58:46.196 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 16:58:46.196 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:46.197 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 16:58:46.197 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 16:58:46.214 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 16:58:46.214 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 16:58:46.215 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:46.216 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 16:58:46.216 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:46.271 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 16:58:46.272 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 16:58:46.287 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 16:58:46.288 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:58:46.289 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:46.295 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 16:58:46.296 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:46.300 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 16:58:46.302 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 16:58:46.327 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 16:58:46.330 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 116
2020-06-01 16:58:46.332 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 16:58:46.354 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 16:58:46.355 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 16:58:46.358 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 16:58:46.359 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 16:58:46.360 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 16:58:46.388 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:46.391 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 116(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:46.403 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 16:58:46.404 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 117
2020-06-01 16:58:46.405 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 16:58:46.411 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 16:58:46.464 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:46.467 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 117(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:46.484 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:46.504 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 315
2020-06-01 16:58:46.505 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 16:58:46.567 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:46.569 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:46.569 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 315(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:46.597 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 16:58:46.598 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:58:46.597 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 16:58:46.600 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:46.601 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 16:58:46.601 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 16:58:46.601 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 16:58:46.601 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:46.602 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 16:58:46.603 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 16:58:46.666 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 16:58:46.667 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 16:58:46.671 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:46.671 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 16:58:46.672 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 16:58:46.717 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 16:58:46.718 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 121
2020-06-01 16:58:46.719 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 16:58:46.728 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 16:58:46.730 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 133
2020-06-01 16:58:46.730 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 16:58:46.779 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:46.786 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 121(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:46.790 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 16:58:46.797 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 133(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 16:58:46.877 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 16:58:46.889 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:30:51.542 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 1828 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 17:30:51.579 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 17:30:51.586 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 17:30:53.700 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 17:30:53.761 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 54ms. Found 0 MongoDB repository interfaces.
2020-06-01 17:30:54.725 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$8c0293c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:30:54.856 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:30:54.885 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$ef1367b8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:30:54.901 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$d5eb0bfa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:30:54.911 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 17:30:55.120 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:30:55.155 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:30:55.224 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:00.405 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 17:31:00.406 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:00.540 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:00.959 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:00.984 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:01.001 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:01.006 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:01.009 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:01.018 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:01.074 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:01.117 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:31:01.682 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 17:31:01.692 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 17:31:01.693 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 17:31:01.694 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 17:31:01.950 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 17:31:01.951 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 10166 ms
2020-06-01 17:31:03.822 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 17:31:04.890 INFO  [cluster-ClusterId{value='5ed4cad762cfd7676e36dbeb', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 17:31:05.605 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 17:31:05.642 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 17:31:05.660 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.167 seconds (JVM running for 19.714)
2020-06-01 17:33:22.778 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 7792 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 17:33:22.791 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 17:33:22.793 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 17:33:25.180 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 17:33:25.247 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 56ms. Found 0 MongoDB repository interfaces.
2020-06-01 17:33:25.972 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$9aee8f52] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:26.078 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:26.100 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$8141cdce] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:26.110 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$68197210] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:26.116 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 17:33:26.264 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:26.298 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:26.344 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:31.797 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 17:33:31.798 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:31.915 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.397 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.409 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.426 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.439 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.442 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.443 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.505 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:32.557 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 17:33:33.077 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 17:33:33.092 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 17:33:33.093 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 17:33:33.094 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 17:33:33.326 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 17:33:33.327 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 10383 ms
2020-06-01 17:33:35.372 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 17:33:36.430 INFO  [cluster-ClusterId{value='5ed4cb6fee573e28404865e0', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 17:33:36.914 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 17:33:36.961 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 17:33:36.980 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.018 seconds (JVM running for 19.8)
2020-06-01 17:34:16.388 INFO  [http-nio-1001-exec-4]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-01 17:34:16.390 INFO  [http-nio-1001-exec-4]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-01 17:34:16.439 INFO  [http-nio-1001-exec-4]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 49 ms
2020-06-01 17:34:16.537 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 17:34:16.538 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 17:34:16.537 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 17:34:16.538 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:34:16.537 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 17:34:16.539 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:34:16.539 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:34:16.539 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:34:16.539 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:34:16.538 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 17:34:16.540 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:34:16.540 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:34:16.542 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 17:34:16.543 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 17:34:16.543 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 17:34:16.542 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 17:34:16.544 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:34:16.544 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:34:16.544 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:34:16.543 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:34:16.708 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 17:34:16.708 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 17:34:16.710 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 17:34:16.713 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 17:34:16.762 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 17:34:16.762 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 17:34:16.762 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 17:34:16.769 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 17:34:16.877 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 17:34:16.879 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 17:34:16.882 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 345
2020-06-01 17:34:16.882 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 345
2020-06-01 17:34:16.882 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 17:34:16.884 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 17:34:16.886 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 349
2020-06-01 17:34:16.884 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 347
2020-06-01 17:34:17.042 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 17:34:17.043 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 17:34:17.047 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 17:34:17.057 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 17:34:17.109 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:34:17.118 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 347(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:34:17.134 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:34:17.136 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 349(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:34:17.137 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:34:17.139 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 345(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:34:17.141 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:34:17.145 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 345(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:34:17.234 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:34:17.238 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:34:17.265 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:34:17.333 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:12.211 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 17:36:12.212 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 17:36:12.212 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:12.213 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 17:36:12.213 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:36:12.273 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 17:36:12.274 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 17:36:12.297 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264358056178458624
2020-06-01 17:36:12.297 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:36:12.298 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:12.299 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-06-01 17:36:12.300 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358056178458624]
2020-06-01 17:36:12.335 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 17:36:12.336 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 125
2020-06-01 17:36:12.337 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 17:36:12.400 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:12.402 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 125(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:12.498 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-01 17:36:12.500 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:12.500 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264358056178458624(String)
2020-06-01 17:36:12.614 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-01 17:36:12.662 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-01 17:36:12.667 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: Mybatis源码阅读（五 ）：接口层——SqlSession(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png(String), <p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>
<p>SqlSession的代码如下</p>
<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>
<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>
<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>
<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error updating database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error committing transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error rolling back transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error flushing statements. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>
<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>
<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>
<p>SQLSessionManager核心字段如下</p>
<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>
<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>
<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>
<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>
<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>(String), 0(Integer), 1(Integer), 0(Integer), 2(Integer), 0(Integer), 1264358056178458624(String), 3(Integer)
2020-06-01 17:36:12.835 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-01 17:36:12.848 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-06-01 17:36:12.849 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 2(Integer)
2020-06-01 17:36:12.897 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-06-01 17:36:12.996 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 699
2020-06-01 17:36:13.001 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":1,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},"msg":"操作成功！"}
2020-06-01 17:36:13.077 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:13.082 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264358056178458624(String), [1264358056178458624](String), 1(Integer), null, GET(String), 699(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":1,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:13.181 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:30.465 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 17:36:30.467 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:36:30.467 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:30.468 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 17:36:30.469 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:36:30.476 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 17:36:30.477 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 17:36:30.478 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:30.479 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 17:36:30.480 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:36:30.530 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 17:36:30.531 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 17:36:30.545 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 17:36:30.546 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 17:36:30.570 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 17:36:30.572 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 17:36:30.572 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:30.573 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 17:36:30.575 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 17:36:30.585 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 17:36:30.586 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 121
2020-06-01 17:36:30.587 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 17:36:30.605 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 17:36:30.608 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 131
2020-06-01 17:36:30.608 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":1,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 17:36:30.646 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:30.648 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 121(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:30.668 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:30.671 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 131(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":1,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:30.707 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 17:36:30.710 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 17:36:30.713 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 17:36:30.714 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:36:30.715 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:30.715 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 17:36:30.716 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:36:30.750 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:30.772 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 17:36:30.775 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 17:36:30.776 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 17:36:30.777 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:30.777 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 17:36:30.778 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 17:36:30.846 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 17:36:30.846 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 17:36:30.847 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 134
2020-06-01 17:36:30.849 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 17:36:30.858 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 17:36:30.860 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:36:30.862 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:30.863 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 17:36:30.863 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 17:36:30.913 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:30.922 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 17:36:30.916 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 134(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:30.924 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 17:36:30.954 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 384
2020-06-01 17:36:30.964 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":1,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 17:36:30.976 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 17:36:30.977 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 119
2020-06-01 17:36:30.977 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 17:36:31.016 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:31.018 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:31.019 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 384(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":1,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:31.034 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:31.035 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 119(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:31.122 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:31.129 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 17:36:33.209 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264358056178458624
2020-06-01 17:36:33.209 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 17:36:33.210 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 17:36:33.211 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-06-01 17:36:33.212 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358056178458624]
2020-06-01 17:36:33.320 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-01 17:36:33.321 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264358056178458624(String)
2020-06-01 17:36:33.434 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-01 17:36:33.435 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-01 17:36:33.441 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: Mybatis源码阅读（五 ）：接口层——SqlSession(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png(String), <p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>
<p>SqlSession的代码如下</p>
<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>
<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>
<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>
<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error updating database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error committing transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error rolling back transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error flushing statements. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>
<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>
<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>
<p>SQLSessionManager核心字段如下</p>
<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>
<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>
<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>
<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>
<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>(String), 0(Integer), 2(Integer), 0(Integer), 2(Integer), 0(Integer), 1264358056178458624(String), 4(Integer)
2020-06-01 17:36:33.560 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-01 17:36:33.561 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-06-01 17:36:33.562 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 2(Integer)
2020-06-01 17:36:33.616 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-06-01 17:36:33.715 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 506
2020-06-01 17:36:33.717 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},"msg":"操作成功！"}
2020-06-01 17:36:33.770 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 17:36:33.774 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264358056178458624(String), [1264358056178458624](String), 1(Integer), null, GET(String), 506(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 17:36:33.886 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:10.538 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 8056 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 18:08:10.544 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 18:08:10.546 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 18:08:12.874 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 18:08:12.940 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 56ms. Found 0 MongoDB repository interfaces.
2020-06-01 18:08:13.806 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$67044d0c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:13.907 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:13.929 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4d578b88] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:13.942 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$342f2fca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:13.950 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 18:08:14.075 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:14.119 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:14.173 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:19.713 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 18:08:19.714 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:19.850 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.301 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.312 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.329 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.337 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.343 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.346 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.418 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:20.474 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 18:08:21.417 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 18:08:21.445 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 18:08:21.447 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 18:08:21.449 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 18:08:21.808 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 18:08:21.809 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 11133 ms
2020-06-01 18:08:25.435 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 18:08:26.609 INFO  [cluster-ClusterId{value='5ed4d39912ee2253df562ee2', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 18:08:27.416 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 18:08:27.483 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 18:08:27.506 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 18.718 seconds (JVM running for 21.341)
2020-06-01 18:08:48.700 INFO  [http-nio-1001-exec-3]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-01 18:08:48.701 INFO  [http-nio-1001-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-01 18:08:48.733 INFO  [http-nio-1001-exec-3]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 32 ms
2020-06-01 18:08:48.829 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 18:08:48.831 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 18:08:48.831 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:08:48.834 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 18:08:48.837 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 18:08:48.839 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:48.833 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:48.832 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 18:08:48.851 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:48.866 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 18:08:48.866 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 18:08:48.867 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 18:08:48.868 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 18:08:48.866 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 18:08:48.880 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 18:08:48.970 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 18:08:48.970 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 18:08:48.971 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:48.972 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 18:08:48.972 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 18:08:49.169 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 18:08:49.187 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 18:08:49.197 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 18:08:49.209 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 18:08:49.245 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 18:08:49.249 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 18:08:49.249 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 18:08:49.251 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 18:08:49.348 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 18:08:49.350 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 18:08:49.351 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 18:08:49.352 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 383
2020-06-01 18:08:49.352 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 523
2020-06-01 18:08:49.362 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 18:08:49.363 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 534
2020-06-01 18:08:49.352 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 521
2020-06-01 18:08:49.369 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 18:08:49.371 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:08:49.372 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:49.375 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 18:08:49.377 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 18:08:49.599 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 18:08:49.602 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 18:08:49.646 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 18:08:49.654 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 18:08:49.655 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 18:08:49.666 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 18:08:49.667 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 18:08:49.669 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 18:08:49.670 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 18:08:49.708 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:49.714 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 521(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:49.716 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:49.717 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 523(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:49.720 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:49.720 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 18:08:49.722 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 383(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:49.730 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:49.732 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 534(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:49.819 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:49.821 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:49.823 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:49.819 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 450
2020-06-01 18:08:49.830 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 18:08:49.842 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:49.886 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:49.890 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 450(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:49.988 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:54.355 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 18:08:54.356 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:08:54.356 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:54.357 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 18:08:54.358 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13)], params={}, sortColumn=blog_goods, sortMethod=desc)]
2020-06-01 18:08:54.461 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_goods desc limit ?, ? 
2020-06-01 18:08:54.463 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 18:08:54.524 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 18:08:54.527 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 18:08:54.528 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 18:08:54.577 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 18:08:54.674 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 319
2020-06-01 18:08:54.677 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 18:08:54.749 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:54.751 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13)], params={}, sortColumn=blog_goods, sortMethod=desc)](String), 1(Integer), null, POST(String), 319(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:54.856 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:56.719 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 18:08:56.720 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:08:56.721 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:56.722 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 18:08:56.723 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-06-01 18:08:56.831 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_comment desc limit ?, ? 
2020-06-01 18:08:56.832 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 18:08:56.888 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 18:08:56.890 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 18:08:56.892 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 18:08:56.946 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 18:08:57.042 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 323
2020-06-01 18:08:57.044 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 18:08:57.113 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:57.119 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=blog_comment, sortMethod=desc)](String), 1(Integer), null, POST(String), 323(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:57.225 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:58.262 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 18:08:58.263 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:08:58.264 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:58.265 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 18:08:58.266 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=blog_read, sortMethod=desc)]
2020-06-01 18:08:58.365 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_read desc limit ?, ? 
2020-06-01 18:08:58.366 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 18:08:58.418 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 18:08:58.419 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 18:08:58.420 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 18:08:58.466 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 18:08:58.561 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 299
2020-06-01 18:08:58.561 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 18:08:58.613 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:58.616 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=blog_read, sortMethod=desc)](String), 1(Integer), null, POST(String), 299(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:58.712 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:08:59.136 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 18:08:59.137 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:08:59.138 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:08:59.138 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 18:08:59.139 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=blog_collection, sortMethod=desc)]
2020-06-01 18:08:59.234 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_collection desc limit ?, ? 
2020-06-01 18:08:59.236 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 18:08:59.286 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 18:08:59.287 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 18:08:59.289 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 18:08:59.334 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 18:08:59.426 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 290
2020-06-01 18:08:59.429 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 18:08:59.490 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:08:59.494 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=blog_collection, sortMethod=desc)](String), 1(Integer), null, POST(String), 290(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:08:59.586 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:09:01.280 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 18:09:01.281 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:09:01.281 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:09:01.282 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 18:09:01.282 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 18:09:01.384 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 18:09:01.385 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 18:09:01.448 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 18:09:01.450 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 18:09:01.451 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 18:09:01.502 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 18:09:01.606 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 326
2020-06-01 18:09:01.606 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 18:09:01.666 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:09:01.669 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 09:36:36), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-05-25 01:14:56)], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 326(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":2,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 09:36:36"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:09:01.774 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:09:06.066 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264358056178458624
2020-06-01 18:09:06.067 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 18:09:06.069 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:09:06.070 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-06-01 18:09:06.070 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358056178458624]
2020-06-01 18:09:06.169 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-01 18:09:06.170 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264358056178458624(String)
2020-06-01 18:09:06.342 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-01 18:09:06.347 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-01 18:09:06.349 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: Mybatis源码阅读（五 ）：接口层——SqlSession(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png(String), <p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>
<p>SqlSession的代码如下</p>
<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>
<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>
<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>
<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error updating database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error committing transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error rolling back transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error flushing statements. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>
<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>
<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>
<p>SQLSessionManager核心字段如下</p>
<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>
<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>
<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>
<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>
<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>(String), 0(Integer), 3(Integer), 0(Integer), 2(Integer), 0(Integer), 1264358056178458624(String), 5(Integer)
2020-06-01 18:09:06.561 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-01 18:09:06.571 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-06-01 18:09:06.572 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 2(Integer)
2020-06-01 18:09:06.626 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-06-01 18:09:06.728 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 662
2020-06-01 18:09:06.729 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},"msg":"操作成功！"}
2020-06-01 18:09:06.787 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:09:06.791 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264358056178458624(String), [1264358056178458624](String), 1(Integer), null, GET(String), 662(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:09:06.915 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 18:09:08.827 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 18:09:08.830 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 18:09:08.832 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 18:09:08.833 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 18:09:08.833 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 18:09:08.936 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 18:09:08.937 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 18:09:08.993 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 18:09:08.996 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 18:09:08.997 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 18:09:09.047 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 18:09:09.143 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 316
2020-06-01 18:09:09.145 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 10:09:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 18:09:09.202 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 18:09:09.203 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 316(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":0,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-05-25 01:14:56"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 10:09:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 18:09:09.306 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:08.733 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 19:52:08.726 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 19:52:09.159 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 19:52:08.726 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 19:52:09.160 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 19:52:09.160 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:09.161 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 19:52:09.159 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:09.160 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:09.161 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:09.162 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 19:52:09.162 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 19:52:09.162 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:09.161 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:09.162 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:09.171 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 19:52:09.172 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 19:52:09.173 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:09.175 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 19:52:09.176 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:09.190 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:52:09.191 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:09.192 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:09.266 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:52:09.267 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 19:52:12.498 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 19:52:12.510 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 19:52:12.573 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 19:52:12.576 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3853
2020-06-01 19:52:12.585 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 19:52:12.647 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 19:52:12.649 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 19:52:12.757 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 19:52:12.759 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4026
2020-06-01 19:52:12.760 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 19:52:12.810 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 19:52:12.812 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 19:52:12.861 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 19:52:12.864 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4138
2020-06-01 19:52:12.866 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 19:52:12.973 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 19:52:12.977 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:52:13.039 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:52:13.042 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:52:13.043 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:52:13.089 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:52:13.180 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3990
2020-06-01 19:52:13.183 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:52:13.249 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 19:52:13.251 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 19:52:13.298 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 19:52:13.300 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4188
2020-06-01 19:52:13.301 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 19:52:13.353 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:13.357 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 3853(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:13.449 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:13.519 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:13.522 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 4026(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:13.632 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:13.655 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:13.657 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 4138(Long), {"code":20000,"data":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:13.689 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:13.707 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 3990(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:13.754 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:13.800 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:13.807 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:13.809 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 4188(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:13.902 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:22.672 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:52:22.672 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:22.673 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:22.674 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:52:22.675 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-01 19:52:22.675 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:22.675 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 19:52:22.677 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:22.683 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-01 19:52:22.683 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:22.686 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-01 19:52:22.688 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 19:52:22.688 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:22.689 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-01 19:52:22.690 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:22.792 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-01 19:52:22.793 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-01 19:52:22.794 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-01 19:52:22.795 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-01 19:52:22.847 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-01 19:52:22.848 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 173
2020-06-01 19:52:22.849 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"}],"msg":"操作成功！"}
2020-06-01 19:52:22.851 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-01 19:52:22.851 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 19:52:22.852 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 166
2020-06-01 19:52:22.852 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-01 19:52:22.852 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:52:22.905 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-01 19:52:22.906 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 19:52:22.906 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:22.908 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-01 19:52:22.904 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-01 19:52:22.909 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:22.909 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-01 19:52:22.911 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:22.912 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-01 19:52:22.912 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-01 19:52:23.015 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:52:23.016 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:52:23.017 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:52:23.021 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:23.023 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 166(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:23.071 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:52:23.117 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:23.162 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 490
2020-06-01 19:52:23.164 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:52:23.164 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:24.552 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-01 19:52:24.553 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 173(Long), {"code":20000,"data":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:24.554 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-01 19:52:24.604 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-01 19:52:24.605 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-01 19:52:24.706 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:24.708 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 2
2020-06-01 19:52:24.709 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1805
2020-06-01 19:52:24.710 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}
2020-06-01 19:52:24.764 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -<==      Total: 3
2020-06-01 19:52:24.765 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1860
2020-06-01 19:52:24.766 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}
2020-06-01 19:52:24.767 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:24.769 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 490(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:24.771 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:24.772 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 1805(Long), {"code":20000,"data":[{"createdTime":"2020-05-27 06:56:38","linkId":1,"linkName":"3","linkUrl":"https://www.aliyun.com/","updateTime":"2020-05-31 10:02:41"},{"createdTime":"2020-05-27 07:20:05","linkId":2,"linkName":"组件","linkUrl":"https://www.antdv.com/components/upload-cn/","updateTime":"2020-05-31 10:02:23"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:24.837 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:24.882 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:24.962 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 1(Integer), null, GET(String), 1860(Long), {"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_jSANxGXAAAOurxSY9A094.jpg","id":3,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\r\n[00:01.62]作词：Ming.明\r\n[00:02.33]作曲：Pig小优\r\n[00:03.08]编曲：Pig小优\r\n[00:03.84]后期：Pig小优\r\n[00:04.54]美工：张小喵\r\n[00:09.15]踏红船繁华似人间\r\n[00:12.03]灯火熙攘祈愿\r\n[00:14.00]手中红线姻缘何时现\r\n[00:17.57]薄雾小雨润如烟\r\n[00:19.94]灯中画舫烟中浅\r\n[00:24.93]这尘缘如惊鸿一面\r\n[00:27.85]谁家翩翩少年\r\n[00:29.85]桥边白衣如纤印心间\r\n[00:33.34]这世间情话誓言\r\n[00:35.81]不抵这柔情一眼\r\n[00:40.79]步儿缓红绳缠\r\n[00:42.70]石桥边灯火染\r\n[00:44.72]杯中仙促长谈\r\n[00:46.79]舷外雨声人言难断\r\n[00:49.71]已成烟已消散\r\n[00:51.62]化作春意满\r\n[00:55.75]晚来风寒心却暖\r\n[00:57.57]三两杯酒后情又添\r\n[01:00.08]暮鼓丝弦声声慢\r\n[01:02.36]有佳人舞芊芊\r\n[01:04.32]研磨提笔在画卷眉目间流转\r\n[01:08.49]细雨婵娟\r\n[01:12.25]醉卧画舫听雨眠一场梦无言\r\n[01:15.93]窗外依旧喧怎转眼桥上人不见\r\n[01:20.46]回眸深处看细雨茫茫如烟\r\n[01:24.10]苦了思念\r\n[01:44.22]步儿缓红绳缠\r\n[01:46.18]石桥边灯火染\r\n[01:48.20]杯中仙促长谈\r\n[01:50.21]舷外雨声人言难断\r\n[01:53.18]已成烟已消散\r\n[01:55.15]化作春意满\r\n[01:59.25]晚来风寒心却暖\r\n[02:01.16]三两杯酒后情又添\r\n[02:03.53]暮鼓丝弦声声慢\r\n[02:05.74]有佳人舞芊芊\r\n[02:07.80]研磨提笔在画卷眉目间流转\r\n[02:12.03]细雨婵娟\r\n[02:15.69]醉卧画舫听雨眠一场梦无言\r\n[02:19.42]窗外依旧喧怎转眼桥上人不见\r\n[02:23.95]回眸深处看细雨茫茫如烟\r\n[02:27.58]苦了思念\r\n[02:43.49]青山乌蓬伴流年繁华多阑珊\r\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\r\n[02:51.46]满纸柔情过指尖笔墨笑意染\r\n[02:55.64]长袖翩翩\r\n[02:59.52]醉卧画舫听雨眠一场梦无言\r\n[03:03.10]窗外依旧喧怎转眼桥上人不见\r\n[03:07.48]回眸深处看水中喜字红残\r\n[03:11.31]倒了人间\r\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_kqALftcAInbwpYfM3A951.mp3"},{"artist":"逃跑计划 ","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_v2AYruxAAAQjTIrrnM921.jpg","id":4,"lrc":"[00:00.58]逃跑计划 - 一万次悲伤\r\n[00:00.58]词：毛川\\/李赤\r\n[00:00.58]曲：逃跑计划\r\n[00:00.58]Oh honey\r\n[00:03.12]我脑海里全都是你\r\n[00:08.45]Oh 无法抗拒的心情\r\n[00:13.02]难以呼吸\r\n[00:16.22]Tonight\r\n[00:18.45]是否又要错过一个夜晚\r\n[00:23.34]是否还要掩饰最后的期待\r\n[00:28.22]Oh tonight\r\n[00:30.66]一万次悲伤\r\n[00:32.95]依然会有dream\r\n[00:36.08]我一直在最温暖的地方等你\r\n[00:40.96]似乎只能这样\r\n[00:43.61]停留一个方向\r\n[00:46.83]已不能改变\r\n[00:51.12]每一颗眼泪是一万道光\r\n[00:56.92]最昏暗的地方也变得明亮\r\n[01:02.00]我奔涌的暖流\r\n[01:04.43]寻找你的海洋\r\n[01:07.36]我注定这样\r\n[01:13.71]Oh honey\r\n[01:16.27]你目光里充满忧郁\r\n[01:21.40]就像经历一遍飞行\r\n[01:26.13]难以逃避\r\n[01:29.28]Tonight\r\n[01:31.53]是否还要错过这个夜晚\r\n[01:36.13]是否还要熄灭所有的期待\r\n[01:41.44]Oh tonight\r\n[01:43.71]一万次悲伤\r\n[01:46.04]依然会有dream\r\n[01:48.84]我一直在最后的地方等你\r\n[01:54.09]似乎只能这样\r\n[01:56.58]停留一个方向\r\n[01:59.88]已不能改变\r\n[02:04.20]每一颗眼泪是一万道光\r\n[02:09.69]最昏暗的地方也变得明亮\r\n[02:14.92]我奔涌的暖流\r\n[02:17.56]寻找你的海洋\r\n[02:20.76]我注定这样\r\n[03:07.42]一万次悲伤\r\n[03:09.44]依然会有dream\r\n[03:12.03]我一直在最后的地方等你\r\n[03:17.57]似乎只能这样\r\n[03:20.06]停留一个方向\r\n[03:23.36]已不能改变\r\n[03:27.71]每一颗眼泪是一万道光\r\n[03:33.23]最昏暗的地方也变得明亮\r\n[03:38.41]我奔涌的暖流\r\n[03:41.10]寻找你的海洋\r\n[03:44.15]我注定这样\r\n[03:55.51]Oh honey\r\n[03:58.10]我脑海里全都是你\r\n[04:02.93]Oh 无法抗拒的心情\r\n[04:07.76]难以呼吸","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_yCAXwcSAJ5SAlaB8pA956.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_4GAe9kIAACJ_hvYA4w281.jpg","id":5,"lrc":"[00:01.997]作词 : 薛之谦\r\n[00:03.929]作曲 : 薛之谦\r\n[00:06.012]\r\n[00:17.154]听专情的古人 把美言留给最爱的人\r\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\r\n[00:33.070]你没读懂课本 可世人硬要捧\r\n[00:41.350]看感情里的人 用肉眼分出三六九等\r\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\r\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\r\n[01:11.813]\r\n[01:12.202]所以 当我们都变成木偶人\r\n[01:17.471]你何苦再做一个痴情人表忠贞\r\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\r\n[01:29.805]\r\n[01:30.107]让我们都变成木偶人\r\n[01:33.678]再缝几针爱几次后就不会疼\r\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\r\n[01:46.963]\r\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\r\n[01:58.724]现在相爱的人 能耍的方式五花八门\r\n[02:07.230]要一式要两份 把热吻当罪证\r\n[02:15.298]让动了情的人 还要去分辨好人坏人\r\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\r\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\r\n[02:46.341]\r\n[02:46.606]所以 当我们都变成木偶人\r\n[02:51.507]你何苦再做一个痴情人表忠贞\r\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\r\n[03:03.407]\r\n[03:03.825]让我们都变成木偶人\r\n[03:07.373]再缝几针爱几次后就不会疼\r\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\r\n[03:21.158]\r\n[03:36.779]没有人能变成木偶人\r\n[03:39.795]无非是在感情里的逃避过程\r\n[03:43.999]我们盛气凌人 掩饰无权过问\r\n[03:48.773]遇见谁要拆几针\r\n[03:52.354]\r\n[03:52.631]当我们都羡慕木偶人\r\n[03:55.899]学会他在场面上的玩弄过程\r\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\r\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\r\n[04:23.520]\r\n[04:24.454]制作人 : 陈迪@TalentUnion\r\n[04:25.387]编曲 : 陈迪\r\n[04:26.274]吉他 : 劳国贤\r\n[04:27.357]贝斯 : 崔文正\r\n[04:28.378]鼓 : 王鹏\r\n[04:29.346]弦乐团 : 中国爱乐乐团\r\n[04:30.319]人声监制 : 杨祎\r\n[04:31.323]缩混 : 杨祎@RaySound Studio\r\n[04:32.382]母带 : 鲍锐@录顶技","name":"薛之谦 - 木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7N_5mAAblnALOdTG6b5MA045.mp3"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:25.116 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:25.139 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:27.348 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:52:27.349 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:27.350 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:27.351 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:52:27.351 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38)], params={}, sortColumn=blog_goods, sortMethod=desc)]
2020-06-01 19:52:27.458 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_goods desc limit ?, ? 
2020-06-01 19:52:27.460 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:52:27.512 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:52:27.515 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:52:27.516 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:52:27.566 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:52:27.661 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 313
2020-06-01 19:52:27.662 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:52:27.721 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:27.723 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38)], params={}, sortColumn=blog_goods, sortMethod=desc)](String), 1(Integer), null, POST(String), 313(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:27.819 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:40.423 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:52:40.425 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:40.425 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:40.426 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:52:40.426 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-06-01 19:52:40.700 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_comment desc limit ?, ? 
2020-06-01 19:52:40.702 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:52:40.808 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:52:40.810 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:52:40.811 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:52:40.862 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:52:40.968 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 545
2020-06-01 19:52:40.969 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:52:41.025 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:41.027 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41)], params={}, sortColumn=blog_comment, sortMethod=desc)](String), 1(Integer), null, POST(String), 545(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:41.399 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:55.779 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:52:55.781 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:55.781 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:55.782 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:52:55.783 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02)], params={}, sortColumn=blog_goods, sortMethod=desc)]
2020-06-01 19:52:55.886 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_goods desc limit ?, ? 
2020-06-01 19:52:55.888 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:52:55.946 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:52:55.948 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:52:55.950 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:52:55.999 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:52:56.098 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 319
2020-06-01 19:52:56.098 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:52:56.160 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:56.164 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02)], params={}, sortColumn=blog_goods, sortMethod=desc)](String), 1(Integer), null, POST(String), 319(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:56.266 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:52:59.269 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:52:59.270 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:52:59.271 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:52:59.272 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:52:59.273 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-06-01 19:52:59.491 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_comment desc limit ?, ? 
2020-06-01 19:52:59.497 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:52:59.551 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:52:59.554 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:52:59.555 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:52:59.604 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:52:59.702 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 433
2020-06-01 19:52:59.703 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:52:59.763 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:52:59.766 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41)], params={}, sortColumn=blog_comment, sortMethod=desc)](String), 1(Integer), null, POST(String), 433(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:52:59.868 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:53:01.484 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:53:01.485 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:53:01.486 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:53:01.487 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:53:01.487 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02)], params={}, sortColumn=blog_read, sortMethod=desc)]
2020-06-01 19:53:01.595 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_read desc limit ?, ? 
2020-06-01 19:53:01.597 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:53:01.653 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:53:01.654 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:53:01.656 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:53:01.709 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:53:01.812 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 328
2020-06-01 19:53:01.814 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:53:01.881 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:53:01.883 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02)], params={}, sortColumn=blog_read, sortMethod=desc)](String), 1(Integer), null, POST(String), 328(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:53:01.999 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:53:04.509 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:53:04.510 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:53:04.511 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:53:04.511 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:53:04.512 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52)], params={}, sortColumn=blog_collection, sortMethod=desc)]
2020-06-01 19:53:04.766 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_collection desc limit ?, ? 
2020-06-01 19:53:04.768 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:53:04.875 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:53:04.878 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:53:04.880 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:53:04.930 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:53:05.032 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 523
2020-06-01 19:53:05.033 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:53:05.117 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:53:05.120 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52)], params={}, sortColumn=blog_collection, sortMethod=desc)](String), 1(Integer), null, POST(String), 523(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:53:05.247 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 19:53:09.015 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-01 19:53:09.016 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-01 19:53:09.016 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-01 19:53:09.017 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-01 19:53:09.017 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46)], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-01 19:53:09.272 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-01 19:53:09.274 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-01 19:53:09.382 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-01 19:53:09.384 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-01 19:53:09.386 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-01 19:53:09.437 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-01 19:53:09.534 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 519
2020-06-01 19:53:09.535 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-01 19:53:09.591 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-01 19:53:09.594 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=20, blogRead=22, blogCollection=20, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-06-01 11:51:38), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=2, blogRead=6, blogCollection=14, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-06-01 11:51:43), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=1, blogRead=3, blogCollection=12, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-06-01 11:51:41), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=4, blogCollection=9, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-25 01:14:56, updateTime=2020-06-01 11:52:02), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=10, blogRead=2, blogCollection=7, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-06-01 11:51:55), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=7, blogRead=1, blogCollection=6, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-06-01 11:51:52), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=5, blogRead=9, blogCollection=5, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-06-01 11:51:49), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=3, blogRead=7, blogCollection=4, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-06-01 11:51:46)], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 519(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":9,"blogComment":0,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-01 11:52:02"},{"blogCollection":7,"blogComment":0,"blogGoods":10,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-06-01 11:51:55"},{"blogCollection":6,"blogComment":0,"blogGoods":7,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-01 11:51:52"},{"blogCollection":5,"blogComment":0,"blogGoods":5,"blogId":"1264363719424188416","blogRead":9,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-06-01 11:51:49"},{"blogCollection":4,"blogComment":0,"blogGoods":3,"blogId":"1264358511910559744","blogRead":7,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-01 11:51:46"},{"blogCollection":14,"blogComment":0,"blogGoods":2,"blogId":"1264358089300877312","blogRead":6,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-06-01 11:51:43"},{"blogCollection":12,"blogComment":0,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-06-01 11:51:41"},{"blogCollection":20,"blogComment":0,"blogGoods":20,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":22,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-06-01 11:51:38"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-01 19:53:09.728 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-01 20:26:43.245 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 20540 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 20:26:43.255 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 20:26:43.256 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 20:26:45.111 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 20:26:45.170 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 52ms. Found 0 MongoDB repository interfaces.
2020-06-01 20:26:45.848 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$d2a93423] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:45.928 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:45.951 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$b8fc729f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:45.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$9fd416e1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:45.972 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 20:26:46.100 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:46.137 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:46.189 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:50.986 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 20:26:50.987 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.095 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.434 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.444 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.458 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.463 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.466 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.468 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.516 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.549 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:26:51.969 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 20:26:51.981 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 20:26:51.982 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 20:26:51.983 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 20:26:52.189 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 20:26:52.189 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 8818 ms
2020-06-01 20:26:54.065 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 20:26:55.113 INFO  [cluster-ClusterId{value='5ed4f40e942b902b55d45862', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 20:26:55.710 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 20:26:55.752 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 20:26:55.772 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 13.817 seconds (JVM running for 16.758)
2020-06-01 20:32:43.130 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 2876 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-06-01 20:32:43.140 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-06-01 20:32:43.142 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-01 20:32:45.604 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-01 20:32:45.676 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 65ms. Found 0 MongoDB repository interfaces.
2020-06-01 20:32:46.504 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$4b5261f9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:46.619 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:46.644 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$31a5a075] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:46.654 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$187d44b7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:46.664 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-01 20:32:46.810 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:46.842 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:46.899 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:52.579 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-01 20:32:52.582 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:52.688 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.070 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.087 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.102 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.108 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.112 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.117 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.171 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.219 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-01 20:32:53.703 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-06-01 20:32:53.715 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-01 20:32:53.719 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-01 20:32:53.719 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-06-01 20:32:53.910 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-01 20:32:53.911 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 10645 ms
2020-06-01 20:32:55.792 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-06-01 20:32:56.862 INFO  [cluster-ClusterId{value='5ed4f5779a50af4e49781baa', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-06-01 20:32:57.212 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-01 20:32:57.247 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-01 20:32:57.260 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 15.675 seconds (JVM running for 18.712)
