2020-06-29 19:49:54.094 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-06-29 20:03:19.752 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-06-29 20:57:26.888 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-06-29 21:00:04.552 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-06-29 21:00:30.695 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-06-29 21:00:44.684 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-06-29 21:01:17.248 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-29 21:01:17.255 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-29 21:01:17.265 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 21:01:17.375 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-29 21:01:17.376 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 21:01:17.379 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-29 21:01:17.709 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 21:01:17.740 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-29 21:01:17.746 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 21:01:17.750 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:01:17.795 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:01:17.797 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:01:17.799 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:01:17.799 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 835(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:01:17.800 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:01:17.829 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:01:17.831 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 860(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:01:17.856 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:01:17.926 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:01:17.928 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), null, 127.0.0.1(String)
2020-06-29 21:01:17.970 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:01:17.991 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:01:18.007 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:01:18.239 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:01:18.242 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 580(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:01:18.369 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:01:24.561 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-06-29 21:01:24.563 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-06-29 21:01:24.640 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-06-29 21:01:24.688 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:01:24.689 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 138(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-06-29 21:01:24.775 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:01:25.692 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-06-29 21:01:25.693 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-06-29 21:01:25.732 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-06-29 21:01:25.770 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:01:25.771 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 88(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-06-29 21:01:25.859 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:01:26.175 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-06-29 21:01:26.177 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-06-29 21:01:26.207 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 0
2020-06-29 21:01:26.242 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:01:26.243 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 75(Long), {"code":40002,"msg":"用户名或密码错误!"}(String), 127.0.0.1(String)
2020-06-29 21:01:26.337 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:23.537 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-06-29 21:03:23.538 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-06-29 21:03:23.592 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-06-29 21:03:23.640 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:23.642 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 101(Long), {"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"F2875BF858E41383BFC591D3AA9AB17A"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:23.730 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:24.103 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 21:03:24.105 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:24.178 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:24.180 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:24.181 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:24.237 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:24.377 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:24.381 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 271(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:24.427 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-29 21:03:24.428 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-29 21:03:24.430 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-29 21:03:24.431 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-29 21:03:24.432 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-29 21:03:24.433 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-29 21:03:24.434 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 21:03:24.435 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 21:03:24.468 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:24.471 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-29 21:03:24.472 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 21:03:24.477 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-29 21:03:24.502 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:24.504 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:24.508 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:24.510 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 105(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:24.513 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:24.515 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 106(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:24.518 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:24.520 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 110(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:24.590 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:24.664 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:24.664 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:24.712 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:28.559 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_goods desc limit ?, ? 
2020-06-29 21:03:28.561 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:28.605 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:28.607 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:28.611 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:28.650 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:28.799 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:28.802 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13)], params={}, sortColumn=blog_goods, sortMethod=desc)](String), 1(Integer), null, POST(String), 273(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:28.894 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:29.468 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_comment desc limit ?, ? 
2020-06-29 21:03:29.470 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:29.511 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:29.514 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:29.515 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:29.567 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:29.692 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:29.695 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51)], params={}, sortColumn=blog_comment, sortMethod=desc)](String), 1(Integer), null, POST(String), 265(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:29.787 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:30.716 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_read desc limit ?, ? 
2020-06-29 21:03:30.718 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:30.757 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:30.760 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:30.761 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:30.813 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:30.934 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:30.939 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51)], params={}, sortColumn=blog_read, sortMethod=desc)](String), 1(Integer), null, POST(String), 254(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:31.049 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:31.947 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_collection desc limit ?, ? 
2020-06-29 21:03:31.949 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:32.001 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:32.003 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:32.004 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:32.058 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:32.182 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:32.183 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=blog_collection, sortMethod=desc)](String), 1(Integer), null, POST(String), 279(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:32.282 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:32.930 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_read desc limit ?, ? 
2020-06-29 21:03:32.932 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:32.981 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:32.982 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:32.983 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:33.029 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:33.168 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:33.169 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51)], params={}, sortColumn=blog_read, sortMethod=desc)](String), 1(Integer), null, POST(String), 277(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:33.287 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:33.670 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_comment desc limit ?, ? 
2020-06-29 21:03:33.672 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:33.725 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:33.727 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:33.728 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:33.766 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:33.892 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:33.895 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51)], params={}, sortColumn=blog_comment, sortMethod=desc)](String), 1(Integer), null, POST(String), 270(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:33.989 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:34.380 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by blog_goods desc limit ?, ? 
2020-06-29 21:03:34.380 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:34.426 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:34.429 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:34.430 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:34.471 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:34.583 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:34.585 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=blog_goods, sortMethod=desc)](String), 1(Integer), null, POST(String), 243(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:34.708 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:03:34.980 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 21:03:34.981 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:03:35.021 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:03:35.023 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:03:35.025 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:03:35.074 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:03:35.205 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:03:35.206 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-06-14 08:08:51)], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 252(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:03:35.310 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:04:06.830 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.updateInfo.debug:159 -==>  Preparing: update bl_user SET username = ?, sex = ?, nickname = ?, user_email = ? where user_id = ? 
2020-06-29 21:04:06.834 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.updateInfo.debug:159 -==> Parameters: test(String), 1(Integer), 张三(String), 12345678@qq.com(String), 3(Integer)
2020-06-29 21:04:06.925 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.updateInfo.debug:159 -<==    Updates: 1
2020-06-29 21:04:06.981 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:04:06.982 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/updateInfo(String), [User(userId=3, username=test, password=, name=null, sex=1, header=null, nickname=张三, userEmail=12345678@qq.com, createdTime=null, updateTime=null, version=null, deleted=0)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), PUT(String), 157(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-06-29 21:04:07.070 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:04:11.742 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-29 21:04:11.743 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-29 21:04:11.748 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-29 21:04:11.749 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-29 21:04:11.782 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-29 21:04:11.784 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-29 21:04:11.823 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:04:11.824 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 89(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:04:11.828 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:04:11.829 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 90(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:04:11.926 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:04:11.981 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:04:12.035 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-29 21:04:12.036 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-29 21:04:12.047 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 21:04:12.048 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 21:04:12.107 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 21:04:12.146 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:04:12.148 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:04:12.165 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:04:12.166 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 110(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:04:12.391 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:04:12.396 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:04:12.397 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 0(Integer), org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:116)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$38672e51.commentAndCollectionCount(<generated>)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
(String), GET(String), 0(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:04:12.393 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:04:12.495 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:04:41.787 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:04:41.790 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 0(Integer), org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:116)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$38672e51.commentAndCollectionCount(<generated>)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:04:41.929 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:05:31.237 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-06-29 21:05:31.239 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-06-29 21:05:31.280 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-06-29 21:05:31.345 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:05:31.347 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 117(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:05:31.446 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:05:31.568 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 21:05:31.570 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:05:31.608 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:05:31.609 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:05:31.610 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:05:31.669 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:05:31.777 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:05:31.778 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 271(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-14 08:08:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:05:31.872 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:05:33.937 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-29 21:05:33.940 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 21:05:33.978 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-29 21:05:33.981 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-29 21:05:33.984 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 0(Integer), 2(Integer), 0(Integer), 1(Integer), 0(Integer), 1264726600279891968(String), 2(Integer)
2020-06-29 21:05:34.059 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-29 21:05:34.071 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-06-29 21:05:34.073 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 1(Integer)
2020-06-29 21:05:34.113 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-06-29 21:05:34.259 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:05:34.260 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264726600279891968(String), [1264726600279891968](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 388(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":0,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:05:34.368 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:05:40.058 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==>  Preparing: update bl_blog set blog_goods=blog_goods+1 where blog_id= ? 
2020-06-29 21:05:40.059 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 21:05:40.254 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -<==    Updates: 1
2020-06-29 21:05:41.794 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==>  Preparing: update bl_blog set blog_goods=blog_goods+1 where blog_id= ? 
2020-06-29 21:05:41.795 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 21:05:41.905 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -<==    Updates: 1
2020-06-29 21:05:44.604 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==>  Preparing: update bl_blog set blog_goods=blog_goods+1 where blog_id= ? 
2020-06-29 21:05:44.605 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 21:05:44.718 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -<==    Updates: 1
2020-06-29 21:05:44.797 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==>  Preparing: update bl_blog set blog_goods=blog_goods+1 where blog_id= ? 
2020-06-29 21:05:44.798 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 21:05:44.928 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -<==    Updates: 1
2020-06-29 21:06:03.894 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:06:03.898 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getGood/1264726600279891968(String), [1264726600279891968](String), 0(Integer), org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
	at com.jg.blog.service.impl.BlogServiceImpl.getGoodsCount(BlogServiceImpl.java:137)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$817fe25d.getGoodsCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$369783f.getGoodsCount(<generated>)
	at com.jg.blog.controller.BlogController.getGood(BlogController.java:149)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$b0333df6.getGood(<generated>)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
(String), GET(String), 0(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:06:03.911 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:06:03.912 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollection/1264726600279891968(String), [1264726600279891968](String), 0(Integer), org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionCount(BlogServiceImpl.java:163)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$817fe25d.getCollectionCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$369783f.getCollectionCount(<generated>)
	at com.jg.blog.controller.BlogController.getCollection(BlogController.java:172)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$b0333df6.getCollection(<generated>)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
(String), GET(String), 0(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264726600279891968","blogRead":1,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:06:03.998 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:06:04.021 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:06:04.028 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:06:04.037 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 0(Integer), org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
	at com.jg.blog.service.impl.CommentServiceImpl.getByBlog(CommentServiceImpl.java:70)
	at com.jg.blog.controller.CommentController.getByBlog(CommentController.java:45)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$5af9411.getByBlog(<generated>)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
(String), GET(String), 0(Long), {"code":20000,"msg":"更新成功"}(String), 127.0.0.1(String)
2020-06-29 21:06:04.122 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:06:10.463 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:06:10.464 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$3ace0123.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 30463(Long), {"code":20000,"msg":"点赞成功"}(String), 127.0.0.1(String)
2020-06-29 21:06:10.583 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:06:11.963 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:06:11.965 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 1(Integer), null, POST(String), 30170(Long), {"code":20000,"msg":"点赞成功"}(String), 127.0.0.1(String)
2020-06-29 21:06:12.095 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:06:14.770 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:06:14.770 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 1(Integer), org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:116)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$38672e51.commentAndCollectionCount(<generated>)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
(String), POST(String), 30167(Long), {"code":20000,"msg":"点赞成功"}(String), 127.0.0.1(String)
2020-06-29 21:06:14.876 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:06:14.983 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:06:14.985 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 1(Integer), org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:116)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$38672e51.commentAndCollectionCount(<generated>)
Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=172.17.175.2:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
(String), POST(String), 30181(Long), {"code":20000,"msg":"点赞成功"}(String), 127.0.0.1(String)
2020-06-29 21:06:15.071 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:58:19.289 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.3.RELEASE, Spring v5.2.3.RELEASE
2020-06-29 21:59:21.723 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-06-29 21:59:21.803 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-06-29 21:59:21.936 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-06-29 21:59:22.192 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:22.199 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)](String), 1(Integer), null, POST(String), 389(Long), {"code":20000,"data":{"token":"809B35E207493581CFD1912AD438A133"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:59:22.351 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:59:22.588 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:22.590 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:59:22.703 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:59:23.191 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-06-29 21:59:23.192 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-06-29 21:59:23.236 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-06-29 21:59:23.293 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:23.295 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 110(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:59:23.405 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:59:26.110 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-06-29 21:59:26.111 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 21:59:26.151 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 6
2020-06-29 21:59:26.196 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:26.198 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 99(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:59:26.333 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:59:29.659 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-06-29 21:59:29.665 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:59:29.727 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 21:59:29.730 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 21:59:29.734 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:59:29.774 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:59:29.936 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:29.938 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 401(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:59:30.050 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:59:36.889 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==>  Preparing: select about_id, about_title, about_read, created_time, update_time, enable from bl_about where deleted=0 limit ?, ? 
2020-06-29 21:59:36.890 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 21:59:36.933 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -<==      Total: 3
2020-06-29 21:59:36.935 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_about where deleted = 0 
2020-06-29 21:59:36.936 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 21:59:36.972 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 21:59:37.110 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:37.111 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 293(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":0,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-05-25 01:35:29"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:59:37.214 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:59:41.061 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-29 21:59:41.063 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-29 21:59:41.114 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-29 21:59:41.167 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:41.169 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 99(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 21:59:41.253 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 21:59:51.568 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 21:59:51.570 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /upload/uploadImage(String), [org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3561ad26](String), 1(Integer), null, POST(String), 1586(Long), {"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl7589mABGXDAAf2zQ1Ix3Y218.gif","msg":"上传成功"}(String), 127.0.0.1(String)
2020-06-29 21:59:51.669 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:00.363 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByPage.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, created_time, update_time from bl_user where deleted = 0 limit ?, ? 
2020-06-29 22:01:00.367 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:01:00.440 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getByPage.debug:159 -<==      Total: 2
2020-06-29 22:01:00.497 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_user where deleted = 0 
2020-06-29 22:01:00.498 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:01:00.545 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.UserMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:01:00.608 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:00.610 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 286(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:00.707 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:05.619 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:05.622 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 688(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:05.760 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:09.077 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -==>  Preparing: select log_id, log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip, created_time from bl_log limit ?, ? 
2020-06-29 22:01:09.078 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:01:09.220 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.getByPage.debug:159 -<==      Total: 10
2020-06-29 22:01:09.221 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_log 
2020-06-29 22:01:09.222 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:01:09.289 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:01:09.416 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:09.419 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /log/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 376(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":805,"totalPage":81},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:09.511 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:13.517 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getByPage.debug:159 -==>  Preparing: select id, name, artist, url, cover, created_time, enabled from bl_music where deleted = 0 limit ?, ? 
2020-06-29 22:01:13.518 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.MusicMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:01:13.754 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:13.757 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
### The error may involve com.jg.blog.mapper.MusicMapper.getByPage-Inline
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
	at com.jg.blog.service.impl.MusicServiceImpl.getByPage(MusicServiceImpl.java:58)
	at com.jg.blog.controller.MusicController.getByPage(MusicController.java:106)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getByPage(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'field list'
(String), POST(String), 0(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:13.843 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:21.735 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 22:01:21.736 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 22:01:21.773 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 22:01:21.824 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:21.826 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 96(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:21.921 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:44.332 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 22:01:44.334 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:01:44.400 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-29 22:01:44.401 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-29 22:01:44.408 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-29 22:01:44.409 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-29 22:01:44.446 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-29 22:01:44.448 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-29 22:01:44.492 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:44.493 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 103(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:44.497 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:44.498 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, POST(String), 97(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:44.520 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 22:01:44.523 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 22:01:44.524 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:01:44.568 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:01:44.579 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:44.598 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-29 22:01:44.599 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-29 22:01:44.601 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:44.609 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 22:01:44.610 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 22:01:44.648 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 22:01:44.684 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:44.686 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:44.697 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:44.698 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), null, GET(String), 88(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:44.706 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:44.708 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 416(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:44.782 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:44.804 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:44.824 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:47.182 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:47.184 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:115)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$ef6f305f.commentAndCollectionCount(<generated>)
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:47.268 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:48.859 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:48.861 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.CommentServiceImpl.getByPage(CommentServiceImpl.java:119)
	at com.jg.blog.controller.CommentController.getList(CommentController.java:91)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.getList(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:48.965 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:49.910 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:49.914 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollectionList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionByPage(BlogServiceImpl.java:169)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionByPage(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionByPage(<generated>)
	at com.jg.blog.controller.BlogController.getCollectionList(BlogController.java:182)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollectionList(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":805,"totalPage":81},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:50.020 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:50.617 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:50.618 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:115)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$ef6f305f.commentAndCollectionCount(<generated>)
(String), GET(String), 0(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:50.726 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:53.744 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-06-29 22:01:53.745 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-06-29 22:01:53.784 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-06-29 22:01:53.827 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:53.828 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 89(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:53.910 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:01:55.351 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 22:01:55.352 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:01:55.402 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 22:01:55.405 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 22:01:55.406 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:01:55.440 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:01:55.567 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:01:55.568 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 291(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:01:55.661 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:03:12.542 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-29 22:03:12.544 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-29 22:03:12.546 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-29 22:03:12.547 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-29 22:03:12.587 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-29 22:03:12.589 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-29 22:03:12.590 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 22:03:12.591 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:03:12.636 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 22:03:12.636 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:03:12.637 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 22:03:12.638 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), null, GET(String), 97(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:03:12.638 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:03:12.647 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:03:12.649 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 116(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:03:12.679 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:03:12.731 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 22:03:12.732 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 22:03:12.734 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:03:12.736 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-29 22:03:12.737 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-29 22:03:12.754 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:03:12.766 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 22:03:12.810 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:03:12.812 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), null, POST(String), 281(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:03:12.821 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:03:12.822 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:115)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$ef6f305f.commentAndCollectionCount(<generated>)
(String), GET(String), 97(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:03:12.853 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:03:12.855 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:03:12.898 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:03:12.918 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:03:12.959 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:03:36.983 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:03:36.986 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:115)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$ef6f305f.commentAndCollectionCount(<generated>)
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:03:37.158 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:01.835 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 22:04:01.836 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:04:01.887 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 22:04:01.889 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 22:04:01.890 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:04:01.940 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:04:02.066 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:02.068 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionByPage(BlogServiceImpl.java:169)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionByPage(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionByPage(<generated>)
	at com.jg.blog.controller.BlogController.getCollectionList(BlogController.java:182)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollectionList(<generated>)
(String), POST(String), 271(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:02.167 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:04.798 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-29 22:04:04.799 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 22:04:04.837 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:04:04.846 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-29 22:04:04.848 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 4(Integer), 3(Integer), 0(Integer), 1(Integer), 0(Integer), 1264726600279891968(String), 3(Integer)
2020-06-29 22:04:04.944 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-29 22:04:04.964 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-06-29 22:04:04.965 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 1(Integer)
2020-06-29 22:04:05.001 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:04:05.191 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:05.194 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264726600279891968(String), [1264726600279891968](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:115)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$ef6f305f.commentAndCollectionCount(<generated>)
(String), GET(String), 443(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":3,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:05.216 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:05.218 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollection/1264726600279891968(String), [1264726600279891968](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionCount(BlogServiceImpl.java:162)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionCount(<generated>)
	at com.jg.blog.controller.BlogController.getCollection(BlogController.java:172)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollection(<generated>)
(String), GET(String), 0(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:05.228 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:05.229 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getGood/1264726600279891968(String), [1264726600279891968](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getGoodsCount(BlogServiceImpl.java:136)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getGoodsCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getGoodsCount(<generated>)
	at com.jg.blog.controller.BlogController.getGood(BlogController.java:149)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getGood(<generated>)
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:05.290 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:05.313 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:05.346 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:05.403 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:05.404 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 1(Integer), null, GET(String), 192(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:05.504 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:08.872 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:08.874 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:08.984 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:16.467 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:16.469 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=5555555555555555555, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:16.556 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:46.575 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:46.577 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:46.721 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:04:57.925 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:04:57.927 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:04:57.999 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:05:34.335 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:05:34.336 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:05:34.418 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:07:44.931 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==>  Preparing: select about_id, about_title, about_read, created_time, update_time, enable from bl_about where deleted=0 limit ?, ? 
2020-06-29 22:07:44.933 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:07:44.964 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AboutMapper.getByPage.debug:159 -<==      Total: 3
2020-06-29 22:07:44.965 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_about where deleted = 0 
2020-06-29 22:07:44.967 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:07:45.002 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AboutMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:07:45.117 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:07:45.118 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionByPage(BlogServiceImpl.java:169)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionByPage(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionByPage(<generated>)
	at com.jg.blog.controller.BlogController.getCollectionList(BlogController.java:182)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollectionList(<generated>)
(String), POST(String), 461(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":0,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-05-25 01:35:29"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:07:45.217 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:07:57.595 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-29 22:07:57.596 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-29 22:07:57.598 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-29 22:07:57.600 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-29 22:07:57.609 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 22:07:57.610 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:07:57.640 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-29 22:07:57.640 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-29 22:07:57.679 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 22:07:57.680 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 22:07:57.681 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:07:57.684 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:07:57.686 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionCount(BlogServiceImpl.java:162)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionCount(<generated>)
	at com.jg.blog.controller.BlogController.getCollection(BlogController.java:172)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollection(<generated>)
(String), GET(String), 95(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:07:57.687 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:07:57.688 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getGoodsCount(BlogServiceImpl.java:136)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getGoodsCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getGoodsCount(<generated>)
	at com.jg.blog.controller.BlogController.getGood(BlogController.java:149)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getGood(<generated>)
(String), POST(String), 92(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogRead":3,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:07:57.713 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:07:57.778 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:07:57.789 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-29 22:07:57.790 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-29 22:07:57.791 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:07:57.813 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 22:07:57.814 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 22:07:57.819 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:07:57.821 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.UserServiceImpl.getCommentAndCollectionCount(UserServiceImpl.java:115)
	at com.jg.blog.controller.UserController.commentAndCollectionCount(UserController.java:159)
	at com.jg.blog.controller.UserController$$FastClassBySpringCGLIB$$67991cd1.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.UserController$$EnhancerBySpringCGLIB$$ef6f305f.commentAndCollectionCount(<generated>)
(String), POST(String), 242(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":3,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:04:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:07:57.868 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 22:07:57.873 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:07:57.874 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:07:57.918 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:07:57.928 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:07:57.930 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), GET(String), 113(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:07:57.982 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:07:58.035 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:00.817 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:00.819 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getGood/1264726600279891968(String), [1264726600279891968](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getGoodsCount(BlogServiceImpl.java:136)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getGoodsCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getGoodsCount(<generated>)
	at com.jg.blog.controller.BlogController.getGood(BlogController.java:149)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getGood(<generated>)
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":2,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 13:05:46"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:00.820 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:00.821 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollection/1264726600279891968(String), [1264726600279891968](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionCount(BlogServiceImpl.java:162)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionCount(<generated>)
	at com.jg.blog.controller.BlogController.getCollection(BlogController.java:172)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollection(<generated>)
(String), GET(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:00.834 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-29 22:08:00.835 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 22:08:00.870 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:08:00.871 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-29 22:08:00.872 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 4(Integer), 4(Integer), 0(Integer), 1(Integer), 0(Integer), 1264726600279891968(String), 4(Integer)
2020-06-29 22:08:00.900 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:00.911 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:00.912 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), GET(String), 99(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:00.924 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:00.957 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-29 22:08:00.958 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-06-29 22:08:00.959 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 1(Integer)
2020-06-29 22:08:01.000 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:08:01.019 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:01.173 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:01.175 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264726600279891968(String), [1264726600279891968](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), GET(String), 373(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:01.257 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:06.660 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:06.661 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=111111111111111111111, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":0,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-05-25 01:35:29"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:06.815 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:21.509 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:21.510 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=111111111111111111111, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogRead":3,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:21.652 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:27.989 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:27.990 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=111111111111111111111, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:28.084 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:08:39.325 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:08:39.326 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=111111111111111111111, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 0(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 0(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":3,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:04:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:08:39.491 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:13:49.972 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==>  Preparing: select user_id, username, password, sex, header, nickname, user_email, deleted from bl_user where username = ? 
2020-06-29 22:13:49.974 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -==> Parameters: test(String)
2020-06-29 22:13:50.008 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.UserMapper.getByUsername.debug:159 -<==      Total: 1
2020-06-29 22:13:50.072 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:13:50.074 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/login(String), [User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), POST(String), 98(Long), {"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"809B35E207493581CFD1912AD438A133"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:13:50.157 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:13:51.247 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 22:13:51.249 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:13:51.288 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 22:13:51.290 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 22:13:51.291 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:13:51.344 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:13:51.456 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:13:51.458 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), POST(String), 243(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:08:02"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:13:51.498 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc LIMIT 5 
2020-06-29 22:13:51.500 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -==> Parameters: 
2020-06-29 22:13:51.505 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==>  Preparing: select id, name, artist, url, cover, lrc from bl_music where deleted = 0 and enabled = 1 
2020-06-29 22:13:51.505 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.MusicMapper.getList.debug:159 -==> Parameters: 
2020-06-29 22:13:51.507 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==>  Preparing: select id, name, header, signature, comment, username from bl_admin limit 1 
2020-06-29 22:13:51.508 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -==> Parameters: 
2020-06-29 22:13:51.510 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==>  Preparing: select link_id, link_name, link_url, created_time, update_time from bl_link where deleted = 0 
2020-06-29 22:13:51.510 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -==> Parameters: 
2020-06-29 22:13:51.548 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AdminMapper.getAdmin.debug:159 -<==      Total: 1
2020-06-29 22:13:51.553 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.recomRead.debug:159 -<==      Total: 5
2020-06-29 22:13:51.554 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LinkMapper.getAll.debug:159 -<==      Total: 0
2020-06-29 22:13:51.562 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:13:51.615 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:13:51.617 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/getAdmin(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionCount(BlogServiceImpl.java:162)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionCount(<generated>)
	at com.jg.blog.controller.BlogController.getCollection(BlogController.java:172)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollection(<generated>)
(String), GET(String), 92(Long), {"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:13:51.623 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:13:51.624 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /link/list(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), GET(String), 92(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:13:51.626 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:13:51.628 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getGoodsCount(BlogServiceImpl.java:136)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getGoodsCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getGoodsCount(<generated>)
	at com.jg.blog.controller.BlogController.getGood(BlogController.java:149)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getGood(<generated>)
(String), POST(String), 104(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:13:51.629 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:13:51.631 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /music/getList(String), [](String), 0(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 0(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:13:51.704 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:13:51.719 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:13:51.721 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:13:51.722 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:13:58.523 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:13:58.525 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /user/commentAndCollectionCount(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), GET(String), 182(Long), {"code":20000,"data":{"collectionCount":0,"commentCount":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:13:58.622 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:00.034 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:00.036 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollectionList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 107(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:00.121 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:01.249 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:01.251 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getList(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 48(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:01.348 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:03.441 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by created_time desc limit ?, ? 
2020-06-29 22:14:03.442 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-06-29 22:14:03.502 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-06-29 22:14:03.504 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-06-29 22:14:03.505 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-06-29 22:14:03.540 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-06-29 22:14:03.656 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:03.658 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 256(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":4,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-29 14:08:02"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:03.781 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:05.237 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-29 22:14:05.239 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 22:14:05.286 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:14:05.290 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-29 22:14:05.292 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 4(Integer), 5(Integer), 0(Integer), 1(Integer), 0(Integer), 1264726600279891968(String), 5(Integer)
2020-06-29 22:14:05.396 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-29 22:14:05.397 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-06-29 22:14:05.398 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 1(Integer)
2020-06-29 22:14:05.441 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:14:05.570 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:05.572 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getGood/1264726600279891968(String), [1264726600279891968](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionCount(BlogServiceImpl.java:162)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionCount(<generated>)
	at com.jg.blog.controller.BlogController.getCollection(BlogController.java:172)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollection(<generated>)
(String), GET(String), 38(Long), {"code":20000,"data":0,"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:05.628 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:05.629 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/read/1264726600279891968(String), [1264726600279891968](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 418(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:05.670 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:05.715 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:05.717 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getCollection/1264726600279891968(String), [1264726600279891968](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), GET(String), 177(Long), {"code":20000,"data":0,"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:05.718 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:05.768 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:05.769 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.goodByBlogAndUser(BlogServiceImpl.java:121)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.goodByBlogAndUser(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.goodByBlogAndUser(<generated>)
	at com.jg.blog.controller.BlogController.good(BlogController.java:138)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.good(<generated>)
(String), GET(String), 238(Long), {"code":20000,"data":[],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:05.801 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:05.877 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:10.304 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-06-29 22:14:10.305 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getById.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 22:14:10.341 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:14:10.384 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-06-29 22:14:10.385 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.update.debug:159 -==> Parameters: 新生代与老年代(String), http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg(String), <p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>
<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>
<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>
<p>堆的内存模型大致为：</p>
<p><img src="https://img-blog.csdnimg.cn/20191117211513826.png" /></p>
<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>
<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>
<p>&nbsp;</p>
<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>
<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>
<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>
<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>
<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>
<p>&nbsp;</p>
<p>新生代：存放刚出生不久的对象</p>
<p>老年代：存放比较活跃、经常被引用的对象</p>
<p>垃圾回收机制在新生代比较频繁</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>(String), 4(Integer), 5(Integer), 0(Integer), 1(Integer), 1(Integer), 1264726600279891968(String), 6(Integer)
2020-06-29 22:14:10.512 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.update.debug:159 -<==    Updates: 1
2020-06-29 22:14:10.551 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.getById.debug:159 -==>  Preparing: select user_id, username, name, sex, header, nickname, user_email, version from bl_user where user_id = ? and deleted = 0 
2020-06-29 22:14:10.552 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.getById.debug:159 -==> Parameters: 3(Integer)
2020-06-29 22:14:10.601 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.UserMapper.getById.debug:159 -<==      Total: 1
2020-06-29 22:14:11.069 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:11.070 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/save(String), [Comment(id=null, commentContent=33333333333, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getGoodsCount(BlogServiceImpl.java:136)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getGoodsCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getGoodsCount(<generated>)
	at com.jg.blog.controller.BlogController.getGood(BlogController.java:149)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getGood(<generated>)
(String), POST(String), 770(Long), {"code":20000,"msg":"评论成功"}(String), 127.0.0.1(String)
2020-06-29 22:14:11.151 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:11.405 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:11.407 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /comment/getByBlog/1264726600279891968(String), [1264726600279891968](String), 1(Integer), org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
	at com.jg.blog.service.impl.MusicServiceImpl.getList(MusicServiceImpl.java:67)
	at com.jg.blog.controller.MusicController.getList(MusicController.java:115)
	at com.jg.blog.controller.MusicController$$FastClassBySpringCGLIB$$7a5ff1d7.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.MusicController$$EnhancerBySpringCGLIB$$f1d60331.getList(<generated>)
Caused by: java.sql.SQLSyntaxErrorException: Unknown column 'enabled' in 'where clause'
(String), GET(String), 139(Long), {"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:11.514 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:12.783 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==>  Preparing: update bl_blog set blog_goods=blog_goods+1 where blog_id= ? 
2020-06-29 22:14:12.784 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -==> Parameters: 1264726600279891968(String)
2020-06-29 22:14:12.934 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.updateGoods.debug:159 -<==    Updates: 1
2020-06-29 22:14:13.099 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:13.100 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/good(String), [BlogGoods(id=null, userId=null, blogId=1264726600279891968)](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), POST(String), 306(Long), {"code":20000,"msg":"点赞成功"}(String), 127.0.0.1(String)
2020-06-29 22:14:13.181 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:13.286 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:13.287 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getGood/1264726600279891968(String), [1264726600279891968](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), GET(String), 36(Long), {"code":20000,"data":1,"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:13.388 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:21.109 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-06-29 22:14:21.110 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-06-29 22:14:21.151 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 6
2020-06-29 22:14:21.195 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:21.196 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), GET(String), 92(Long), {"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:21.281 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:22.385 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==>  Preparing: select blog_id, blog_title, created_time, date_format(created_time, '%Y-%m') as blog_month from bl_blog order by created_time desc 
2020-06-29 22:14:22.386 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -==> Parameters: 
2020-06-29 22:14:22.443 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getTimeLine.debug:159 -<==      Total: 9
2020-06-29 22:14:22.495 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:22.497 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getTimeLine(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.controller.CommentController.save(CommentController.java:30)
	at com.jg.blog.controller.CommentController$$FastClassBySpringCGLIB$$f47cbc11.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.CommentController$$EnhancerBySpringCGLIB$$bcb7961f.save(<generated>)
(String), GET(String), 105(Long), {"code":20000,"data":[{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:22.640 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-06-29 22:14:23.955 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==>  Preparing: select about_id, about_title, about_content, about_read, created_time, update_time, version from bl_about where enable=1 and deleted=0 limit 1 
2020-06-29 22:14:23.957 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -==> Parameters: 
2020-06-29 22:14:24.002 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.getAbout.debug:159 -<==      Total: 1
2020-06-29 22:14:24.007 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==>  Preparing: update bl_about set version=version+1 ,about_title = ? ,about_content = ? , about_read= ? where about_id = ? and version = ? 
2020-06-29 22:14:24.009 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -==> Parameters: 关于稽哥(String), <p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>(String), 1(Integer), 4(Integer), 3(Integer)
2020-06-29 22:14:24.322 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.AboutMapper.updateById.debug:159 -<==    Updates: 1
2020-06-29 22:14:24.481 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-06-29 22:14:24.483 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /about/read(String), [](String), 1(Integer), java.lang.ClassCastException: com.jg.blog.pojo.Admin cannot be cast to com.jg.blog.pojo.User
	at com.jg.blog.service.impl.BlogServiceImpl.getCollectionCount(BlogServiceImpl.java:162)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$64efc7ff.getCollectionCount(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$ad9b5dc6.invoke(<generated>)
	at com.jg.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e6d95de1.getCollectionCount(<generated>)
	at com.jg.blog.controller.BlogController.getCollection(BlogController.java:172)
	at com.jg.blog.controller.BlogController$$FastClassBySpringCGLIB$$5aabfe8.invoke(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAround(RequestAspect.java:66)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$673b4004.getCollection(<generated>)
(String), GET(String), 591(Long), {"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":1,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-05-25 01:35:29","version":3},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-06-29 22:14:24.563 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
