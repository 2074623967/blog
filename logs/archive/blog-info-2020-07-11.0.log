2020-07-11 08:17:17.954 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 15344 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 08:17:18.134 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 08:17:37.546 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 08:17:39.204 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 1628ms. Found 4 MongoDB repository interfaces.
2020-07-11 08:17:43.078 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:17:43.976 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$5067a687] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:17:44.306 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:17:44.336 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$36bae503] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:17:44.346 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$1d928945] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:17:44.355 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 08:17:44.780 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:17:44.818 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:17:45.010 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:01.101 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 08:18:01.101 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:01.356 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:06.987 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.118 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.154 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.167 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.180 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.194 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.194 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.341 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7e74a380' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.349 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7e74a380' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.500 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#117525fe' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.558 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#28da7d11' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.577 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#28da7d11' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.690 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.690 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.703 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:07.703 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:09.236 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 08:18:09.236 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 08:18:10.195 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:10.423 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:10.452 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:10.758 INFO  [cluster-ClusterId{value='5f090541bf26b1673fe1ba1a', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:465}] to 39.97.183.122:27017
2020-07-11 08:18:10.819 INFO  [cluster-ClusterId{value='5f090541bf26b1673fe1ba1a', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=48318335}
2020-07-11 08:18:10.907 INFO  [cluster-ClusterId{value='5f090541bf26b1673fe1ba1a', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 08:18:12.655 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:13.179 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:14.187 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:16.624 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.276 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.313 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.389 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#609319c3' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.390 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#609319c3' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.392 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7ebe2e47' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.393 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2a7d9b41' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.394 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2a7d9b41' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.404 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.406 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.422 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:21.433 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:22.976 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:23.299 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:18:31.221 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 08:18:31.588 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 08:18:31.588 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 08:18:31.588 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 08:18:34.974 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 08:18:34.974 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 74970 ms
2020-07-11 08:18:43.706 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 08:18:43.797 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-11 08:18:43.801 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 96.945 seconds (JVM running for 111.171)
2020-07-11 08:20:12.575 INFO  [http-nio-1001-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-11 08:20:12.577 INFO  [http-nio-1001-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-07-11 08:20:12.621 INFO  [http-nio-1001-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 43 ms
2020-07-11 08:20:12.759 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:20:12.760 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:20:12.761 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:13.365 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:20:13.368 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:13.371 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:20:13.371 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:20:13.373 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:20:13.374 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:13.376 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:20:13.376 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:13.387 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:20:13.388 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:13.389 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:20:13.391 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:13.997 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:20:13.998 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:20:13.999 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:14.000 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:20:14.001 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:20:14.786 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1415
2020-07-11 08:20:14.808 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:20:14.875 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2116
2020-07-11 08:20:14.911 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 08:20:15.387 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1390
2020-07-11 08:20:15.420 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:20:44.403 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:20:44.404 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:20:44.405 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:44.406 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:20:44.407 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:20:44.687 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 284
2020-07-11 08:20:44.695 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"A8454A15EBCC3D5BD2D9AC0B0AED090A"},"msg":"操作成功！"}
2020-07-11 08:20:45.155 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:20:45.156 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:20:45.157 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:45.158 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:20:45.159 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:20:45.509 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:20:45.510 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:20:45.510 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:20:45.511 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:45.511 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:20:45.511 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:20:45.511 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:45.512 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:45.512 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:20:45.512 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:20:45.513 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:45.515 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:20:45.515 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:45.513 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:20:45.519 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:20:45.520 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:20:45.520 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:45.521 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:45.521 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:20:45.522 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:45.536 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 381
2020-07-11 08:20:45.539 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:20:45.769 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 260
2020-07-11 08:20:45.770 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:20:45.772 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 263
2020-07-11 08:20:45.773 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 08:20:45.781 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 262
2020-07-11 08:20:45.787 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:20:53.156 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 08:20:53.157 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:20:53.157 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:53.158 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 08:20:53.159 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 08:20:54.005 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 849
2020-07-11 08:20:54.007 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"A8454A15EBCC3D5BD2D9AC0B0AED090A"},"msg":"操作成功！"}
2020-07-11 08:20:55.600 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 08:20:55.602 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:20:55.605 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:55.607 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 08:20:55.609 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:55.614 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 14
2020-07-11 08:20:55.616 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:20:57.775 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:20:57.777 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:20:57.778 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:20:57.778 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:20:57.779 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:20:57.873 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 98
2020-07-11 08:20:57.875 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:21:01.732 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:21:01.734 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:21:01.735 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:21:01.738 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:21:01.740 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:21:01.862 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 130
2020-07-11 08:21:01.864 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:21:05.673 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 08:21:05.674 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:21:05.675 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:21:05.676 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 08:21:05.678 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:21:05.899 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 226
2020-07-11 08:21:05.900 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:21:18.956 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-07-11 08:21:18.957 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:21:18.958 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:21:18.960 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-07-11 08:21:18.961 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:21:19.406 INFO  [http-nio-1001-exec-7]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:466}] to 39.97.183.122:27017
2020-07-11 08:21:19.828 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 872
2020-07-11 08:21:19.839 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:21:32.442 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 08:21:32.445 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:21:32.447 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:21:32.448 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 08:21:32.450 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:21:32.550 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 108
2020-07-11 08:21:32.553 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:21:42.292 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:21:42.293 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:21:42.293 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:21:42.294 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:21:42.294 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:21:42.607 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 315
2020-07-11 08:21:42.608 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:21:55.603 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/getByPage
2020-07-11 08:21:55.605 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:21:55.607 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:21:55.609 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.getByPage
2020-07-11 08:21:55.610 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:21:56.138 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 535
2020-07-11 08:21:56.142 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":3,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-07-10 05:29:41"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:22:39.765 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:22:39.767 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:22:39.768 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:22:39.793 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:22:39.794 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:22:40.284 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 519
2020-07-11 08:22:40.286 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:22:49.995 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 08:22:49.996 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:22:49.996 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:22:49.997 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 08:22:49.997 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:22:50.088 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 93
2020-07-11 08:22:50.089 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":6,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:22:55.189 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:22:55.190 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:22:55.190 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:22:55.190 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:22:55.191 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:22:55.581 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 392
2020-07-11 08:22:55.584 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:23:08.396 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:23:08.397 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:23:08.398 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:23:08.399 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:23:08.401 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:23:08.490 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 94
2020-07-11 08:23:08.491 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:23:15.523 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 08:23:15.524 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:23:15.526 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:23:15.527 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 08:23:15.527 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:23:15.735 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 212
2020-07-11 08:23:15.736 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:23:49.645 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:23:49.647 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:23:49.650 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:23:49.652 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:23:49.653 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:23:49.839 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 194
2020-07-11 08:23:49.840 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:23:51.403 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 08:23:51.404 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:23:51.405 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:23:51.405 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 08:23:51.406 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:23:51.604 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 201
2020-07-11 08:23:51.605 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:23:57.518 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:23:57.520 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:23:57.522 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:23:57.523 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:23:57.524 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:23:57.821 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 303
2020-07-11 08:23:57.823 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:24:15.216 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 08:24:15.217 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:24:15.217 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:24:15.219 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 08:24:15.219 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:24:15.403 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 187
2020-07-11 08:24:15.404 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:24:20.113 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-07-11 08:24:20.114 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:24:20.115 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:24:20.116 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-07-11 08:24:20.117 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:24:20.158 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 45
2020-07-11 08:24:20.159 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:24:28.870 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /log/getByPage
2020-07-11 08:24:28.871 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:24:28.873 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:24:28.874 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LogController.getByPage
2020-07-11 08:24:28.876 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:24:29.537 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 667
2020-07-11 08:24:29.546 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1025,"totalPage":103},"msg":"操作成功！"}
2020-07-11 08:24:55.203 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getByPage
2020-07-11 08:24:55.204 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:24:55.204 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:24:55.205 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-07-11 08:24:55.206 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:25:01.547 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:25:01.548 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:25:01.548 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:25:01.549 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:25:01.550 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:25:02.052 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 505
2020-07-11 08:25:02.054 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:25:18.914 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /log/getByPage
2020-07-11 08:25:18.916 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:25:18.917 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:25:18.918 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LogController.getByPage
2020-07-11 08:25:18.919 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:25:19.276 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 362
2020-07-11 08:25:19.279 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1028,"totalPage":103},"msg":"操作成功！"}
2020-07-11 08:26:22.174 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:22.177 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:22.177 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:22.178 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:22.178 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13)], params={}, sortColumn=blog_goods, sortMethod=desc)]
2020-07-11 08:26:22.472 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 298
2020-07-11 08:26:22.474 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:23.270 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:23.271 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:23.272 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:23.272 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:23.273 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-07-11 08:26:23.585 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 315
2020-07-11 08:26:23.586 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:24.279 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:24.280 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:24.280 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:24.280 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:24.282 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:26:24.563 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 284
2020-07-11 08:26:24.564 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:24.934 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:24.934 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:24.936 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:24.936 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:24.937 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=blog_read, sortMethod=desc)]
2020-07-11 08:26:25.208 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 274
2020-07-11 08:26:25.242 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:25.665 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:25.666 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:25.667 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:25.667 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:25.668 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13)], params={}, sortColumn=blog_collection, sortMethod=desc)]
2020-07-11 08:26:26.026 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 361
2020-07-11 08:26:26.026 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:26.718 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:26.721 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:26.722 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:26.723 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:26.726 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-07-11 08:26:27.005 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 287
2020-07-11 08:26:27.007 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:29.803 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:29.804 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:29.805 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:29.806 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:29.808 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=blog_read, sortMethod=desc)]
2020-07-11 08:26:30.105 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 302
2020-07-11 08:26:30.107 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:31.515 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:31.515 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:31.516 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:31.517 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:31.519 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=7, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=2, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-10 05:29:45), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=blog_collection, sortMethod=desc)]
2020-07-11 08:26:31.807 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 292
2020-07-11 08:26:31.809 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:47.303 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:26:47.303 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:26:47.304 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:47.304 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:26:47.305 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:47.305 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:47.305 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:26:47.305 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:26:47.305 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:26:47.306 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:26:47.400 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 97
2020-07-11 08:26:47.401 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 08:26:47.673 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 370
2020-07-11 08:26:47.674 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":7,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-10 05:29:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:26:51.781 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 08:26:51.781 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264726600279891968
2020-07-11 08:26:51.782 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:26:51.782 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:26:51.782 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:51.783 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:26:51.782 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:51.785 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:26:51.785 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:26:51.785 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:26:52.089 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264726600279891968
2020-07-11 08:26:52.089 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:26:52.090 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:52.090 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:26:52.091 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:26:52.093 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 08:26:52.093 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:26:52.094 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:26:52.094 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:26:52.095 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:26:52.162 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 381
2020-07-11 08:26:52.164 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 08:26:53.228 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1447
2020-07-11 08:26:53.228 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}
2020-07-11 08:27:01.327 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/good
2020-07-11 08:27:01.328 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:01.329 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:01.330 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.good
2020-07-11 08:27:01.330 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[CommentGoods(id=null, userId=null, commentId=1281460473655173120)]
2020-07-11 08:27:03.329 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/good
2020-07-11 08:27:03.330 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:03.330 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:03.331 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.good
2020-07-11 08:27:03.331 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[CommentGoods(id=null, userId=null, commentId=1281460473655173120)]
2020-07-11 08:27:16.422 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:16.424 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:16.425 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:16.426 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:16.427 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264726600279891968)]
2020-07-11 08:27:20.113 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:20.114 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:20.116 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:20.116 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:20.117 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264726600279891968)]
2020-07-11 08:27:24.284 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:24.285 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:24.286 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:24.288 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:24.289 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264726600279891968)]
2020-07-11 08:27:30.762 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:30.762 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:30.763 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:30.763 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:30.765 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264726600279891968)]
2020-07-11 08:27:38.428 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264357690636476416
2020-07-11 08:27:38.429 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:27:38.431 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:38.432 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:27:38.431 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264357690636476416
2020-07-11 08:27:38.433 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264357690636476416
2020-07-11 08:27:38.428 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264357690636476416
2020-07-11 08:27:38.434 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:27:38.434 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:27:38.434 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:27:38.435 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:38.433 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:27:38.435 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:38.435 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:38.435 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:27:38.436 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:27:38.436 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:27:38.436 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:27:38.436 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:27:38.437 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:27:38.600 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 167
2020-07-11 08:27:38.602 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:27:39.381 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 953
2020-07-11 08:27:39.382 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":1,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},"msg":"操作成功！"}
2020-07-11 08:27:46.756 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:46.757 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:46.757 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:46.758 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:46.758 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:27:48.059 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:48.060 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:48.061 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:48.061 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:48.062 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:27:50.525 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/collection
2020-07-11 08:27:50.525 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:50.526 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:50.526 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.collection
2020-07-11 08:27:50.526 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogCollection(collectionId=null, blogId=1264357690636476416, blog=null, userId=null, user=null, collectionTime=null)]
2020-07-11 08:27:51.897 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/collection
2020-07-11 08:27:51.898 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:51.898 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:51.899 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.collection
2020-07-11 08:27:51.900 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogCollection(collectionId=null, blogId=1264357690636476416, blog=null, userId=null, user=null, collectionTime=null)]
2020-07-11 08:27:52.106 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/collection
2020-07-11 08:27:52.106 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:52.107 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:52.116 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.collection
2020-07-11 08:27:52.117 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogCollection(collectionId=null, blogId=1264357690636476416, blog=null, userId=null, user=null, collectionTime=null)]
2020-07-11 08:27:52.665 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:52.666 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:52.666 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:52.667 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:52.668 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:27:53.155 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:53.155 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:53.156 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:53.156 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:53.156 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:27:53.307 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:27:53.308 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:27:53.309 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:27:53.309 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:27:53.310 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:02.997 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:02.998 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:02.999 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:03.000 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:03.000 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:03.989 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:03.990 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:03.991 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:03.991 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:03.992 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:04.171 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:04.171 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:04.172 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:04.172 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:04.173 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:04.243 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:04.243 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:04.244 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:04.245 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:04.247 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:34.597 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264357690636476416
2020-07-11 08:28:34.599 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264357690636476416
2020-07-11 08:28:34.599 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:34.599 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:34.600 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:34.600 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:34.600 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:28:34.601 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:28:34.601 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:28:34.600 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264357690636476416
2020-07-11 08:28:34.601 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:28:34.601 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:34.602 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:34.603 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:28:34.603 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:28:34.730 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 133
2020-07-11 08:28:34.730 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:28:34.913 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264357690636476416
2020-07-11 08:28:34.914 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:34.914 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:34.914 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:28:34.915 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-07-11 08:28:34.922 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:28:34.922 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:28:34.922 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:34.922 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:34.923 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:34.923 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:34.923 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:28:34.923 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:28:34.923 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:28:34.923 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:28:35.050 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 128
2020-07-11 08:28:35.051 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 08:28:35.063 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 141
2020-07-11 08:28:35.063 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:28:35.138 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 539
2020-07-11 08:28:35.139 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},"msg":"操作成功！"}
2020-07-11 08:28:35.166 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:28:35.166 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:35.166 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:35.167 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:28:35.167 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:28:35.290 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:28:35.291 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:35.291 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:35.292 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:28:35.295 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:28:35.430 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 08:28:35.431 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:35.431 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:35.432 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 08:28:35.432 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:28:35.433 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-07-11 08:28:35.434 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:28:35.437 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 147
2020-07-11 08:28:35.438 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:28:36.504 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:28:36.505 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:28:36.506 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:36.506 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:28:36.507 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:28:36.513 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /log/getByPage
2020-07-11 08:28:36.514 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:36.514 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:36.515 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LogController.getByPage
2020-07-11 08:28:36.515 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 08:28:37.132 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:37.133 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:37.134 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:37.134 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:37.135 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:37.415 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 911
2020-07-11 08:28:37.416 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:28:37.862 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:37.863 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:37.864 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:37.864 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:37.865 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:37.985 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:37.985 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:37.986 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:37.986 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:37.986 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:38.121 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:38.123 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:38.123 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:38.123 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:38.124 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:38.254 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:38.254 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:38.255 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:38.256 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:38.256 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:38.385 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:38.386 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:38.386 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:38.387 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:38.388 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:28:38.870 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2357
2020-07-11 08:28:38.872 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1074,"totalPage":108},"msg":"操作成功！"}
2020-07-11 08:28:48.318 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:28:48.319 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:28:48.321 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:28:48.322 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:28:48.323 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:29:35.458 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:29:35.460 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:29:35.461 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:29:35.462 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:29:35.463 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264357690636476416)]
2020-07-11 08:32:49.812 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 6192 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 08:32:49.819 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 08:32:51.275 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 08:32:51.450 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 166ms. Found 4 MongoDB repository interfaces.
2020-07-11 08:32:52.317 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:52.563 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$5a210394] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:52.661 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:52.685 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$40744210] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:52.694 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$274be652] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:52.703 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 08:32:52.838 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:52.893 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:52.936 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:57.886 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 08:32:57.887 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.039 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.572 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.583 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.605 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.614 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.619 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.626 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.629 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.674 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#764fffa0' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.679 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#764fffa0' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.751 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5b733ef7' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.758 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3c7279a5' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.765 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3c7279a5' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.837 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.841 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.847 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:58.854 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:59.020 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 08:32:59.021 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 08:32:59.150 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:59.173 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:59.186 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:59.287 INFO  [cluster-ClusterId{value='5f0908bba68dab30241e47a1', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:469}] to 39.97.183.122:27017
2020-07-11 08:32:59.334 INFO  [cluster-ClusterId{value='5f0908bba68dab30241e47a1', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=42729850}
2020-07-11 08:32:59.336 INFO  [cluster-ClusterId{value='5f0908bba68dab30241e47a1', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 08:32:59.367 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:59.452 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:59.562 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:32:59.648 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.183 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.204 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.261 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#586728e8' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.262 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#586728e8' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.265 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5ad6f98e' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.267 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#786ff0ea' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.269 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#786ff0ea' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.286 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.288 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.331 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.339 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.450 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:00.517 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:33:01.084 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 08:33:01.102 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 08:33:01.103 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 08:33:01.104 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 08:33:01.382 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 08:33:01.383 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 11455 ms
2020-07-11 08:33:04.942 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 08:33:05.000 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-11 08:33:05.004 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.988 seconds (JVM running for 22.963)
2020-07-11 08:33:09.351 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-11 08:33:09.351 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-07-11 08:33:09.381 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 29 ms
2020-07-11 08:33:23.487 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:33:23.489 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:33:23.491 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:23.498 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:33:23.499 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:33:23.826 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 339
2020-07-11 08:33:23.836 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"A60A8D4DD540332F566A459A9D082D74"},"msg":"操作成功！"}
2020-07-11 08:33:24.525 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:33:24.526 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:33:24.529 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:24.533 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:33:24.534 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:33:25.298 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:33:25.298 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:33:25.298 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:33:25.299 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:33:25.299 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:33:25.300 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:25.300 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:25.300 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:33:25.300 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:33:25.300 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:33:25.301 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:33:25.301 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:33:25.301 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:25.301 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:33:25.302 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:33:25.338 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:33:25.301 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:33:25.340 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:25.341 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:33:25.344 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:33:25.777 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 479
2020-07-11 08:33:25.779 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:33:25.912 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 614
2020-07-11 08:33:25.924 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 08:33:25.964 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 666
2020-07-11 08:33:25.970 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:33:26.450 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1925
2020-07-11 08:33:26.460 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:26:54"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:33:30.073 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264365631460507648
2020-07-11 08:33:30.074 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:33:30.075 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:30.075 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:33:30.076 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:33:30.391 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365631460507648
2020-07-11 08:33:30.392 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:33:30.392 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:30.393 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:33:30.393 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:33:30.395 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264365631460507648
2020-07-11 08:33:30.397 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:33:30.397 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:30.398 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:33:30.399 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:33:30.407 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264365631460507648
2020-07-11 08:33:30.409 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:33:30.411 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:30.411 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:33:30.411 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:33:31.531 INFO  [http-nio-1001-exec-9]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:4, serverValue:471}] to 39.97.183.122:27017
2020-07-11 08:33:31.569 INFO  [http-nio-1001-exec-10]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:3, serverValue:470}] to 39.97.183.122:27017
2020-07-11 08:33:31.598 INFO  [http-nio-1001-exec-1]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:472}] to 39.97.183.122:27017
2020-07-11 08:33:31.789 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1394
2020-07-11 08:33:31.790 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-07-11 08:33:31.825 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1418
2020-07-11 08:33:31.825 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-07-11 08:33:31.953 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1562
2020-07-11 08:33:31.956 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:33:33.481 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3408
2020-07-11 08:33:33.486 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>前言<br />最近对App开发比较感兴趣，因原生学习起来成本可能较大，就把目光转向了大前端的跨端开发技术。说到跨端开发，那么选择空间就是Flutter、RN、uniapp这几个了。</p>\n<p>flutter最近比较热闹，毕竟是谷歌出品。但我们不是炒作热点的媒体，也不是忽悠你交学费的培训机构，我们作为实际的跨平台开发者，冷静的分析下这个东东。</p>\n<p>flutter是Google为Fuchsia操作系统设计的应用开发方式。</p>\n<p>Fuchsia OS要兼容廉价物联网设备，要求对硬件的消耗降低，并且为了避免与oracle的java打官司，Fuchsia 使用了dart语言+flutter界面库的方式。</p>\n<p>从设计上来看，这套方案的性能确实够高。dart虽然属于大前端范畴，但dart是和java一样的强类型语言，这让dart虚拟机可以做很多优化，性能方面超出了js。</p>\n<p>dart曾经与typescript竞争，谁才是更好的js？但不幸输给了typescript，chrome也放弃了内置dart虚拟机的计划。</p>\n<p>不过dart团队没有解散，几年后，他们借助flutter，再次出现在公众面前。</p>\n<p>性能分析和写法的对比<br />flutter作为界面库（注意它只是界面库，dart语言是另一个项目），它唯一要干的事情就是渲染界面。不像HTML5，flutter界面库连视频、定位等都没有，就是一个纯排版引擎，绘制文字、按钮、图片等常用界面控件。</p>\n<p>这个排版引擎的特点是简单、高性能。</p>\n<p>在3大主流渲染引擎里，webview、react native/weex、flutter，复杂度依次降低，渲染性能依次上升。（uni-app是双渲染引擎，webview和weex都内置了，随便开发者使用切换）</p>\n<p>所以我们要清楚，提升性能是有代价的，你究竟想要灵活丰富的css3，还是想要固定flex模式排版，抑或是最简单但高性能的flutter排版？开发便利性和运行性能不可兼得。</p>\n<p>同时我们要明白，性能的差别，并不是因为Google的chrome团队、Android团队的技术比同公司的flutter团队差。而是flutter提供的布局写法是被限制过的，解析快，所以渲染快。</p>\n<p>但通过这种方式提升性能的代价，就是布局复杂的界面时，flutter的代码嵌套的让人崩溃。</p>\n<p>我们先举个例子，同样的界面，用HTML和flutter如何实现：</p>\n<p>&lt;div class=\"greybox\"&gt; <br />&lt;div class=redbox&gt; <br />smaple text <br />&lt;/div&gt; <br />&lt;/div&gt; <br /><br />.greybox { <br />display: flex; <br />align-items: center; <br />justify-content: center; <br />background-color: #e0e0e0; /* grey 300 */ <br />width: 320px; <br />height: 240px; <br />font: 18px <br />} <br />.redbox { <br />background-color: #ef5350; /* red 400 */ <br />padding: 16px; <br />color: #ffffff <br />} <br />var container = new Container( // grey box <br />child: new Center( <br />child: new Container( // red box <br />child: new Text( <br />\"smaple text\", <br />style: new TextStyle( <br />color: Colors.white, <br />fontSize: 18.0, <br />), <br />), <br />decoration: new BoxDecoration( <br />color: Colors.red[400], <br />), <br />padding: new EdgeInsets.all(16.0), <br />), <br />), <br />width: 320.0, <br />height: 240.0, <br />color: Colors.grey[300], <br />); <br />可以看出，从代码的写法来说，flutter没有tag和样式的说法，更没有选择器，从头到尾只有dart语言，它的界面控件是用dart代码new出来的，每个控件的样式，是在new的时候设置的json参数。</p>\n<p>如果我们要嵌套布局，就要不停的在dart里写child，同时在dart里给child们设样式参数。上面的代码，只是嵌套了1层，实际开发中，dom要嵌套好多层，想象那样的代码。。。所以大家都诟病dart是&ldquo;嵌套地狱&rdquo;。</p>\n<p>或者，你可以这么理解，这是一个只有js，没有html和css的浏览器。你需要用js createElement来创建元素，用js的style方法给每个element设style，反正就是不能写html和css代码。前端都已经发展到各种mvc等视图逻辑分离的架构了，也有了vue组件这种组件化模式方便用各种轮子快速完成界面。你是否能适应dart这种低效的界面开发模式？从开发模式来讲，这确实是一种倒退。</p>\n<p>浏览器的html提供了tag和样式分离的写法，还有各种各样的选择器，但其实这也是有代价的。它导致webview初始化时要同时先启动webkit排版引擎来解析这些编写随性的html、css，同时还要启动一个js引擎比如v8或jscore来解析里面的js。</p>\n<p>而dart就很简单，只启动一个dart引擎，解析严格的dart语法，它不会去操心有些标签未闭合要如何容错，不会判断宽度320后面是px还是rem或者是动态计算百分比。</p>\n<p>对比这2个引擎初始化时要干的事，差别简直太大了。</p>\n<p>所以从解析效率上，flutter肯定比webview要高。但从编码灵活性上，flutter写的代码，嗯，难看而低效！</p>\n<p>flutter使用的也是flex布局思想，这是一个强嵌套布局模型，比web常规排版引擎的嵌套更多。当界面复杂时，flutter的代码要嵌套几十层，每层的元素的json样式都和元素一起混写在dart代码里，让人崩溃。</p>\n<p>有人提出是否可以通过一种预编译的dsl来简化写法，让flutter的开发不这么痛苦。</p>\n<p>但这个难度太大了，从严格转换为松散是简单的，从松散转换为严格几乎是不可能的。</p>\n<p>什么意思呢？比如flutter代码转换web代码，是很简单的，flutter已经自带了这个功能。但是想反过来，那可难了。</p>\n<p>类似的还有，把typescript转为js是容易的，反之，不是绝对不可行，但会复杂到你宁愿去重写一套typescript代码。</p>\n<p>flutter的性能高，除了简单严格，还有一个特点，就是逻辑层与视图层统一，运行在同一套dart虚拟机下。</p>\n<p>我们知道rn和weex，也是原生渲染的，它们的性能高于webview。但同为原生渲染的，怎么会慢于flutter呢？其实不是原生渲染慢，而是js和原生通信慢。</p>\n<p>rn和weex都采用了独立的js引擎（iOS是jscore，Android是v8，最新版rn开始在Android上搞自己的js引擎），从js与dart的比较上，性能稍逊一筹。但这不是主要问题，主要问题是，rn、weex的js引擎和原生渲染层是两个运行环境。</p>\n<p>当js引擎联网获取到数据后，通知原生视图层更新界面时，有一个跨环境的通信折损。同样，当用户在屏幕上操作原生视图层时，要给js引擎发送通知，也会产生这个通信折损。</p>\n<p>不过这种性能差别，在大多数场景中，用户是感受不到的。比较影响的场景，是跟手式的js响应操作绘制帧动画。</p>\n<p>这方面，weex有个值得称赞的技术是BindingX，它可以预定义规则，让用户界面在原生层交互时通过预定义规则直接响应，而无需传递给js层。在需要短时间内来回通信的场景时，可以使用BindingX这类解决方案。它的性能和灵活性比rn更强了一些。</p>\n<p>说回来flutter，它只有一个dart引擎，没有来回通信产生的性能问题。不过任何事情都是有利有弊的，flutter在普通的界面绘制上效率虽然高，但一旦涉及原生的界面，反而会遇到更多问题。</p>\n<p>前面已经说过，flutter只是一个基础排版引擎，缺少很多能力，当我们需要在flutter界面上内嵌一个原生的视频播放扩展控件时（flutter没有视频播放能力），或者原生的高德地图sdk，那么在拖动视频进度时、拖动地图时，flutter一样会产生原生和dart之间的通信，造成性能损耗。</p>\n<p>事实上，由于flutter是在一个类canvas环境绘制的，想把一个原生控件嵌入flutter的布局里某些元素之间去排版，还不是一件容易做到的事情，坑很多。</p>\n<p>每个人都想要一个像css3那样灵活写法的布局引擎，他们给react native和weex提需求，给flutter提需求。殊不知，让这些产品团队实现了css3时，他们的性能优势已经不再了，他们相当于又实现了一遍webview。这种无意义的需求，他们是不会受理了。</p>\n<p>性能好，有个度，客观地讲，rn/weex调用原生渲染的性能，和flutter的渲染性能，在用户体验上并没有明显区别，甚至在很多场景下，和webview渲染的小程序也没有明显区别。</p>\n<p>也简单说说webview渲染小程序，为什么性能高，核心是预载。点击一个新页面时，webview是提前创建好的，不会走复杂的webkit、v8的初始化流程，连开发者的js代码，也是预载好的。所以点击新页面时，它的渲染速度和原生应用没什么差别。当然也有个坏处，就是启动慢。微信里启动小程序速度看着还行，其实是微信在启动小程序之前，就已经提前初始化了小程序运行环境。</p>\n<p>即便是排版引擎，ui库好用吗？<br />不管是rn还是flutter，有一个设计，很不中国化。它们在iOS和Android平台上，使用2套ui库。</p>\n<p>比如flutter，在iOS上写一个button，要用CupertinoButton，是iOS风格的控件，在Android上则要用RaisedButton，是Material风格的控件。</p>\n<p>rn也是如此，它的官方说法是：learn once，write anywhere。它都不敢说：write once，run anywhere。因为它确实要求开发者写2套代码。</p>\n<p>中国的开发者可没有这种习惯，中国的每个开发者，为了避免用户换手机后不会用自己的app，都会使用中性的设计。</p>\n<p>就连微信Android版，底部的tab也是仿iOS而不是Material风格（Material风格是把底tab放在顶部的，并且左右滑动，微信曾经有这样一个临时版本，因为被用户吐槽，很快就下掉了）。</p>\n<p>这种中外差异怎么造成的？</p>\n<p>国外Android手机，其手机主界面就是强烈的Material风格。用户在Android主界面习惯的风格和使用方式，如果启动一个App后不是这样，会导致用户不会用了。</p>\n<p>Google也一再给Android开发者强调，App必须使用Material风格。这其实也是一个防止用户切换脱离Android的策略设计。</p>\n<p>所以国外开发者的App，Android上都会遵循Material风格，当然，这种Material风格的App是上不了Apple的Appstore的。</p>\n<p>这就导致他们默认就是要写2套ui的，所以rn和flutter都是iOS、Android各自1套ui控件。</p>\n<p>但在中国，我们的国产Android Rom，根本不是Material风格，很多rom以仿iOS体验为卖点。</p>\n<p>所以中国的App，全都是贴近iOS的中性风格，中国的用户换了手机，不管是手机os本身，还是App的使用，都不会造成切换障碍。</p>\n<p>rn和flutter这种&ldquo;跨平台&rdquo;排版引擎，其跨平台性，对于中国开发者而言，又打了折扣。</p>\n<p>其实类似小程序那样的ui风格，是能够良好的跨iOS和Android的体验的，不管用什么手机，打开小程序都不会觉得有问题。</p>\n<p>uni-app默认也是这种通用ui风格。uni-app的开发者只需要写一套界面ui，就可以适应不同手机的用户，真正的 write once，run anywhere。</p>\n<p>动态性<br />webview、rn/weex，都有一个特点，可以远程动态载入js代码，可以更新本地的js代码。前端开发者认为动态性是天经地义的，但其实flutter并不支持。</p>\n<p>flutter是有编译优化概念的，如果它提供动态性支持，会影响它的性能。</p>\n<p>业内有些开发者，改造了flutter，用一个独立的v8/jscore来加载动态js代码，去操作flutter布局引擎的渲染。好像还有些人在追捧这样的方案，简直是闲得蛋疼。</p>\n<p>flutter本来没有跨环境通信的问题，结果又弄了一个js引擎进来搞出了通信问题，造成性能下降，还把包体积增加了很大，还不如直接用rn/weex。</p>\n<p>除了flutter，rn/weex/uni-app都可以动态热更新。</p>\n<p>跨平台排版引擎和跨平台应用开发引擎的区别<br />有些人说他们的App用rn/weex、flutter。但是具体用它们做了什么呢？</p>\n<p>是整个App用了它们，还是某个页面用了它们？</p>\n<p>一个页面跨平台，和一个应用跨平台，是完全不同的2个概念。</p>\n<p>webview、rn/weex、flutter全部是渲染引擎，webview因为HTML5的发展，还算是多了一些能力比如位置服务、多媒体等。而rn/weex、flutter真的只是一个纯粹的排版引擎，没有任何原生能力。</p>\n<p>如果一个原生应用里，某个不涉及原生能力的界面想跨平台，那么这几个引擎都可以，并且flutter的性能最高。所以能看到一些公司尝试把App中的个别原生交互较少页面使用flutter实现。</p>\n<p>但如果一个完整的应用，想用跨平台工具开发，那就不是排版引擎的范畴了，它需要应用开发引擎。</p>\n<p>什么是跨平台应用开发引擎？不但排版部分要跨平台，开发API也要跨平台。</p>\n<p>应用开发离不开os或三方sdk的能力调用，如果是单纯的排版引擎，一旦涉及os能力和sdk调用，就必须iOS、Android的工程师配合，编写不同的原生代码整合在一起。这就不跨平台了。</p>\n<p>Airbnb曾是React Native 框架的倡导者和开发者代表。但他们于2019年正式发公告，弃用了react native。</p>\n<p>原因是什么？</p>\n<p>很简单，react native并不能提升Airbnb的开发效率，反而降低了他们的效率。</p>\n<p>&ldquo;本来我们可以只维护Android和iOS两套代码，但现在我们要维护三套（指多了一套react native的js代码），这让我们很疲惫&rdquo; &ndash; aribnb</p>\n<p>开发者选用跨平台开发引擎，本来是为了提高效率、降低成本。Airbnb正是在实践了几年后，发现rn根本无法实现他选用跨平台引擎的初衷时，无奈放弃了rn，用原生开发重写。</p>\n<p>要想真的提升开发效率，降低开发成本，那么跨平台开发引擎，需要提供一个完整的应用开发平台，包含所有常用的应用开发能力的跨平台。在不常用的部分，提供插件市场以及免原生介入的插件使用方式。</p>\n<p>在react native、flutter的社区，也有不少三方提供的原生插件，但是连Airbnb这样的国外开发者对此都不满意。更何况对于很多中国开发者常用的场景，其对应的插件的质量、跨端性都难以商用。</p>\n<p>更麻烦的是如果你不会原生开发，就没法把这些插件与你的前端代码集成起来。</p>\n<p>uni-app，它的设计目标不是跨平台排版引擎，而是跨平台应用开发引擎。</p>\n<p>所以uni-app的排版部分，可以选择小程序强化webview引擎和weex引擎，可根据自己的需求切换。而能力层面，uni-app提供了htmlplus API、Native.js、插件市场，解决了原生能力js化的问题。</p>\n<p>uni-app让开发者真的不用懂原生开发就能做出完整的跨平台应用。遇到极个别的需求，开发者也可以去插件市场找人订做一个原生插件，自己仍然使用js来集成，仍然可以云端直接打包。</p>\n<p>技术学习成本和难度<br />rn，要求开发者学习react，要求精通flex布局，要求原生开发协作。</p>\n<p>flutter，要求开发者学习dart，了解dart和flutter的API、要求精通flex布局，要求原生开发协作。</p>\n<p>weex已经内嵌到uni-app中，就不单独提了。</p>\n<p>uni-app，要求开发者学习vue，了解小程序。</p>\n<p>很明显uni-app的学习成本太低了，它没有附加专有技术，全部使用公共技术。</p>\n<p>学习成本和难度，直接意味着：开发成本、招聘成本、上线速度、上线风险。</p>\n<p>另外，dart究竟值不值得学，是一个大问题。</p>\n<p>Google的天才工程师也发明了go语言，它确实有很多理论优势，但实际上市场的主流，仍然是c和c++。</p>\n<p>生态<br />任何开发引擎，都离不开生态。</p>\n<p>对于国外的开发者，rn、flutter的生态肯定比uni-app好，比如facebook登陆分享、Google地图等。</p>\n<p>但对于国内的开发者，那是反过来的，中国开发者需要的全端推送（UniPush集成了iOS、华为、小米、OPPO等众多原厂推送）、各种国内登陆、支付、分享SDK、各种国内地图、各种ui库、以及Echart图表等，都是在uni-app体系里，这方面生态可比rn、flutter丰富多了。</p>\n<p>其他端的跨端性<br />flutter和rn，都是支持web技术的。但都是仅限于普通界面排版，涉及定位、摄像头、相册什么的，是要单独写代码的。</p>\n<p>另外flutter的H5版，嗯，作为中国开发者，你不会想要一个如此浓郁的Material风格的H5版的。。。</p>\n<p>更何况这个Material ui库大的很，编译出来的H5版要十几M的体积。</p>\n<p>uni-app的H5端是包含完善的能力引擎的，丰富能力都可以直接跨端使用，风格也是跨端风格。uni-app的H5引擎体积只有1百K，gzip后只剩下30k（不含vue、vue rooter），比其他工具的引擎体积要小的多。</p>\n<p>另外，中国离不开小程序，rn、flutter官方都不会支持小程序，由于架构差异太大，国内三方也做不到把rn代码良好的编译为小程序代码。uni-app则可以一套代码，同时编译为iOS、Android、H5、微信小程序、支付宝小程序、百度小程序、头条小程序、QQ小程序。</p>\n<p>结论<br />每种技术的诞生，有其背后公司的目的。</p>\n<p>但凡没有明确公司战略的技术，除非是特别简单的技术，否则很难商用，因为为了商用要投入公司非常多资源。</p>\n<p>flutter诞生的目的，是为了Fuchsia OS，是为了在下一个互联网大潮，即万物互联的物联网年代，提供一个类似Android在移动互联网位置的垄断性操作系统。</p>\n<p>因为Google已经很明确不会在下一个时代使用Android+java的路线了。</p>\n<p>至于在Android上去java化，那是Kotlin的使命，与flutter无关。</p>\n<p>跨iOS和Android平台开发，这不是Google的战略目标。</p>\n<p>但万物互联何时到来？Fuchsia OS何时流行？这在现实中是一个问号，在Google内部，也只是战略储备项目。</p>\n<p>一个语言的流行，不是一件简单的事情，不是有优点，就会流行，它需要天时地利人和。</p>\n<p>6年前我们就知道dart比js更好，dart不应该消亡，但想成为主流技术，太难太难了。</p>\n<p>同样我们也知道go比c++更好，但go还是起不来。</p>\n<p>想靠flutter驱动dart流行是不现实的，甚至是反过来的。跨iOS、Android开发在国外不是主流市场，这点价值造就不出一个这么难建的生态。</p>\n<p>所以dart能否流行，是要打一个大大的问号的，它可能会像go语言一样，叫好不叫座。</p>\n<p>写了这么多，最后总结下flutter与uni-app的比较：</p>\n<p>flutter的相对优势：<br />性能好一丢丢。比rn有优势，但比拥有bindingx的weex/uni-app，在实际开发中没有很明显的差距。<br />flutter的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />嵌套地狱，代码难看难维护<br />不支持热更新<br />目前质量和成熟度很低，github上的issue有5k+，很容易掉坑里<br />原生可视控件融合不好，比如webview、video、map<br />ui库不适合国情<br />学习成本高<br />dart未来扑朔迷离<br />再总结下rn和uni-app的比较</p>\n<p>rn的相对优势：<br />rn的坑虽然比weex的少，但uni-app已经填了weex的很多坑。这方面差别不大。<br />rn的生态虽然比weex丰富。但uni-app是反过来的，uni-app的国内应用生态丰富度超过了rn。<br />rn的app冷启动比uni-app快。这个问题uni-app已经内部改进完毕，下个版本发布就能解决。<br />rn是纯单页的，嵌入原生App比较灵活。而uni-app是应用整体的概念，如果要内嵌入其他原生应用的话，要求原生应用内嵌uni-app应用整体进来<br />rn的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />不支持小程序，发布到h5也无法直接发<br />ui库不适合国情，learn once，write anywhere<br />学习成本高，用人成本高，不利于开发商降低开发成本<br />rn是纯单页应用，如果一个应用的页面很多，用rn写会很崩溃，变量污染和干扰严重。而weex/uni-app支持多页面，页面之间上下文隔离，写页面较多的大型应用更合适<br />另外react在中国的市场占有率远不如vue。这也是中国与国外不同的特色情况。</p>","blogGoods":0,"blogId":"1264365631460507648","blogRead":1,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},"msg":"操作成功！"}
2020-07-11 08:33:45.621 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:33:45.622 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:33:45.623 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:33:45.624 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:33:45.625 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365631460507648)]
2020-07-11 08:35:00.259 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:35:00.260 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:35:00.260 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:35:00.261 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:35:00.261 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365631460507648)]
2020-07-11 08:38:08.439 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 188180
2020-07-11 08:40:33.614 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 407993
2020-07-11 08:40:33.635 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"点赞成功"}
2020-07-11 08:38:08.460 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"点赞成功"}
2020-07-11 08:40:35.684 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264365631460507648
2020-07-11 08:40:35.684 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365631460507648
2020-07-11 08:40:35.685 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:40:35.685 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:40:35.685 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:35.685 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:35.685 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:40:35.686 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:40:35.685 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:40:35.687 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:40:35.694 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264365631460507648
2020-07-11 08:40:35.695 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:40:35.698 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:35.698 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:40:35.699 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:40:35.736 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:40:35.737 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:40:35.739 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:35.739 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:40:35.740 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:40:35.757 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264365631460507648
2020-07-11 08:40:35.758 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:40:35.759 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:35.759 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:40:35.760 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:40:36.599 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 905
2020-07-11 08:40:36.600 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":2,"msg":"操作成功！"}
2020-07-11 08:40:36.602 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 845
2020-07-11 08:40:36.602 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-07-11 08:40:36.606 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 922
2020-07-11 08:40:36.610 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:40:36.612 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:40:36.612 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:36.613 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:36.613 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:40:36.615 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:40:36.663 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:40:36.759 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:36.760 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:36.760 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:40:36.780 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365631460507648)]
2020-07-11 08:40:36.782 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:40:36.783 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:36.783 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:36.784 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:40:36.784 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365631460507648)]
2020-07-11 08:40:36.828 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1094
2020-07-11 08:40:36.829 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:40:38.097 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2413
2020-07-11 08:40:38.313 INFO  [SpringContextShutdownHook]o.s.jmx.export.annotation.AnnotationMBeanExporter.doUnregister:211 -Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2020-07-11 08:40:38.494 INFO  [http-nio-1001-exec-24]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:40:38.495 INFO  [http-nio-1001-exec-17]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:40:38.495 INFO  [http-nio-1001-exec-24]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.496 INFO  [http-nio-1001-exec-24]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.496 INFO  [http-nio-1001-exec-24]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:40:38.497 INFO  [http-nio-1001-exec-24]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=111111111111111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:40:38.496 INFO  [http-nio-1001-exec-17]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.499 INFO  [http-nio-1001-exec-17]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.500 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>前言<br />最近对App开发比较感兴趣，因原生学习起来成本可能较大，就把目光转向了大前端的跨端开发技术。说到跨端开发，那么选择空间就是Flutter、RN、uniapp这几个了。</p>\n<p>flutter最近比较热闹，毕竟是谷歌出品。但我们不是炒作热点的媒体，也不是忽悠你交学费的培训机构，我们作为实际的跨平台开发者，冷静的分析下这个东东。</p>\n<p>flutter是Google为Fuchsia操作系统设计的应用开发方式。</p>\n<p>Fuchsia OS要兼容廉价物联网设备，要求对硬件的消耗降低，并且为了避免与oracle的java打官司，Fuchsia 使用了dart语言+flutter界面库的方式。</p>\n<p>从设计上来看，这套方案的性能确实够高。dart虽然属于大前端范畴，但dart是和java一样的强类型语言，这让dart虚拟机可以做很多优化，性能方面超出了js。</p>\n<p>dart曾经与typescript竞争，谁才是更好的js？但不幸输给了typescript，chrome也放弃了内置dart虚拟机的计划。</p>\n<p>不过dart团队没有解散，几年后，他们借助flutter，再次出现在公众面前。</p>\n<p>性能分析和写法的对比<br />flutter作为界面库（注意它只是界面库，dart语言是另一个项目），它唯一要干的事情就是渲染界面。不像HTML5，flutter界面库连视频、定位等都没有，就是一个纯排版引擎，绘制文字、按钮、图片等常用界面控件。</p>\n<p>这个排版引擎的特点是简单、高性能。</p>\n<p>在3大主流渲染引擎里，webview、react native/weex、flutter，复杂度依次降低，渲染性能依次上升。（uni-app是双渲染引擎，webview和weex都内置了，随便开发者使用切换）</p>\n<p>所以我们要清楚，提升性能是有代价的，你究竟想要灵活丰富的css3，还是想要固定flex模式排版，抑或是最简单但高性能的flutter排版？开发便利性和运行性能不可兼得。</p>\n<p>同时我们要明白，性能的差别，并不是因为Google的chrome团队、Android团队的技术比同公司的flutter团队差。而是flutter提供的布局写法是被限制过的，解析快，所以渲染快。</p>\n<p>但通过这种方式提升性能的代价，就是布局复杂的界面时，flutter的代码嵌套的让人崩溃。</p>\n<p>我们先举个例子，同样的界面，用HTML和flutter如何实现：</p>\n<p>&lt;div class=\"greybox\"&gt; <br />&lt;div class=redbox&gt; <br />smaple text <br />&lt;/div&gt; <br />&lt;/div&gt; <br /><br />.greybox { <br />display: flex; <br />align-items: center; <br />justify-content: center; <br />background-color: #e0e0e0; /* grey 300 */ <br />width: 320px; <br />height: 240px; <br />font: 18px <br />} <br />.redbox { <br />background-color: #ef5350; /* red 400 */ <br />padding: 16px; <br />color: #ffffff <br />} <br />var container = new Container( // grey box <br />child: new Center( <br />child: new Container( // red box <br />child: new Text( <br />\"smaple text\", <br />style: new TextStyle( <br />color: Colors.white, <br />fontSize: 18.0, <br />), <br />), <br />decoration: new BoxDecoration( <br />color: Colors.red[400], <br />), <br />padding: new EdgeInsets.all(16.0), <br />), <br />), <br />width: 320.0, <br />height: 240.0, <br />color: Colors.grey[300], <br />); <br />可以看出，从代码的写法来说，flutter没有tag和样式的说法，更没有选择器，从头到尾只有dart语言，它的界面控件是用dart代码new出来的，每个控件的样式，是在new的时候设置的json参数。</p>\n<p>如果我们要嵌套布局，就要不停的在dart里写child，同时在dart里给child们设样式参数。上面的代码，只是嵌套了1层，实际开发中，dom要嵌套好多层，想象那样的代码。。。所以大家都诟病dart是&ldquo;嵌套地狱&rdquo;。</p>\n<p>或者，你可以这么理解，这是一个只有js，没有html和css的浏览器。你需要用js createElement来创建元素，用js的style方法给每个element设style，反正就是不能写html和css代码。前端都已经发展到各种mvc等视图逻辑分离的架构了，也有了vue组件这种组件化模式方便用各种轮子快速完成界面。你是否能适应dart这种低效的界面开发模式？从开发模式来讲，这确实是一种倒退。</p>\n<p>浏览器的html提供了tag和样式分离的写法，还有各种各样的选择器，但其实这也是有代价的。它导致webview初始化时要同时先启动webkit排版引擎来解析这些编写随性的html、css，同时还要启动一个js引擎比如v8或jscore来解析里面的js。</p>\n<p>而dart就很简单，只启动一个dart引擎，解析严格的dart语法，它不会去操心有些标签未闭合要如何容错，不会判断宽度320后面是px还是rem或者是动态计算百分比。</p>\n<p>对比这2个引擎初始化时要干的事，差别简直太大了。</p>\n<p>所以从解析效率上，flutter肯定比webview要高。但从编码灵活性上，flutter写的代码，嗯，难看而低效！</p>\n<p>flutter使用的也是flex布局思想，这是一个强嵌套布局模型，比web常规排版引擎的嵌套更多。当界面复杂时，flutter的代码要嵌套几十层，每层的元素的json样式都和元素一起混写在dart代码里，让人崩溃。</p>\n<p>有人提出是否可以通过一种预编译的dsl来简化写法，让flutter的开发不这么痛苦。</p>\n<p>但这个难度太大了，从严格转换为松散是简单的，从松散转换为严格几乎是不可能的。</p>\n<p>什么意思呢？比如flutter代码转换web代码，是很简单的，flutter已经自带了这个功能。但是想反过来，那可难了。</p>\n<p>类似的还有，把typescript转为js是容易的，反之，不是绝对不可行，但会复杂到你宁愿去重写一套typescript代码。</p>\n<p>flutter的性能高，除了简单严格，还有一个特点，就是逻辑层与视图层统一，运行在同一套dart虚拟机下。</p>\n<p>我们知道rn和weex，也是原生渲染的，它们的性能高于webview。但同为原生渲染的，怎么会慢于flutter呢？其实不是原生渲染慢，而是js和原生通信慢。</p>\n<p>rn和weex都采用了独立的js引擎（iOS是jscore，Android是v8，最新版rn开始在Android上搞自己的js引擎），从js与dart的比较上，性能稍逊一筹。但这不是主要问题，主要问题是，rn、weex的js引擎和原生渲染层是两个运行环境。</p>\n<p>当js引擎联网获取到数据后，通知原生视图层更新界面时，有一个跨环境的通信折损。同样，当用户在屏幕上操作原生视图层时，要给js引擎发送通知，也会产生这个通信折损。</p>\n<p>不过这种性能差别，在大多数场景中，用户是感受不到的。比较影响的场景，是跟手式的js响应操作绘制帧动画。</p>\n<p>这方面，weex有个值得称赞的技术是BindingX，它可以预定义规则，让用户界面在原生层交互时通过预定义规则直接响应，而无需传递给js层。在需要短时间内来回通信的场景时，可以使用BindingX这类解决方案。它的性能和灵活性比rn更强了一些。</p>\n<p>说回来flutter，它只有一个dart引擎，没有来回通信产生的性能问题。不过任何事情都是有利有弊的，flutter在普通的界面绘制上效率虽然高，但一旦涉及原生的界面，反而会遇到更多问题。</p>\n<p>前面已经说过，flutter只是一个基础排版引擎，缺少很多能力，当我们需要在flutter界面上内嵌一个原生的视频播放扩展控件时（flutter没有视频播放能力），或者原生的高德地图sdk，那么在拖动视频进度时、拖动地图时，flutter一样会产生原生和dart之间的通信，造成性能损耗。</p>\n<p>事实上，由于flutter是在一个类canvas环境绘制的，想把一个原生控件嵌入flutter的布局里某些元素之间去排版，还不是一件容易做到的事情，坑很多。</p>\n<p>每个人都想要一个像css3那样灵活写法的布局引擎，他们给react native和weex提需求，给flutter提需求。殊不知，让这些产品团队实现了css3时，他们的性能优势已经不再了，他们相当于又实现了一遍webview。这种无意义的需求，他们是不会受理了。</p>\n<p>性能好，有个度，客观地讲，rn/weex调用原生渲染的性能，和flutter的渲染性能，在用户体验上并没有明显区别，甚至在很多场景下，和webview渲染的小程序也没有明显区别。</p>\n<p>也简单说说webview渲染小程序，为什么性能高，核心是预载。点击一个新页面时，webview是提前创建好的，不会走复杂的webkit、v8的初始化流程，连开发者的js代码，也是预载好的。所以点击新页面时，它的渲染速度和原生应用没什么差别。当然也有个坏处，就是启动慢。微信里启动小程序速度看着还行，其实是微信在启动小程序之前，就已经提前初始化了小程序运行环境。</p>\n<p>即便是排版引擎，ui库好用吗？<br />不管是rn还是flutter，有一个设计，很不中国化。它们在iOS和Android平台上，使用2套ui库。</p>\n<p>比如flutter，在iOS上写一个button，要用CupertinoButton，是iOS风格的控件，在Android上则要用RaisedButton，是Material风格的控件。</p>\n<p>rn也是如此，它的官方说法是：learn once，write anywhere。它都不敢说：write once，run anywhere。因为它确实要求开发者写2套代码。</p>\n<p>中国的开发者可没有这种习惯，中国的每个开发者，为了避免用户换手机后不会用自己的app，都会使用中性的设计。</p>\n<p>就连微信Android版，底部的tab也是仿iOS而不是Material风格（Material风格是把底tab放在顶部的，并且左右滑动，微信曾经有这样一个临时版本，因为被用户吐槽，很快就下掉了）。</p>\n<p>这种中外差异怎么造成的？</p>\n<p>国外Android手机，其手机主界面就是强烈的Material风格。用户在Android主界面习惯的风格和使用方式，如果启动一个App后不是这样，会导致用户不会用了。</p>\n<p>Google也一再给Android开发者强调，App必须使用Material风格。这其实也是一个防止用户切换脱离Android的策略设计。</p>\n<p>所以国外开发者的App，Android上都会遵循Material风格，当然，这种Material风格的App是上不了Apple的Appstore的。</p>\n<p>这就导致他们默认就是要写2套ui的，所以rn和flutter都是iOS、Android各自1套ui控件。</p>\n<p>但在中国，我们的国产Android Rom，根本不是Material风格，很多rom以仿iOS体验为卖点。</p>\n<p>所以中国的App，全都是贴近iOS的中性风格，中国的用户换了手机，不管是手机os本身，还是App的使用，都不会造成切换障碍。</p>\n<p>rn和flutter这种&ldquo;跨平台&rdquo;排版引擎，其跨平台性，对于中国开发者而言，又打了折扣。</p>\n<p>其实类似小程序那样的ui风格，是能够良好的跨iOS和Android的体验的，不管用什么手机，打开小程序都不会觉得有问题。</p>\n<p>uni-app默认也是这种通用ui风格。uni-app的开发者只需要写一套界面ui，就可以适应不同手机的用户，真正的 write once，run anywhere。</p>\n<p>动态性<br />webview、rn/weex，都有一个特点，可以远程动态载入js代码，可以更新本地的js代码。前端开发者认为动态性是天经地义的，但其实flutter并不支持。</p>\n<p>flutter是有编译优化概念的，如果它提供动态性支持，会影响它的性能。</p>\n<p>业内有些开发者，改造了flutter，用一个独立的v8/jscore来加载动态js代码，去操作flutter布局引擎的渲染。好像还有些人在追捧这样的方案，简直是闲得蛋疼。</p>\n<p>flutter本来没有跨环境通信的问题，结果又弄了一个js引擎进来搞出了通信问题，造成性能下降，还把包体积增加了很大，还不如直接用rn/weex。</p>\n<p>除了flutter，rn/weex/uni-app都可以动态热更新。</p>\n<p>跨平台排版引擎和跨平台应用开发引擎的区别<br />有些人说他们的App用rn/weex、flutter。但是具体用它们做了什么呢？</p>\n<p>是整个App用了它们，还是某个页面用了它们？</p>\n<p>一个页面跨平台，和一个应用跨平台，是完全不同的2个概念。</p>\n<p>webview、rn/weex、flutter全部是渲染引擎，webview因为HTML5的发展，还算是多了一些能力比如位置服务、多媒体等。而rn/weex、flutter真的只是一个纯粹的排版引擎，没有任何原生能力。</p>\n<p>如果一个原生应用里，某个不涉及原生能力的界面想跨平台，那么这几个引擎都可以，并且flutter的性能最高。所以能看到一些公司尝试把App中的个别原生交互较少页面使用flutter实现。</p>\n<p>但如果一个完整的应用，想用跨平台工具开发，那就不是排版引擎的范畴了，它需要应用开发引擎。</p>\n<p>什么是跨平台应用开发引擎？不但排版部分要跨平台，开发API也要跨平台。</p>\n<p>应用开发离不开os或三方sdk的能力调用，如果是单纯的排版引擎，一旦涉及os能力和sdk调用，就必须iOS、Android的工程师配合，编写不同的原生代码整合在一起。这就不跨平台了。</p>\n<p>Airbnb曾是React Native 框架的倡导者和开发者代表。但他们于2019年正式发公告，弃用了react native。</p>\n<p>原因是什么？</p>\n<p>很简单，react native并不能提升Airbnb的开发效率，反而降低了他们的效率。</p>\n<p>&ldquo;本来我们可以只维护Android和iOS两套代码，但现在我们要维护三套（指多了一套react native的js代码），这让我们很疲惫&rdquo; &ndash; aribnb</p>\n<p>开发者选用跨平台开发引擎，本来是为了提高效率、降低成本。Airbnb正是在实践了几年后，发现rn根本无法实现他选用跨平台引擎的初衷时，无奈放弃了rn，用原生开发重写。</p>\n<p>要想真的提升开发效率，降低开发成本，那么跨平台开发引擎，需要提供一个完整的应用开发平台，包含所有常用的应用开发能力的跨平台。在不常用的部分，提供插件市场以及免原生介入的插件使用方式。</p>\n<p>在react native、flutter的社区，也有不少三方提供的原生插件，但是连Airbnb这样的国外开发者对此都不满意。更何况对于很多中国开发者常用的场景，其对应的插件的质量、跨端性都难以商用。</p>\n<p>更麻烦的是如果你不会原生开发，就没法把这些插件与你的前端代码集成起来。</p>\n<p>uni-app，它的设计目标不是跨平台排版引擎，而是跨平台应用开发引擎。</p>\n<p>所以uni-app的排版部分，可以选择小程序强化webview引擎和weex引擎，可根据自己的需求切换。而能力层面，uni-app提供了htmlplus API、Native.js、插件市场，解决了原生能力js化的问题。</p>\n<p>uni-app让开发者真的不用懂原生开发就能做出完整的跨平台应用。遇到极个别的需求，开发者也可以去插件市场找人订做一个原生插件，自己仍然使用js来集成，仍然可以云端直接打包。</p>\n<p>技术学习成本和难度<br />rn，要求开发者学习react，要求精通flex布局，要求原生开发协作。</p>\n<p>flutter，要求开发者学习dart，了解dart和flutter的API、要求精通flex布局，要求原生开发协作。</p>\n<p>weex已经内嵌到uni-app中，就不单独提了。</p>\n<p>uni-app，要求开发者学习vue，了解小程序。</p>\n<p>很明显uni-app的学习成本太低了，它没有附加专有技术，全部使用公共技术。</p>\n<p>学习成本和难度，直接意味着：开发成本、招聘成本、上线速度、上线风险。</p>\n<p>另外，dart究竟值不值得学，是一个大问题。</p>\n<p>Google的天才工程师也发明了go语言，它确实有很多理论优势，但实际上市场的主流，仍然是c和c++。</p>\n<p>生态<br />任何开发引擎，都离不开生态。</p>\n<p>对于国外的开发者，rn、flutter的生态肯定比uni-app好，比如facebook登陆分享、Google地图等。</p>\n<p>但对于国内的开发者，那是反过来的，中国开发者需要的全端推送（UniPush集成了iOS、华为、小米、OPPO等众多原厂推送）、各种国内登陆、支付、分享SDK、各种国内地图、各种ui库、以及Echart图表等，都是在uni-app体系里，这方面生态可比rn、flutter丰富多了。</p>\n<p>其他端的跨端性<br />flutter和rn，都是支持web技术的。但都是仅限于普通界面排版，涉及定位、摄像头、相册什么的，是要单独写代码的。</p>\n<p>另外flutter的H5版，嗯，作为中国开发者，你不会想要一个如此浓郁的Material风格的H5版的。。。</p>\n<p>更何况这个Material ui库大的很，编译出来的H5版要十几M的体积。</p>\n<p>uni-app的H5端是包含完善的能力引擎的，丰富能力都可以直接跨端使用，风格也是跨端风格。uni-app的H5引擎体积只有1百K，gzip后只剩下30k（不含vue、vue rooter），比其他工具的引擎体积要小的多。</p>\n<p>另外，中国离不开小程序，rn、flutter官方都不会支持小程序，由于架构差异太大，国内三方也做不到把rn代码良好的编译为小程序代码。uni-app则可以一套代码，同时编译为iOS、Android、H5、微信小程序、支付宝小程序、百度小程序、头条小程序、QQ小程序。</p>\n<p>结论<br />每种技术的诞生，有其背后公司的目的。</p>\n<p>但凡没有明确公司战略的技术，除非是特别简单的技术，否则很难商用，因为为了商用要投入公司非常多资源。</p>\n<p>flutter诞生的目的，是为了Fuchsia OS，是为了在下一个互联网大潮，即万物互联的物联网年代，提供一个类似Android在移动互联网位置的垄断性操作系统。</p>\n<p>因为Google已经很明确不会在下一个时代使用Android+java的路线了。</p>\n<p>至于在Android上去java化，那是Kotlin的使命，与flutter无关。</p>\n<p>跨iOS和Android平台开发，这不是Google的战略目标。</p>\n<p>但万物互联何时到来？Fuchsia OS何时流行？这在现实中是一个问号，在Google内部，也只是战略储备项目。</p>\n<p>一个语言的流行，不是一件简单的事情，不是有优点，就会流行，它需要天时地利人和。</p>\n<p>6年前我们就知道dart比js更好，dart不应该消亡，但想成为主流技术，太难太难了。</p>\n<p>同样我们也知道go比c++更好，但go还是起不来。</p>\n<p>想靠flutter驱动dart流行是不现实的，甚至是反过来的。跨iOS、Android开发在国外不是主流市场，这点价值造就不出一个这么难建的生态。</p>\n<p>所以dart能否流行，是要打一个大大的问号的，它可能会像go语言一样，叫好不叫座。</p>\n<p>写了这么多，最后总结下flutter与uni-app的比较：</p>\n<p>flutter的相对优势：<br />性能好一丢丢。比rn有优势，但比拥有bindingx的weex/uni-app，在实际开发中没有很明显的差距。<br />flutter的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />嵌套地狱，代码难看难维护<br />不支持热更新<br />目前质量和成熟度很低，github上的issue有5k+，很容易掉坑里<br />原生可视控件融合不好，比如webview、video、map<br />ui库不适合国情<br />学习成本高<br />dart未来扑朔迷离<br />再总结下rn和uni-app的比较</p>\n<p>rn的相对优势：<br />rn的坑虽然比weex的少，但uni-app已经填了weex的很多坑。这方面差别不大。<br />rn的生态虽然比weex丰富。但uni-app是反过来的，uni-app的国内应用生态丰富度超过了rn。<br />rn的app冷启动比uni-app快。这个问题uni-app已经内部改进完毕，下个版本发布就能解决。<br />rn是纯单页的，嵌入原生App比较灵活。而uni-app是应用整体的概念，如果要内嵌入其他原生应用的话，要求原生应用内嵌uni-app应用整体进来<br />rn的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />不支持小程序，发布到h5也无法直接发<br />ui库不适合国情，learn once，write anywhere<br />学习成本高，用人成本高，不利于开发商降低开发成本<br />rn是纯单页应用，如果一个应用的页面很多，用rn写会很崩溃，变量污染和干扰严重。而weex/uni-app支持多页面，页面之间上下文隔离，写页面较多的大型应用更合适<br />另外react在中国的市场占有率远不如vue。这也是中国与国外不同的特色情况。</p>","blogGoods":2,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},"msg":"操作成功！"}
2020-07-11 08:40:38.500 INFO  [http-nio-1001-exec-17]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:40:38.501 INFO  [http-nio-1001-exec-17]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:40:38.503 INFO  [http-nio-1001-exec-16]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:40:38.504 INFO  [http-nio-1001-exec-16]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.505 INFO  [http-nio-1001-exec-16]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.505 INFO  [http-nio-1001-exec-16]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:40:38.506 INFO  [http-nio-1001-exec-16]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:40:38.500 INFO  [http-nio-1001-exec-15]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:40:38.508 INFO  [http-nio-1001-exec-15]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.509 INFO  [http-nio-1001-exec-15]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.510 INFO  [http-nio-1001-exec-15]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:40:38.511 INFO  [http-nio-1001-exec-15]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:40:38.513 INFO  [SpringContextShutdownHook]org.mongodb.driver.connection.info:71 -Closed connection [connectionId{localValue:2, serverValue:472}] to 39.97.183.122:27017 because the pool has been closed.
2020-07-11 08:40:38.515 INFO  [SpringContextShutdownHook]org.mongodb.driver.connection.info:71 -Closed connection [connectionId{localValue:4, serverValue:471}] to 39.97.183.122:27017 because the pool has been closed.
2020-07-11 08:40:38.518 INFO  [SpringContextShutdownHook]org.mongodb.driver.connection.info:71 -Closed connection [connectionId{localValue:3, serverValue:470}] to 39.97.183.122:27017 because the pool has been closed.
2020-07-11 08:40:38.522 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1910
2020-07-11 08:40:38.524 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":2,"blogId":"1264365631460507648","blogRead":1,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-07-11 08:40:38.548 INFO  [SpringContextShutdownHook]com.alibaba.druid.pool.DruidDataSource.close:1825 -{dataSource-1} closed
2020-07-11 08:40:38.548 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 08:40:38.548 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:40:38.549 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.549 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.549 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.549 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.551 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 08:40:38.552 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 08:40:38.553 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-07-11 08:40:38.556 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 08:40:38.550 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:40:38.557 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:40:38.556 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:40:38.558 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:40:38.558 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.559 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:40:38.559 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.559 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:40:38.560 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:40:38.560 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:40:38.560 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:40:38.561 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:40:38.726 INFO  [http-nio-1001-exec-19]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 08:40:41.418 INFO  [http-nio-1001-exec-19]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-2} inited
2020-07-11 08:40:41.615 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4833
2020-07-11 08:40:41.616 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"点赞成功"}
2020-07-11 08:40:41.619 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4956
2020-07-11 08:40:41.619 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"点赞成功"}
2020-07-11 08:41:14.248 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 20516 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 08:41:14.255 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 08:41:16.791 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 08:41:16.961 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 162ms. Found 4 MongoDB repository interfaces.
2020-07-11 08:41:17.759 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:17.975 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$545abba8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:18.075 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:18.099 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$3aadfa24] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:18.106 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$21859e66] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:18.113 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 08:41:18.207 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:18.234 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:18.285 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.120 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 08:41:23.124 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.318 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.911 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.922 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.938 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.946 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.950 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.958 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.960 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.994 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#12fcc71f' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:23.999 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#12fcc71f' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.064 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4b200971' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.070 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#fc807c1' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.077 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#fc807c1' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.139 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.144 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.148 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.153 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.281 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 08:41:24.282 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 08:41:24.391 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.441 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.485 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.512 INFO  [cluster-ClusterId{value='5f090ab4907c15675a6cf477', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:473}] to 39.97.183.122:27017
2020-07-11 08:41:24.578 INFO  [cluster-ClusterId{value='5f090ab4907c15675a6cf477', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=62202506}
2020-07-11 08:41:24.580 INFO  [cluster-ClusterId{value='5f090ab4907c15675a6cf477', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 08:41:24.734 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.795 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:24.900 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.013 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.792 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.826 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.907 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#6f8e9d06' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.908 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#6f8e9d06' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.912 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#47acd13b' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.914 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2272cbb0' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.916 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2272cbb0' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.936 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:25.941 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:26.002 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:26.011 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:26.105 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:26.171 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:41:26.724 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 08:41:26.742 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 08:41:26.742 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 08:41:26.743 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 08:41:26.962 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 08:41:26.963 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 12566 ms
2020-07-11 08:41:29.472 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 08:41:29.512 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-11 08:41:29.515 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.915 seconds (JVM running for 20.516)
2020-07-11 08:42:10.624 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-11 08:42:10.625 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-07-11 08:42:10.657 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 32 ms
2020-07-11 08:42:10.822 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 08:42:10.822 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:42:10.823 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:42:10.827 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 08:42:10.828 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 08:42:11.216 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 395
2020-07-11 08:42:11.329 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"8B803655276A4B6E5C6D3C7B74F875BF"},"msg":"操作成功！"}
2020-07-11 08:42:11.699 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 08:42:11.700 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:42:11.701 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:42:11.702 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 08:42:11.702 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:42:11.703 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-07-11 08:42:11.710 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:42:12.390 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:42:12.392 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:42:12.393 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:42:12.395 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:42:12.396 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:42:12.529 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 139
2020-07-11 08:42:12.545 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:44:02.085 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:44:02.087 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:44:02.087 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:02.088 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:44:02.090 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:44:02.107 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:44:02.108 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:44:02.109 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:02.110 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:44:02.111 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:44:02.122 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:44:02.123 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:44:02.124 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:02.124 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:44:02.125 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:44:02.233 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:44:02.234 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:44:02.235 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:02.237 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:44:02.237 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:44:02.254 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 147
2020-07-11 08:44:02.254 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:44:02.265 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 180
2020-07-11 08:44:02.277 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-07-11 08:44:02.452 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:44:02.454 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:44:02.454 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:02.455 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:44:02.456 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:44:02.557 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 105
2020-07-11 08:44:02.558 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:44:02.559 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 437
2020-07-11 08:44:02.570 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:26:54"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":2,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:40:40"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:44:05.801 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264365631460507648
2020-07-11 08:44:05.802 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:44:05.803 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:05.804 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:44:05.807 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:44:05.831 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365631460507648
2020-07-11 08:44:05.831 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:44:05.832 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:05.835 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:44:05.838 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:44:06.302 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264365631460507648
2020-07-11 08:44:06.302 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:44:06.303 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:06.305 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:44:06.307 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:44:06.309 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264365631460507648
2020-07-11 08:44:06.310 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:44:06.311 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:06.313 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:44:06.314 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365631460507648]
2020-07-11 08:44:06.542 INFO  [http-nio-1001-exec-9]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:474}] to 39.97.183.122:27017
2020-07-11 08:44:06.697 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 867
2020-07-11 08:44:06.698 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:44:06.862 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1061
2020-07-11 08:44:06.863 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>前言<br />最近对App开发比较感兴趣，因原生学习起来成本可能较大，就把目光转向了大前端的跨端开发技术。说到跨端开发，那么选择空间就是Flutter、RN、uniapp这几个了。</p>\n<p>flutter最近比较热闹，毕竟是谷歌出品。但我们不是炒作热点的媒体，也不是忽悠你交学费的培训机构，我们作为实际的跨平台开发者，冷静的分析下这个东东。</p>\n<p>flutter是Google为Fuchsia操作系统设计的应用开发方式。</p>\n<p>Fuchsia OS要兼容廉价物联网设备，要求对硬件的消耗降低，并且为了避免与oracle的java打官司，Fuchsia 使用了dart语言+flutter界面库的方式。</p>\n<p>从设计上来看，这套方案的性能确实够高。dart虽然属于大前端范畴，但dart是和java一样的强类型语言，这让dart虚拟机可以做很多优化，性能方面超出了js。</p>\n<p>dart曾经与typescript竞争，谁才是更好的js？但不幸输给了typescript，chrome也放弃了内置dart虚拟机的计划。</p>\n<p>不过dart团队没有解散，几年后，他们借助flutter，再次出现在公众面前。</p>\n<p>性能分析和写法的对比<br />flutter作为界面库（注意它只是界面库，dart语言是另一个项目），它唯一要干的事情就是渲染界面。不像HTML5，flutter界面库连视频、定位等都没有，就是一个纯排版引擎，绘制文字、按钮、图片等常用界面控件。</p>\n<p>这个排版引擎的特点是简单、高性能。</p>\n<p>在3大主流渲染引擎里，webview、react native/weex、flutter，复杂度依次降低，渲染性能依次上升。（uni-app是双渲染引擎，webview和weex都内置了，随便开发者使用切换）</p>\n<p>所以我们要清楚，提升性能是有代价的，你究竟想要灵活丰富的css3，还是想要固定flex模式排版，抑或是最简单但高性能的flutter排版？开发便利性和运行性能不可兼得。</p>\n<p>同时我们要明白，性能的差别，并不是因为Google的chrome团队、Android团队的技术比同公司的flutter团队差。而是flutter提供的布局写法是被限制过的，解析快，所以渲染快。</p>\n<p>但通过这种方式提升性能的代价，就是布局复杂的界面时，flutter的代码嵌套的让人崩溃。</p>\n<p>我们先举个例子，同样的界面，用HTML和flutter如何实现：</p>\n<p>&lt;div class=\"greybox\"&gt; <br />&lt;div class=redbox&gt; <br />smaple text <br />&lt;/div&gt; <br />&lt;/div&gt; <br /><br />.greybox { <br />display: flex; <br />align-items: center; <br />justify-content: center; <br />background-color: #e0e0e0; /* grey 300 */ <br />width: 320px; <br />height: 240px; <br />font: 18px <br />} <br />.redbox { <br />background-color: #ef5350; /* red 400 */ <br />padding: 16px; <br />color: #ffffff <br />} <br />var container = new Container( // grey box <br />child: new Center( <br />child: new Container( // red box <br />child: new Text( <br />\"smaple text\", <br />style: new TextStyle( <br />color: Colors.white, <br />fontSize: 18.0, <br />), <br />), <br />decoration: new BoxDecoration( <br />color: Colors.red[400], <br />), <br />padding: new EdgeInsets.all(16.0), <br />), <br />), <br />width: 320.0, <br />height: 240.0, <br />color: Colors.grey[300], <br />); <br />可以看出，从代码的写法来说，flutter没有tag和样式的说法，更没有选择器，从头到尾只有dart语言，它的界面控件是用dart代码new出来的，每个控件的样式，是在new的时候设置的json参数。</p>\n<p>如果我们要嵌套布局，就要不停的在dart里写child，同时在dart里给child们设样式参数。上面的代码，只是嵌套了1层，实际开发中，dom要嵌套好多层，想象那样的代码。。。所以大家都诟病dart是&ldquo;嵌套地狱&rdquo;。</p>\n<p>或者，你可以这么理解，这是一个只有js，没有html和css的浏览器。你需要用js createElement来创建元素，用js的style方法给每个element设style，反正就是不能写html和css代码。前端都已经发展到各种mvc等视图逻辑分离的架构了，也有了vue组件这种组件化模式方便用各种轮子快速完成界面。你是否能适应dart这种低效的界面开发模式？从开发模式来讲，这确实是一种倒退。</p>\n<p>浏览器的html提供了tag和样式分离的写法，还有各种各样的选择器，但其实这也是有代价的。它导致webview初始化时要同时先启动webkit排版引擎来解析这些编写随性的html、css，同时还要启动一个js引擎比如v8或jscore来解析里面的js。</p>\n<p>而dart就很简单，只启动一个dart引擎，解析严格的dart语法，它不会去操心有些标签未闭合要如何容错，不会判断宽度320后面是px还是rem或者是动态计算百分比。</p>\n<p>对比这2个引擎初始化时要干的事，差别简直太大了。</p>\n<p>所以从解析效率上，flutter肯定比webview要高。但从编码灵活性上，flutter写的代码，嗯，难看而低效！</p>\n<p>flutter使用的也是flex布局思想，这是一个强嵌套布局模型，比web常规排版引擎的嵌套更多。当界面复杂时，flutter的代码要嵌套几十层，每层的元素的json样式都和元素一起混写在dart代码里，让人崩溃。</p>\n<p>有人提出是否可以通过一种预编译的dsl来简化写法，让flutter的开发不这么痛苦。</p>\n<p>但这个难度太大了，从严格转换为松散是简单的，从松散转换为严格几乎是不可能的。</p>\n<p>什么意思呢？比如flutter代码转换web代码，是很简单的，flutter已经自带了这个功能。但是想反过来，那可难了。</p>\n<p>类似的还有，把typescript转为js是容易的，反之，不是绝对不可行，但会复杂到你宁愿去重写一套typescript代码。</p>\n<p>flutter的性能高，除了简单严格，还有一个特点，就是逻辑层与视图层统一，运行在同一套dart虚拟机下。</p>\n<p>我们知道rn和weex，也是原生渲染的，它们的性能高于webview。但同为原生渲染的，怎么会慢于flutter呢？其实不是原生渲染慢，而是js和原生通信慢。</p>\n<p>rn和weex都采用了独立的js引擎（iOS是jscore，Android是v8，最新版rn开始在Android上搞自己的js引擎），从js与dart的比较上，性能稍逊一筹。但这不是主要问题，主要问题是，rn、weex的js引擎和原生渲染层是两个运行环境。</p>\n<p>当js引擎联网获取到数据后，通知原生视图层更新界面时，有一个跨环境的通信折损。同样，当用户在屏幕上操作原生视图层时，要给js引擎发送通知，也会产生这个通信折损。</p>\n<p>不过这种性能差别，在大多数场景中，用户是感受不到的。比较影响的场景，是跟手式的js响应操作绘制帧动画。</p>\n<p>这方面，weex有个值得称赞的技术是BindingX，它可以预定义规则，让用户界面在原生层交互时通过预定义规则直接响应，而无需传递给js层。在需要短时间内来回通信的场景时，可以使用BindingX这类解决方案。它的性能和灵活性比rn更强了一些。</p>\n<p>说回来flutter，它只有一个dart引擎，没有来回通信产生的性能问题。不过任何事情都是有利有弊的，flutter在普通的界面绘制上效率虽然高，但一旦涉及原生的界面，反而会遇到更多问题。</p>\n<p>前面已经说过，flutter只是一个基础排版引擎，缺少很多能力，当我们需要在flutter界面上内嵌一个原生的视频播放扩展控件时（flutter没有视频播放能力），或者原生的高德地图sdk，那么在拖动视频进度时、拖动地图时，flutter一样会产生原生和dart之间的通信，造成性能损耗。</p>\n<p>事实上，由于flutter是在一个类canvas环境绘制的，想把一个原生控件嵌入flutter的布局里某些元素之间去排版，还不是一件容易做到的事情，坑很多。</p>\n<p>每个人都想要一个像css3那样灵活写法的布局引擎，他们给react native和weex提需求，给flutter提需求。殊不知，让这些产品团队实现了css3时，他们的性能优势已经不再了，他们相当于又实现了一遍webview。这种无意义的需求，他们是不会受理了。</p>\n<p>性能好，有个度，客观地讲，rn/weex调用原生渲染的性能，和flutter的渲染性能，在用户体验上并没有明显区别，甚至在很多场景下，和webview渲染的小程序也没有明显区别。</p>\n<p>也简单说说webview渲染小程序，为什么性能高，核心是预载。点击一个新页面时，webview是提前创建好的，不会走复杂的webkit、v8的初始化流程，连开发者的js代码，也是预载好的。所以点击新页面时，它的渲染速度和原生应用没什么差别。当然也有个坏处，就是启动慢。微信里启动小程序速度看着还行，其实是微信在启动小程序之前，就已经提前初始化了小程序运行环境。</p>\n<p>即便是排版引擎，ui库好用吗？<br />不管是rn还是flutter，有一个设计，很不中国化。它们在iOS和Android平台上，使用2套ui库。</p>\n<p>比如flutter，在iOS上写一个button，要用CupertinoButton，是iOS风格的控件，在Android上则要用RaisedButton，是Material风格的控件。</p>\n<p>rn也是如此，它的官方说法是：learn once，write anywhere。它都不敢说：write once，run anywhere。因为它确实要求开发者写2套代码。</p>\n<p>中国的开发者可没有这种习惯，中国的每个开发者，为了避免用户换手机后不会用自己的app，都会使用中性的设计。</p>\n<p>就连微信Android版，底部的tab也是仿iOS而不是Material风格（Material风格是把底tab放在顶部的，并且左右滑动，微信曾经有这样一个临时版本，因为被用户吐槽，很快就下掉了）。</p>\n<p>这种中外差异怎么造成的？</p>\n<p>国外Android手机，其手机主界面就是强烈的Material风格。用户在Android主界面习惯的风格和使用方式，如果启动一个App后不是这样，会导致用户不会用了。</p>\n<p>Google也一再给Android开发者强调，App必须使用Material风格。这其实也是一个防止用户切换脱离Android的策略设计。</p>\n<p>所以国外开发者的App，Android上都会遵循Material风格，当然，这种Material风格的App是上不了Apple的Appstore的。</p>\n<p>这就导致他们默认就是要写2套ui的，所以rn和flutter都是iOS、Android各自1套ui控件。</p>\n<p>但在中国，我们的国产Android Rom，根本不是Material风格，很多rom以仿iOS体验为卖点。</p>\n<p>所以中国的App，全都是贴近iOS的中性风格，中国的用户换了手机，不管是手机os本身，还是App的使用，都不会造成切换障碍。</p>\n<p>rn和flutter这种&ldquo;跨平台&rdquo;排版引擎，其跨平台性，对于中国开发者而言，又打了折扣。</p>\n<p>其实类似小程序那样的ui风格，是能够良好的跨iOS和Android的体验的，不管用什么手机，打开小程序都不会觉得有问题。</p>\n<p>uni-app默认也是这种通用ui风格。uni-app的开发者只需要写一套界面ui，就可以适应不同手机的用户，真正的 write once，run anywhere。</p>\n<p>动态性<br />webview、rn/weex，都有一个特点，可以远程动态载入js代码，可以更新本地的js代码。前端开发者认为动态性是天经地义的，但其实flutter并不支持。</p>\n<p>flutter是有编译优化概念的，如果它提供动态性支持，会影响它的性能。</p>\n<p>业内有些开发者，改造了flutter，用一个独立的v8/jscore来加载动态js代码，去操作flutter布局引擎的渲染。好像还有些人在追捧这样的方案，简直是闲得蛋疼。</p>\n<p>flutter本来没有跨环境通信的问题，结果又弄了一个js引擎进来搞出了通信问题，造成性能下降，还把包体积增加了很大，还不如直接用rn/weex。</p>\n<p>除了flutter，rn/weex/uni-app都可以动态热更新。</p>\n<p>跨平台排版引擎和跨平台应用开发引擎的区别<br />有些人说他们的App用rn/weex、flutter。但是具体用它们做了什么呢？</p>\n<p>是整个App用了它们，还是某个页面用了它们？</p>\n<p>一个页面跨平台，和一个应用跨平台，是完全不同的2个概念。</p>\n<p>webview、rn/weex、flutter全部是渲染引擎，webview因为HTML5的发展，还算是多了一些能力比如位置服务、多媒体等。而rn/weex、flutter真的只是一个纯粹的排版引擎，没有任何原生能力。</p>\n<p>如果一个原生应用里，某个不涉及原生能力的界面想跨平台，那么这几个引擎都可以，并且flutter的性能最高。所以能看到一些公司尝试把App中的个别原生交互较少页面使用flutter实现。</p>\n<p>但如果一个完整的应用，想用跨平台工具开发，那就不是排版引擎的范畴了，它需要应用开发引擎。</p>\n<p>什么是跨平台应用开发引擎？不但排版部分要跨平台，开发API也要跨平台。</p>\n<p>应用开发离不开os或三方sdk的能力调用，如果是单纯的排版引擎，一旦涉及os能力和sdk调用，就必须iOS、Android的工程师配合，编写不同的原生代码整合在一起。这就不跨平台了。</p>\n<p>Airbnb曾是React Native 框架的倡导者和开发者代表。但他们于2019年正式发公告，弃用了react native。</p>\n<p>原因是什么？</p>\n<p>很简单，react native并不能提升Airbnb的开发效率，反而降低了他们的效率。</p>\n<p>&ldquo;本来我们可以只维护Android和iOS两套代码，但现在我们要维护三套（指多了一套react native的js代码），这让我们很疲惫&rdquo; &ndash; aribnb</p>\n<p>开发者选用跨平台开发引擎，本来是为了提高效率、降低成本。Airbnb正是在实践了几年后，发现rn根本无法实现他选用跨平台引擎的初衷时，无奈放弃了rn，用原生开发重写。</p>\n<p>要想真的提升开发效率，降低开发成本，那么跨平台开发引擎，需要提供一个完整的应用开发平台，包含所有常用的应用开发能力的跨平台。在不常用的部分，提供插件市场以及免原生介入的插件使用方式。</p>\n<p>在react native、flutter的社区，也有不少三方提供的原生插件，但是连Airbnb这样的国外开发者对此都不满意。更何况对于很多中国开发者常用的场景，其对应的插件的质量、跨端性都难以商用。</p>\n<p>更麻烦的是如果你不会原生开发，就没法把这些插件与你的前端代码集成起来。</p>\n<p>uni-app，它的设计目标不是跨平台排版引擎，而是跨平台应用开发引擎。</p>\n<p>所以uni-app的排版部分，可以选择小程序强化webview引擎和weex引擎，可根据自己的需求切换。而能力层面，uni-app提供了htmlplus API、Native.js、插件市场，解决了原生能力js化的问题。</p>\n<p>uni-app让开发者真的不用懂原生开发就能做出完整的跨平台应用。遇到极个别的需求，开发者也可以去插件市场找人订做一个原生插件，自己仍然使用js来集成，仍然可以云端直接打包。</p>\n<p>技术学习成本和难度<br />rn，要求开发者学习react，要求精通flex布局，要求原生开发协作。</p>\n<p>flutter，要求开发者学习dart，了解dart和flutter的API、要求精通flex布局，要求原生开发协作。</p>\n<p>weex已经内嵌到uni-app中，就不单独提了。</p>\n<p>uni-app，要求开发者学习vue，了解小程序。</p>\n<p>很明显uni-app的学习成本太低了，它没有附加专有技术，全部使用公共技术。</p>\n<p>学习成本和难度，直接意味着：开发成本、招聘成本、上线速度、上线风险。</p>\n<p>另外，dart究竟值不值得学，是一个大问题。</p>\n<p>Google的天才工程师也发明了go语言，它确实有很多理论优势，但实际上市场的主流，仍然是c和c++。</p>\n<p>生态<br />任何开发引擎，都离不开生态。</p>\n<p>对于国外的开发者，rn、flutter的生态肯定比uni-app好，比如facebook登陆分享、Google地图等。</p>\n<p>但对于国内的开发者，那是反过来的，中国开发者需要的全端推送（UniPush集成了iOS、华为、小米、OPPO等众多原厂推送）、各种国内登陆、支付、分享SDK、各种国内地图、各种ui库、以及Echart图表等，都是在uni-app体系里，这方面生态可比rn、flutter丰富多了。</p>\n<p>其他端的跨端性<br />flutter和rn，都是支持web技术的。但都是仅限于普通界面排版，涉及定位、摄像头、相册什么的，是要单独写代码的。</p>\n<p>另外flutter的H5版，嗯，作为中国开发者，你不会想要一个如此浓郁的Material风格的H5版的。。。</p>\n<p>更何况这个Material ui库大的很，编译出来的H5版要十几M的体积。</p>\n<p>uni-app的H5端是包含完善的能力引擎的，丰富能力都可以直接跨端使用，风格也是跨端风格。uni-app的H5引擎体积只有1百K，gzip后只剩下30k（不含vue、vue rooter），比其他工具的引擎体积要小的多。</p>\n<p>另外，中国离不开小程序，rn、flutter官方都不会支持小程序，由于架构差异太大，国内三方也做不到把rn代码良好的编译为小程序代码。uni-app则可以一套代码，同时编译为iOS、Android、H5、微信小程序、支付宝小程序、百度小程序、头条小程序、QQ小程序。</p>\n<p>结论<br />每种技术的诞生，有其背后公司的目的。</p>\n<p>但凡没有明确公司战略的技术，除非是特别简单的技术，否则很难商用，因为为了商用要投入公司非常多资源。</p>\n<p>flutter诞生的目的，是为了Fuchsia OS，是为了在下一个互联网大潮，即万物互联的物联网年代，提供一个类似Android在移动互联网位置的垄断性操作系统。</p>\n<p>因为Google已经很明确不会在下一个时代使用Android+java的路线了。</p>\n<p>至于在Android上去java化，那是Kotlin的使命，与flutter无关。</p>\n<p>跨iOS和Android平台开发，这不是Google的战略目标。</p>\n<p>但万物互联何时到来？Fuchsia OS何时流行？这在现实中是一个问号，在Google内部，也只是战略储备项目。</p>\n<p>一个语言的流行，不是一件简单的事情，不是有优点，就会流行，它需要天时地利人和。</p>\n<p>6年前我们就知道dart比js更好，dart不应该消亡，但想成为主流技术，太难太难了。</p>\n<p>同样我们也知道go比c++更好，但go还是起不来。</p>\n<p>想靠flutter驱动dart流行是不现实的，甚至是反过来的。跨iOS、Android开发在国外不是主流市场，这点价值造就不出一个这么难建的生态。</p>\n<p>所以dart能否流行，是要打一个大大的问号的，它可能会像go语言一样，叫好不叫座。</p>\n<p>写了这么多，最后总结下flutter与uni-app的比较：</p>\n<p>flutter的相对优势：<br />性能好一丢丢。比rn有优势，但比拥有bindingx的weex/uni-app，在实际开发中没有很明显的差距。<br />flutter的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />嵌套地狱，代码难看难维护<br />不支持热更新<br />目前质量和成熟度很低，github上的issue有5k+，很容易掉坑里<br />原生可视控件融合不好，比如webview、video、map<br />ui库不适合国情<br />学习成本高<br />dart未来扑朔迷离<br />再总结下rn和uni-app的比较</p>\n<p>rn的相对优势：<br />rn的坑虽然比weex的少，但uni-app已经填了weex的很多坑。这方面差别不大。<br />rn的生态虽然比weex丰富。但uni-app是反过来的，uni-app的国内应用生态丰富度超过了rn。<br />rn的app冷启动比uni-app快。这个问题uni-app已经内部改进完毕，下个版本发布就能解决。<br />rn是纯单页的，嵌入原生App比较灵活。而uni-app是应用整体的概念，如果要内嵌入其他原生应用的话，要求原生应用内嵌uni-app应用整体进来<br />rn的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />不支持小程序，发布到h5也无法直接发<br />ui库不适合国情，learn once，write anywhere<br />学习成本高，用人成本高，不利于开发商降低开发成本<br />rn是纯单页应用，如果一个应用的页面很多，用rn写会很崩溃，变量污染和干扰严重。而weex/uni-app支持多页面，页面之间上下文隔离，写页面较多的大型应用更合适<br />另外react在中国的市场占有率远不如vue。这也是中国与国外不同的特色情况。</p>","blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},"msg":"操作成功！"}
2020-07-11 08:44:11.951 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:44:11.952 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:44:11.952 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:11.952 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:44:11.953 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365631460507648)]
2020-07-11 08:44:28.626 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/collection
2020-07-11 08:44:28.627 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:44:28.629 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:28.630 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.collection
2020-07-11 08:44:28.631 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogCollection(collectionId=null, blogId=1264365631460507648, blog=null, userId=null, user=null, collectionTime=null)]
2020-07-11 08:44:31.000 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:44:31.000 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:44:31.001 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:44:31.003 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:44:31.004 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365631460507648)]
2020-07-11 08:45:03.565 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-07-11 08:45:03.566 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:45:03.566 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:45:03.567 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-07-11 08:45:03.567 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365631460507648)]
2020-07-11 08:45:10.990 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:45:10.991 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:45:10.992 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:45:10.992 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:45:10.993 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:45:19.474 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:45:19.475 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:45:19.476 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:45:19.477 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:45:19.478 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:45:30.628 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:45:30.629 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:45:30.631 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:45:30.631 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:45:30.633 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=1111111111111111, commentUser=null, user=null, commentBlog=1264365631460507648, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:46:18.369 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 11504 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 08:46:18.378 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 08:46:21.643 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 08:46:21.914 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 251ms. Found 4 MongoDB repository interfaces.
2020-07-11 08:46:22.725 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:22.979 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$b3b54991] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:23.078 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:23.104 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9a08880d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:23.115 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$80e02c4f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:23.129 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 08:46:23.262 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:23.311 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:23.378 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.148 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 08:46:28.149 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.282 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.693 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.713 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.738 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.750 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.753 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.760 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.761 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.785 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#a92be4f' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.787 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#a92be4f' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.843 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5e519ad3' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.849 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#bc042d5' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.856 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#bc042d5' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.892 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.897 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.901 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:28.906 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.032 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 08:46:29.033 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 08:46:29.095 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.113 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.130 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.258 INFO  [cluster-ClusterId{value='5f090be53b689f2a13638b62', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:475}] to 39.97.183.122:27017
2020-07-11 08:46:29.269 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.304 INFO  [cluster-ClusterId{value='5f090be53b689f2a13638b62', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=42001529}
2020-07-11 08:46:29.307 INFO  [cluster-ClusterId{value='5f090be53b689f2a13638b62', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 08:46:29.315 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.416 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.513 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.904 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.922 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.973 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#6a6c7f42' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.974 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#6a6c7f42' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.978 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#60f21960' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.980 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#423a0e1d' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.980 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#423a0e1d' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:29.999 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:30.001 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:30.048 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:30.054 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:30.133 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:30.192 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 08:46:30.629 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 08:46:30.640 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 08:46:30.641 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 08:46:30.641 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 08:46:30.833 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 08:46:30.833 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 12276 ms
2020-07-11 08:46:33.311 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 08:46:33.343 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-11 08:46:33.345 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.394 seconds (JVM running for 19.647)
2020-07-11 08:47:02.270 INFO  [http-nio-1001-exec-4]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-11 08:47:02.271 INFO  [http-nio-1001-exec-4]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-07-11 08:47:02.477 INFO  [http-nio-1001-exec-4]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 205 ms
2020-07-11 08:47:02.686 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:47:02.687 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:02.688 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:02.689 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:47:02.690 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:47:02.690 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:02.691 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:47:02.695 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:02.697 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:47:02.697 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:02.698 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:47:02.698 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:02.697 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:02.701 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:47:02.701 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:03.084 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 398
2020-07-11 08:47:03.100 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:47:03.101 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 412
2020-07-11 08:47:03.116 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:47:03.117 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:47:03.118 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:03.118 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:47:03.119 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:47:03.145 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-07-11 08:47:03.578 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 462
2020-07-11 08:47:03.587 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:26:54"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:47:17.603 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:47:17.605 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:47:17.605 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:17.606 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:47:17.607 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:47:17.826 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 223
2020-07-11 08:47:17.833 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"5E45C2BE7110BD09AD8853AE762D952E"},"msg":"操作成功！"}
2020-07-11 08:47:18.404 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:47:18.405 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:47:18.405 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:18.406 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:47:18.406 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:47:18.690 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 286
2020-07-11 08:47:18.692 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:26:54"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:47:18.710 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:47:18.711 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:47:18.711 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:18.712 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:47:18.716 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:18.741 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:47:18.741 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:47:18.742 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:47:18.742 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:18.742 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:18.743 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:18.743 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:18.743 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:18.744 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:47:18.745 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:18.745 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:47:18.745 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:18.746 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:18.747 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:47:18.749 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:18.812 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 102
2020-07-11 08:47:18.813 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogRead":8,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-07-11 08:47:18.901 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 160
2020-07-11 08:47:18.902 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:47:19.565 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 823
2020-07-11 08:47:19.589 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:47:26.442 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 08:47:26.442 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:26.443 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:26.445 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:47:26.445 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:47:26.448 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264726600279891968
2020-07-11 08:47:26.448 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:26.449 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:26.449 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:47:26.450 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:47:26.716 INFO  [http-nio-1001-exec-4]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:476}] to 39.97.183.122:27017
2020-07-11 08:47:26.751 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264726600279891968
2020-07-11 08:47:26.752 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 08:47:26.752 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:26.753 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:26.753 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:26.753 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:26.753 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:47:26.753 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:47:26.754 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:47:26.754 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:47:26.864 INFO  [http-nio-1001-exec-1]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:4, serverValue:477}] to 39.97.183.122:27017
2020-07-11 08:47:26.874 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 426
2020-07-11 08:47:26.874 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}
2020-07-11 08:47:26.879 INFO  [http-nio-1001-exec-3]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:3, serverValue:478}] to 39.97.183.122:27017
2020-07-11 08:47:26.899 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 147
2020-07-11 08:47:26.900 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-07-11 08:47:26.959 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 208
2020-07-11 08:47:26.960 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 08:47:26.974 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 532
2020-07-11 08:47:26.986 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 08:47:32.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/collection
2020-07-11 08:47:32.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:47:32.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:32.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.collection
2020-07-11 08:47:32.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogCollection(collectionId=null, blogId=1264726600279891968, blog=null, userId=null, user=null, collectionTime=null)]
2020-07-11 08:47:33.822 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 902
2020-07-11 08:47:33.823 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"收藏成功"}
2020-07-11 08:47:33.987 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 08:47:33.988 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:33.989 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:33.990 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:47:33.990 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:47:34.027 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 41
2020-07-11 08:47:34.028 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 08:47:36.172 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-07-11 08:47:36.173 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:47:36.173 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:36.174 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-07-11 08:47:36.174 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=333333333333, commentUser=null, user=null, commentBlog=1264726600279891968, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-07-11 08:47:36.599 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 428
2020-07-11 08:47:36.600 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"评论成功"}
2020-07-11 08:47:36.773 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 08:47:36.774 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:36.775 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:36.777 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:47:36.777 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:47:36.858 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 85
2020-07-11 08:47:36.860 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 08:47:52.488 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 08:47:52.488 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:47:52.488 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:47:52.488 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 08:47:52.489 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:47:52.710 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 222
2020-07-11 08:47:52.712 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 08:48:04.303 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:48:04.304 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:04.305 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:04.306 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:48:04.307 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:48:04.307 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:48:04.308 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:04.309 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:04.309 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:48:04.310 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:48:04.550 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:48:04.550 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:48:04.551 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:04.551 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:48:04.552 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:48:04.554 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:48:04.554 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:48:04.555 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:04.555 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:48:04.556 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:48:04.597 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 290
2020-07-11 08:48:04.597 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-07-11 08:48:04.661 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 107
2020-07-11 08:48:04.661 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:48:04.729 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 426
2020-07-11 08:48:04.729 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:48:22.511 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:48:22.512 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:22.512 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:48:22.513 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:22.513 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:22.513 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:48:22.513 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:22.513 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:48:22.514 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:48:22.514 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:48:22.529 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:48:22.530 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:48:22.531 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:22.532 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:48:22.533 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:48:22.535 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:48:22.536 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:48:22.537 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:22.538 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:48:22.538 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:48:22.599 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 87
2020-07-11 08:48:22.600 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-07-11 08:48:22.634 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 105
2020-07-11 08:48:22.635 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:48:22.746 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 235
2020-07-11 08:48:22.747 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:48:33.505 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:48:33.506 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:33.507 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:33.507 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:48:33.508 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:48:33.857 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 352
2020-07-11 08:48:33.858 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 08:48:35.460 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:48:35.461 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:35.461 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:35.462 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:48:35.462 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:48:35.550 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 90
2020-07-11 08:48:35.551 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 08:48:41.005 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:48:41.006 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:41.006 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:41.007 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:48:41.008 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:48:41.080 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 75
2020-07-11 08:48:41.081 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 08:48:48.198 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:48:48.198 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:48:48.199 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:48:48.199 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:48:48.199 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:48:48.284 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 86
2020-07-11 08:48:48.285 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 08:49:06.443 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:49:06.444 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:49:06.444 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:06.445 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:49:06.445 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:49:06.600 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 157
2020-07-11 08:49:06.600 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 08:49:23.708 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 08:49:23.709 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:49:23.710 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:23.711 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 08:49:23.712 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 08:49:23.890 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 182
2020-07-11 08:49:23.891 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"737294A3A87872B9A9D75C8F588B82C5"},"msg":"操作成功！"}
2020-07-11 08:49:24.341 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:49:24.342 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:49:24.343 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:24.343 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:49:24.344 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:49:24.555 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 214
2020-07-11 08:49:24.556 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:49:24.650 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 08:49:24.653 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 08:49:24.654 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:49:24.651 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:49:24.654 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:24.656 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 08:49:24.657 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:24.657 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:24.658 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 08:49:24.659 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 08:49:24.659 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:24.660 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:49:24.660 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 08:49:24.660 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:24.660 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:49:24.660 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 08:49:24.661 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:24.661 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:24.662 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 08:49:24.662 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:24.799 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 149
2020-07-11 08:49:24.800 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 08:49:24.810 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 150
2020-07-11 08:49:24.810 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:49:24.811 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 158
2020-07-11 08:49:24.811 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-07-11 08:49:27.279 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 08:49:27.280 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:49:27.281 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:27.281 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 08:49:27.281 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:27.648 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 369
2020-07-11 08:49:27.654 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":4,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-10 05:29:41","version":6},"msg":"操作成功！"}
2020-07-11 08:49:30.594 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-07-11 08:49:30.595 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:49:30.596 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:30.596 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-07-11 08:49:30.597 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:30.699 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 105
2020-07-11 08:49:30.704 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}
2020-07-11 08:49:35.655 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:49:35.656 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:49:35.656 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:35.657 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:49:35.657 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:35.967 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 312
2020-07-11 08:49:35.974 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:49:54.687 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:49:54.687 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:49:54.688 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:54.688 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:49:54.688 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:49:55.063 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 376
2020-07-11 08:49:55.063 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:49:57.948 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:49:57.949 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:49:57.951 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:49:57.951 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:49:57.952 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:49:58.065 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 117
2020-07-11 08:49:58.066 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:50:24.026 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:50:24.028 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:50:24.028 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:50:24.028 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:50:24.028 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:50:24.298 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 272
2020-07-11 08:50:24.300 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:50:45.693 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:50:45.694 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:50:45.694 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:50:45.695 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:50:45.695 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:50:45.856 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 163
2020-07-11 08:50:45.857 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:50:58.722 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:50:58.723 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:50:58.723 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:50:58.723 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:50:58.724 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=1}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:50:59.188 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 466
2020-07-11 08:50:59.189 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{"typeId":"1"},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:51:09.424 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:51:09.425 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:51:09.425 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:09.426 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:51:09.426 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:51:09.703 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 279
2020-07-11 08:51:09.705 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:51:10.973 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:51:10.974 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:51:10.974 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:10.975 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:51:10.975 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=2}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:51:11.213 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 240
2020-07-11 08:51:11.214 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"}],"pageSize":10,"params":{"typeId":"2"},"sortColumn":"created_time","sortMethod":"desc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:51:16.096 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:51:16.097 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:51:16.097 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:16.099 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:51:16.099 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:51:16.198 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 102
2020-07-11 08:51:16.199 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:51:24.507 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:51:24.507 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:51:24.508 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:24.508 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:51:24.508 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:51:24.892 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 385
2020-07-11 08:51:24.893 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:51:35.507 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:51:35.508 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:51:35.510 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:35.511 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:51:35.512 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:51:35.603 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 96
2020-07-11 08:51:35.604 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:51:40.346 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:51:40.348 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:51:40.348 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:40.348 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:51:40.348 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:51:40.980 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 634
2020-07-11 08:51:40.980 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:51:46.527 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:51:46.528 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:51:46.529 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:46.530 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:51:46.530 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:51:46.848 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 321
2020-07-11 08:51:46.849 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:51:48.402 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:51:48.402 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:51:48.403 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:51:48.403 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:51:48.403 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=2}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:51:48.660 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 258
2020-07-11 08:51:48.662 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"}],"pageSize":10,"params":{"typeId":"2"},"sortColumn":"created_time","sortMethod":"desc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:52:01.831 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:52:01.831 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:52:01.832 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:52:01.832 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:52:01.832 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:52:02.095 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 265
2020-07-11 08:52:02.096 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:52:04.549 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:52:04.550 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:52:04.550 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:52:04.551 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:52:04.551 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=1}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:52:04.938 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 389
2020-07-11 08:52:04.939 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{"typeId":"1"},"sortColumn":"created_time","sortMethod":"desc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:53:48.642 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264365258452664320
2020-07-11 08:53:48.644 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:53:48.646 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:53:48.648 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:53:48.648 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-07-11 08:53:48.650 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365258452664320
2020-07-11 08:53:48.651 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:53:48.653 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:53:48.653 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:53:48.654 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264365258452664320
2020-07-11 08:53:48.656 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:53:48.656 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:53:48.657 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:53:48.659 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264365258452664320
2020-07-11 08:53:48.660 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:53:48.660 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-07-11 08:53:48.654 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-07-11 08:53:48.661 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:53:48.663 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:53:48.663 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-07-11 08:53:48.707 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 53
2020-07-11 08:53:48.708 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-07-11 08:53:48.743 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 86
2020-07-11 08:53:48.744 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-07-11 08:53:48.837 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 187
2020-07-11 08:53:48.837 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 08:53:49.126 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 484
2020-07-11 08:53:49.126 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},"msg":"操作成功！"}
2020-07-11 08:53:54.103 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:53:54.104 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:53:54.104 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:53:54.105 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:53:54.105 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:53:54.363 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 260
2020-07-11 08:53:54.363 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:55:13.209 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 08:55:13.213 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:55:13.214 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:13.215 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 08:55:13.216 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:55:13.457 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 248
2020-07-11 08:55:13.457 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 08:55:14.865 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 08:55:14.866 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:55:14.866 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:14.867 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 08:55:14.867 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:55:15.621 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 756
2020-07-11 08:55:15.622 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":5,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-11 00:49:29","version":7},"msg":"操作成功！"}
2020-07-11 08:55:17.590 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:55:17.590 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:55:17.590 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:17.591 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:55:17.591 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:55:17.887 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 297
2020-07-11 08:55:17.888 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:47:38"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:55:22.073 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264726600279891968
2020-07-11 08:55:22.074 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:55:22.075 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:22.076 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:55:22.078 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:55:22.381 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 08:55:22.382 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:55:22.383 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:22.384 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:55:22.386 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:55:22.398 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264726600279891968
2020-07-11 08:55:22.398 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 08:55:22.399 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:55:22.399 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:55:22.400 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:22.400 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:22.401 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:55:22.401 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:55:22.402 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:55:22.402 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:55:22.468 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 70
2020-07-11 08:55:22.469 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 08:55:22.495 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 97
2020-07-11 08:55:22.496 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 08:55:22.502 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 121
2020-07-11 08:55:22.503 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 08:55:22.558 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 485
2020-07-11 08:55:22.561 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":10,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}
2020-07-11 08:55:29.356 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:55:29.357 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:55:29.357 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:29.357 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:55:29.358 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:55:29.857 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 501
2020-07-11 08:55:29.858 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":10,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:55:24"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:55:44.799 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-07-11 08:55:44.799 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:55:44.800 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:44.801 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-07-11 08:55:44.801 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:55:44.912 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 112
2020-07-11 08:55:44.912 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}
2020-07-11 08:55:52.829 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:55:52.829 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:55:52.830 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:55:52.831 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:55:52.832 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:55:53.123 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 294
2020-07-11 08:55:53.124 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":10,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:55:24"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:56:48.814 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264726600279891968
2020-07-11 08:56:48.815 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:56:48.815 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:56:48.816 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 08:56:48.817 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:56:49.142 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 08:56:49.143 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264726600279891968
2020-07-11 08:56:49.144 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:56:49.143 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:56:49.145 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:56:49.145 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:56:49.146 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:56:49.146 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:56:49.148 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 08:56:49.146 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 08:56:49.149 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:56:49.149 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:56:49.149 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:56:49.149 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 08:56:49.149 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:56:49.205 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 57
2020-07-11 08:56:49.206 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 08:56:49.211 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 68
2020-07-11 08:56:49.211 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 08:56:49.230 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 88
2020-07-11 08:56:49.231 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 08:56:49.259 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 445
2020-07-11 08:56:49.259 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}
2020-07-11 08:57:00.386 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/good
2020-07-11 08:57:00.388 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:57:00.388 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:00.388 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.good
2020-07-11 08:57:00.388 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[CommentGoods(id=null, userId=null, commentId=1281751963203772416)]
2020-07-11 08:57:00.826 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 440
2020-07-11 08:57:00.827 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"点赞成功"}
2020-07-11 08:57:01.080 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 08:57:01.081 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:57:01.082 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:01.083 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 08:57:01.083 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 08:57:01.172 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 92
2020-07-11 08:57:01.174 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":true,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 08:57:27.827 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:57:27.828 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:57:27.829 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:27.829 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:57:27.830 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:57:28.224 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 397
2020-07-11 08:57:28.224 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:57:30.141 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:57:30.142 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:57:30.143 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:30.143 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:57:30.144 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37)], params={}, sortColumn=blog_collection, sortMethod=desc)]
2020-07-11 08:57:30.422 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 281
2020-07-11 08:57:30.423 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"}],"pageSize":10,"params":{},"sortColumn":"blog_collection","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:57:34.663 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:57:34.663 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:57:34.664 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:34.665 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:57:34.667 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08)], params={}, sortColumn=blog_read, sortMethod=desc)]
2020-07-11 08:57:35.077 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 414
2020-07-11 08:57:35.078 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:57:36.847 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:57:36.848 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:57:36.850 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:36.850 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:57:36.851 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-07-11 08:57:37.140 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 293
2020-07-11 08:57:37.158 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:57:41.062 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:57:41.063 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:57:41.064 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:41.064 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:57:41.067 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08)], params={}, sortColumn=blog_goods, sortMethod=desc)]
2020-07-11 08:57:41.361 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 299
2020-07-11 08:57:41.362 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:57:44.512 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 08:57:44.513 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 08:57:44.514 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:57:44.515 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 08:57:44.518 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51)], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 08:57:44.835 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 323
2020-07-11 08:57:44.836 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 08:58:50.554 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 08:58:50.555 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 08:58:50.556 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 08:58:50.558 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 08:58:50.559 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 08:58:50.766 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 212
2020-07-11 08:58:50.767 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 09:00:07.386 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:00:07.388 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:00:07.390 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:00:07.390 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:00:07.391 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:00:07.701 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 315
2020-07-11 09:00:07.702 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:04:00.689 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 09:04:00.701 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:04:00.703 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 0:0:0:0:0:0:0:1
2020-07-11 09:04:00.704 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 09:04:00.705 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 09:04:01.503 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 815
2020-07-11 09:04:01.505 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"1134DC2D2190328BF40334911B2B1410"},"msg":"操作成功！"}
2020-07-11 09:19:33.626 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 09:19:33.640 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:19:33.650 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:19:33.653 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 09:19:33.658 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:19:35.076 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1451
2020-07-11 09:19:35.119 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":6,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-11 00:55:17","version":8},"msg":"操作成功！"}
2020-07-11 09:19:38.490 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:19:38.557 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:19:38.558 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:19:38.558 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:19:38.559 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:19:39.442 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 952
2020-07-11 09:19:39.481 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:21:14.001 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:21:14.003 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:21:14.004 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:21:14.005 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:21:14.006 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:21:14.010 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 09:21:14.011 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:21:14.014 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:21:14.015 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 09:21:14.016 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:21:14.016 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 09:21:14.016 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:21:14.017 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:21:14.017 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 09:21:14.018 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:21:14.065 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 09:21:14.066 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:21:14.067 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:21:14.067 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 09:21:14.069 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:21:14.120 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 09:21:14.121 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:21:14.121 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:21:14.122 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 09:21:14.123 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:21:14.265 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 249
2020-07-11 09:21:14.266 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 09:21:14.283 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 273
2020-07-11 09:21:14.283 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:21:14.417 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 297
2020-07-11 09:21:14.418 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 09:21:14.690 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 689
2020-07-11 09:21:14.691 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:27:46.050 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 09:27:46.064 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:27:46.065 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:27:46.065 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 09:27:46.066 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:27:46.319 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 270
2020-07-11 09:27:46.322 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 09:28:42.616 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:28:42.617 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:28:42.617 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:28:42.617 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:28:42.618 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={blogTitle=注解版poi操作工具}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:28:43.035 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 419
2020-07-11 09:28:43.036 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{"blogTitle":"注解版poi操作工具"},"sortColumn":"created_time","sortMethod":"desc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-07-11 09:29:18.729 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:29:18.729 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:29:18.730 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:29:18.730 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:29:18.731 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={blogTitle=注解版poi操作工具}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:29:19.297 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 568
2020-07-11 09:29:19.298 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{"blogTitle":"注解版poi操作工具"},"sortColumn":"created_time","sortMethod":"desc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-07-11 09:29:30.684 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:29:30.685 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:29:30.686 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:29:30.686 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:29:30.686 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={blogTitle=注解版poi操作工具}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:29:31.032 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 348
2020-07-11 09:29:31.033 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{"blogTitle":"注解版poi操作工具"},"sortColumn":"created_time","sortMethod":"desc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-07-11 09:29:32.827 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:29:32.828 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:29:32.828 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:29:32.829 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:29:32.829 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:29:33.093 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 266
2020-07-11 09:29:33.094 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:29:36.176 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:29:36.179 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:29:36.180 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:29:36.180 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:29:36.181 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37)], params={}, sortColumn=blog_goods, sortMethod=desc)]
2020-07-11 09:29:36.452 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 276
2020-07-11 09:29:36.453 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:29:37.229 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:29:37.230 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:29:37.230 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:29:37.231 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:29:37.231 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-07-11 09:29:37.643 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 414
2020-07-11 09:29:37.645 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:29:39.067 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:29:39.068 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:29:39.069 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:29:39.069 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:29:39.069 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08)], params={}, sortColumn=blog_read, sortMethod=desc)]
2020-07-11 09:29:39.369 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 302
2020-07-11 09:29:39.370 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:30:23.436 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/get/1264726600279891968
2020-07-11 09:30:23.436 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:30:23.437 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 0:0:0:0:0:0:0:1
2020-07-11 09:30:23.437 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getById
2020-07-11 09:30:23.438 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 09:30:23.694 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 258
2020-07-11 09:30:23.695 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":16},"msg":"操作成功！"}
2020-07-11 09:33:45.574 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 09:33:45.578 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:33:45.578 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:33:45.579 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 09:33:45.579 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:33:45.689 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 115
2020-07-11 09:33:45.690 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 09:33:48.981 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:33:48.981 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:33:48.981 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:33:48.981 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:33:48.982 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:33:49.260 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 279
2020-07-11 09:33:49.261 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:33:51.394 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 09:33:51.394 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:33:51.395 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:33:51.395 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 09:33:51.396 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:33:51.519 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 125
2020-07-11 09:33:51.519 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 09:34:57.848 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 09:34:57.849 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:34:57.850 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:34:57.850 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 09:34:57.850 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:34:58.953 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1105
2020-07-11 09:34:58.954 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":7,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-11 01:19:37","version":9},"msg":"操作成功！"}
2020-07-11 09:41:10.331 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 09:41:10.333 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:41:10.334 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:41:10.334 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 09:41:10.334 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:41:11.067 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 736
2020-07-11 09:41:11.069 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 09:42:49.565 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:42:49.566 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:42:49.566 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:42:49.567 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:42:49.567 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:42:50.982 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1417
2020-07-11 09:42:50.983 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:43:28.134 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 09:43:28.134 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:43:28.135 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:43:28.135 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 09:43:28.135 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:43:29.577 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1443
2020-07-11 09:43:29.578 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 09:44:16.273 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:44:16.274 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:44:16.275 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:16.275 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:44:16.275 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 09:44:16.276 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:44:16.276 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:44:16.276 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:16.277 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 09:44:16.277 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:44:16.505 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 09:44:16.506 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:44:16.507 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:16.507 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 09:44:16.507 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 09:44:16.508 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:44:16.508 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:44:16.509 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:16.510 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 09:44:16.511 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:44:16.688 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 413
2020-07-11 09:44:16.689 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 09:44:17.145 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 638
2020-07-11 09:44:17.146 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 09:44:18.080 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1807
2020-07-11 09:44:18.081 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:44:29.777 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:44:29.778 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:44:29.779 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:29.779 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:44:29.780 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:44:30.234 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 457
2020-07-11 09:44:30.235 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:44:30.366 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:44:30.367 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:44:30.368 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:30.369 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:44:30.369 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:44:30.991 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 625
2020-07-11 09:44:30.991 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:44:32.693 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:44:32.695 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:44:32.695 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:32.696 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:44:32.696 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:44:33.466 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 773
2020-07-11 09:44:33.467 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:44:54.033 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:44:54.034 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:44:54.034 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:54.034 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:44:54.034 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:44:55.085 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1052
2020-07-11 09:44:55.086 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:44:56.157 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:44:56.158 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:44:56.159 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:44:56.159 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:44:56.160 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:44:56.542 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 385
2020-07-11 09:44:56.543 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:45:54.419 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:45:54.420 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:45:54.421 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:45:54.422 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:45:54.423 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:45:54.978 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:45:54.980 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:45:54.981 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:45:54.981 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:45:54.981 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:46:01.335 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:46:01.356 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:46:01.357 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:46:01.358 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:46:01.358 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:46:09.637 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 8302
2020-07-11 09:46:09.638 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:46:09.861 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 14883
2020-07-11 09:46:09.862 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:46:10.136 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 15717
2020-07-11 09:46:10.137 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:46:36.624 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:46:36.625 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:46:36.625 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:46:36.626 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:46:36.626 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:46:39.372 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:46:39.372 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:46:39.373 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:46:39.373 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:46:39.374 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:46:49.743 INFO  [Druid-ConnectionPool-Create-1485179287]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:46:50.121 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:46:50.122 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:46:50.122 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:46:50.122 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:46:50.123 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:46:58.714 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 22090
2020-07-11 09:46:58.714 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:46:59.789 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 20417
2020-07-11 09:46:59.791 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:47:00.710 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 10589
2020-07-11 09:47:00.711 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:47:42.731 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 09:47:42.732 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:47:42.732 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:47:42.733 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:47:42.733 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 09:47:42.734 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:47:42.734 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 09:47:42.735 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:47:42.735 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:47:42.736 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 09:47:42.736 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:47:42.736 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:47:42.736 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:47:42.743 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:47:42.744 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:47:42.911 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 09:47:42.912 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 09:47:42.912 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:47:42.913 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:47:42.913 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:47:42.913 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:47:42.913 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 09:47:42.913 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 09:47:42.914 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:47:42.914 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:47:44.331 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1597
2020-07-11 09:47:44.332 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:47:44.339 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1608
2020-07-11 09:47:44.340 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 09:47:45.510 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2598
2020-07-11 09:47:45.511 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 09:47:49.883 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7151
2020-07-11 09:47:49.884 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:47:52.867 INFO  [Druid-ConnectionPool-Create-1485179287]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:47:59.260 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:47:59.261 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:47:59.262 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:47:59.263 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:47:59.264 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:48:04.177 INFO  [Druid-ConnectionPool-Create-1485179287]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:48:16.479 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:48:16.480 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:48:16.482 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:48:16.483 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:48:16.483 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:48:18.229 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:48:18.230 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:48:18.230 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:48:18.231 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:48:18.231 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:48:18.794 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:48:18.795 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:48:18.796 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:48:18.796 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:48:18.796 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:48:19.009 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 19749
2020-07-11 09:48:19.011 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:48:19.090 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2611
2020-07-11 09:48:19.091 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:48:29.876 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 11647
2020-07-11 09:48:29.877 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:48:30.219 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 11425
2020-07-11 09:48:30.219 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"8873B170996B6EBBC0F565A72ABD38CB"},"msg":"操作成功！"}
2020-07-11 09:50:35.443 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 11016 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 09:50:35.558 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 09:50:37.699 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 09:50:37.913 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 199ms. Found 4 MongoDB repository interfaces.
2020-07-11 09:50:38.683 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:50:38.911 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$f5eef8a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:50:38.996 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:50:39.022 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$dc423721] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:50:39.029 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$c319db63] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:50:39.042 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 09:50:39.139 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:50:39.169 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:50:39.209 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:06.812 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 09:51:06.813 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:06.911 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.312 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.322 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.339 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.345 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.348 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.355 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.357 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.388 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4f0f7849' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.394 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4f0f7849' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.461 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#12fcc71f' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.466 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#12e0f1cb' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.472 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#12e0f1cb' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.504 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.507 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.509 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.513 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.654 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 09:51:07.655 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 09:51:07.720 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.744 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.762 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.893 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:07.934 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.023 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.113 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.525 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.544 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.550 INFO  [cluster-ClusterId{value='5f091b0b48e675014d416f67', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:482}] to 39.97.183.122:27017
2020-07-11 09:51:08.603 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#d7bbf12' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.604 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#d7bbf12' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.606 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7944b8b4' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.608 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5f7eee96' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.609 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5f7eee96' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.627 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.628 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.658 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.661 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.696 INFO  [cluster-ClusterId{value='5f091b0b48e675014d416f67', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=143523962}
2020-07-11 09:51:08.697 INFO  [cluster-ClusterId{value='5f091b0b48e675014d416f67', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 09:51:08.712 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:08.759 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 09:51:09.336 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 09:51:09.352 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 09:51:09.353 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 09:51:09.353 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 09:51:09.607 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 09:51:09.608 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 33917 ms
2020-07-11 09:51:12.560 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 09:51:12.600 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-11 09:51:12.603 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 38.973 seconds (JVM running for 41.326)
2020-07-11 09:51:34.906 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-11 09:51:34.906 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-07-11 09:51:34.935 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 29 ms
2020-07-11 09:51:35.049 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 09:51:35.050 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:51:35.050 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:51:35.051 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 09:51:35.052 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:51:35.053 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:51:35.053 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 09:51:35.054 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:51:35.049 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 09:51:35.059 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 09:51:35.060 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:51:35.060 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:51:35.061 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:51:35.061 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 09:51:35.062 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:51:35.332 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:51:35.334 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:51:35.335 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:51:35.335 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:51:35.336 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:51:40.316 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:51:40.316 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:51:40.317 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:51:40.318 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:51:40.318 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:52:00.338 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 20023
2020-07-11 09:52:00.339 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:52:01.002 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:52:01.004 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:52:01.004 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:52:01.005 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:52:01.006 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:52:12.514 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:52:12.515 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:52:12.515 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:52:12.516 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:52:12.516 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:52:21.031 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 20029
2020-07-11 09:52:21.032 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:52:26.892 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:52:32.523 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 20009
2020-07-11 09:52:32.524 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:53:04.957 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:53:04.957 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:53:04.958 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:53:04.959 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:53:04.959 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:53:17.753 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:53:24.964 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 20008
2020-07-11 09:53:24.964 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":40002,"msg":"用户名或密码错误!"}
2020-07-11 09:53:33.953 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:53:33.954 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:53:33.955 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:53:33.956 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:53:33.956 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:53:39.522 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5569
2020-07-11 09:53:39.528 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"1106341C98AAB9B0506F1A5FD86AFD6E"},"msg":"操作成功！"}
2020-07-11 09:53:45.927 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:53:57.623 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:53:57.624 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:53:57.625 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:53:57.626 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:53:57.626 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:53:58.355 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 732
2020-07-11 09:53:58.356 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"1106341C98AAB9B0506F1A5FD86AFD6E"},"msg":"操作成功！"}
2020-07-11 09:54:01.034 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 09:54:01.034 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:54:01.034 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:54:01.035 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:54:01.035 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:01.038 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:01.038 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 09:54:01.038 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:54:01.038 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:01.039 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:54:01.050 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 09:54:01.051 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:01.052 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:01.053 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 09:54:01.055 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:01.056 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 09:54:01.057 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:01.058 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:01.058 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 09:54:01.059 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:01.101 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 09:54:01.102 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:01.103 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:01.104 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 09:54:01.105 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:01.688 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 654
2020-07-11 09:54:01.702 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 09:54:07.083 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6049
2020-07-11 09:54:07.093 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:54:08.816 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7766
2020-07-11 09:54:08.824 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:54:09.082 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7981
2020-07-11 09:54:09.083 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 09:54:16.015 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:54:26.994 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 09:54:26.994 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:54:26.994 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:54:26.995 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:54:26.995 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:26.995 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 09:54:26.995 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:26.995 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:26.995 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:54:26.995 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:54:27.225 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 09:54:27.226 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:27.227 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:27.228 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 09:54:27.228 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:27.229 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 09:54:27.230 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:27.231 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:27.231 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 09:54:27.233 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:27.725 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 731
2020-07-11 09:54:27.726 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 09:54:28.772 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1779
2020-07-11 09:54:28.772 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:54:29.302 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2073
2020-07-11 09:54:29.302 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 09:54:35.345 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 09:54:35.346 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:54:35.347 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:35.347 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 09:54:35.347 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:54:36.480 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1135
2020-07-11 09:54:36.481 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"2BF1DC3F9BE2D785B8B967C2DED2D4B3"},"msg":"操作成功！"}
2020-07-11 09:54:38.383 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:54:38.383 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:54:38.385 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:38.386 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:54:38.386 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 09:54:38.387 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:38.387 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:38.387 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 09:54:38.386 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 09:54:38.388 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:38.389 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 09:54:38.390 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:54:38.390 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:38.390 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 09:54:38.391 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:38.396 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 09:54:38.397 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:38.397 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:38.397 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 09:54:38.398 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:38.703 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 09:54:38.703 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:54:38.704 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:54:38.704 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 09:54:38.704 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:54:40.206 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1820
2020-07-11 09:54:40.207 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:54:40.214 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1825
2020-07-11 09:54:40.215 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 09:54:44.970 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6587
2020-07-11 09:54:44.974 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:54:52.483 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:56:05.523 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 09:56:05.524 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:56:05.525 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:56:05.526 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 09:56:05.526 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:56:06.370 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 09:56:06.371 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:56:06.371 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:56:06.372 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 09:56:06.373 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:56:15.188 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 09:56:15.189 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:56:15.189 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:56:15.189 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 09:56:15.189 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 09:56:15.655 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 467
2020-07-11 09:56:15.655 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"2BF1DC3F9BE2D785B8B967C2DED2D4B3"},"msg":"操作成功！"}
2020-07-11 09:56:16.114 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 09:56:16.115 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:56:16.116 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:56:16.116 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 09:56:16.116 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:56:16.117 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-07-11 09:56:16.117 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:56:17.395 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 09:56:17.396 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:56:17.397 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:56:17.398 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 09:56:17.398 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:56:17.776 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 381
2020-07-11 09:56:17.780 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 09:56:22.914 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:56:22.915 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:56:22.916 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:56:22.917 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:56:22.918 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:56:24.296 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1382
2020-07-11 09:56:24.297 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:57:15.095 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-07-11 09:57:15.096 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:57:15.096 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:15.096 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-07-11 09:57:15.097 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=发布测试, blogImage=null, blogContent=<p>发布微博的测试。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:57:18.278 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3183
2020-07-11 09:57:18.279 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 09:57:19.162 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-07-11 09:57:19.163 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:57:19.164 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:19.164 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-07-11 09:57:19.165 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=发布测试, blogImage=null, blogContent=<p>发布微博的测试。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 09:57:19.551 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:57:19.552 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:57:19.552 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:19.552 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:57:19.552 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:57:21.524 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1973
2020-07-11 09:57:21.526 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769494329122816","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19","typeName":"java","updateTime":"2020-07-11 01:57:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:57:23.300 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4138
2020-07-11 09:57:23.301 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 09:57:24.935 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:57:24.935 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:57:24.936 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:24.936 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:57:24.936 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=9, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281769494329122816, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 01:57:19, updateTime=2020-07-11 01:57:19)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:57:27.380 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2445
2020-07-11 09:57:27.381 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769494329122816","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19","typeName":"java","updateTime":"2020-07-11 01:57:19"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769510993092608","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:23","typeName":"java","updateTime":"2020-07-11 01:57:23"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":10,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:57:33.807 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281769510993092608
2020-07-11 09:57:33.807 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 09:57:33.808 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:33.808 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 09:57:33.808 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281769510993092608]
2020-07-11 09:57:34.560 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 753
2020-07-11 09:57:34.561 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 09:57:35.359 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:57:35.359 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:57:35.360 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:35.360 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:57:35.360 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=10, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281769494329122816, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 01:57:19, updateTime=2020-07-11 01:57:19), BlogVo(blogId=1281769510993092608, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 01:57:23, updateTime=2020-07-11 01:57:23)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:57:38.862 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3503
2020-07-11 09:57:38.863 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769494329122816","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19","typeName":"java","updateTime":"2020-07-11 01:57:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:57:55.805 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 09:57:55.806 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:57:55.806 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:55.807 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 09:57:55.807 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:57:55.807 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2
2020-07-11 09:57:55.807 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:57:58.624 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 09:57:58.624 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:57:58.624 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:57:58.625 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:58.625 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:57:58.625 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:57:58.625 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 09:57:58.626 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:57:58.626 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:57:58.626 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:58:00.496 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1872
2020-07-11 09:58:00.497 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":8,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 09:58:08.712 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 10088
2020-07-11 09:58:08.713 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769494329122816","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19","typeName":"java","updateTime":"2020-07-11 01:57:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:58:11.660 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 09:58:11.661 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:58:11.662 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:58:11.663 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 09:58:11.664 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:58:11.665 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-07-11 09:58:11.666 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:58:12.825 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 09:58:12.826 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:58:12.826 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:58:12.826 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:58:12.827 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:58:12.827 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 09:58:12.827 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:58:12.827 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:58:12.828 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:58:12.829 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:58:13.568 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 743
2020-07-11 09:58:13.568 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":8,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 09:58:15.743 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2917
2020-07-11 09:58:15.744 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769494329122816","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19","typeName":"java","updateTime":"2020-07-11 01:57:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:58:15.868 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/getByPage
2020-07-11 09:58:15.869 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:58:15.870 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:58:15.870 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.getByPage
2020-07-11 09:58:15.870 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:58:18.057 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2189
2020-07-11 09:58:18.060 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":7,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-07-11 01:35:00"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:58:18.504 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 09:58:18.504 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:58:18.505 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:58:18.505 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 09:58:18.506 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:58:18.614 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 110
2020-07-11 09:58:18.614 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":8,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 09:58:20.747 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 09:58:20.747 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 09:58:20.747 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:58:20.748 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 09:58:20.748 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 09:58:21.582 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 835
2020-07-11 09:58:21.583 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769494329122816","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19","typeName":"java","updateTime":"2020-07-11 01:57:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 09:59:22.600 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281769494329122816
2020-07-11 09:59:22.601 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 09:59:22.601 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:59:22.601 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 09:59:22.602 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281769494329122816]
2020-07-11 09:59:33.977 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 09:59:33.978 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 09:59:33.979 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 09:59:33.981 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 09:59:33.982 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 09:59:33.982 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-07-11 09:59:33.983 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 09:59:44.314 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 09:59:53.778 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 10:00:05.527 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 10:00:05.527 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:00:05.528 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:00:05.528 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 10:00:05.528 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 10:00:14.421 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 8894
2020-07-11 10:00:14.422 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"2BF1DC3F9BE2D785B8B967C2DED2D4B3"},"msg":"操作成功！"}
2020-07-11 10:00:17.713 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 10:00:17.714 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:00:17.714 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:00:17.714 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 10:00:17.715 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 10:00:18.004 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 291
2020-07-11 10:00:18.004 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"2BF1DC3F9BE2D785B8B967C2DED2D4B3"},"msg":"操作成功！"}
2020-07-11 10:00:18.864 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 10:00:18.865 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:00:18.865 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:00:18.865 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 10:00:18.866 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:00:18.866 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2
2020-07-11 10:00:18.866 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 10:00:19.733 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:00:19.733 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:00:19.734 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:00:19.734 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:00:19.735 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:00:20.035 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 10:00:20.035 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:00:20.036 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:00:20.036 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 10:00:20.036 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:00:20.156 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 423
2020-07-11 10:00:20.157 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281769494329122816","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19","typeName":"java","updateTime":"2020-07-11 01:57:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:00:20.319 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 284
2020-07-11 10:00:20.320 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":8,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 10:00:34.487 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281769494329122816
2020-07-11 10:00:34.488 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 10:00:34.488 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:00:34.489 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 10:00:34.489 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281769494329122816]
2020-07-11 10:00:35.579 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1092
2020-07-11 10:00:35.579 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 10:00:36.378 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:00:36.378 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:00:36.379 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:00:36.379 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:00:36.379 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=9, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281769494329122816, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 01:57:19, updateTime=2020-07-11 01:57:19)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:00:37.085 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 707
2020-07-11 10:00:37.086 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:01:44.587 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-07-11 10:01:44.587 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:01:44.588 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:01:44.588 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-07-11 10:01:44.588 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=发布测试, blogImage=null, blogContent=<p>发布微博测试。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 10:01:52.237 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-07-11 10:01:52.237 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:01:52.238 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:01:52.238 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-07-11 10:01:52.238 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=发布测试, blogImage=null, blogContent=<p>发布微博测试。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 10:01:56.516 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-07-11 10:01:56.516 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:01:56.516 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:01:56.516 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-07-11 10:01:56.516 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=发布测试, blogImage=null, blogContent=<p>发布微博测试。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 10:02:00.610 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 8373
2020-07-11 10:02:00.610 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 10:02:02.853 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6337
2020-07-11 10:02:02.854 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 10:02:02.979 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-07-11 10:02:02.979 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:02:02.980 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:02.980 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-07-11 10:02:02.980 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=发布测试, blogImage=null, blogContent=<p>发布微博测试。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 10:02:03.984 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 19397
2020-07-11 10:02:03.985 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 10:02:05.176 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:02:05.177 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:02:05.177 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:05.177 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:02:05.178 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:02:06.632 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3653
2020-07-11 10:02:06.633 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 10:02:06.711 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1535
2020-07-11 10:02:06.712 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770675596124160","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00","typeName":"java","updateTime":"2020-07-11 02:02:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770688267116544","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:03","typeName":"java","updateTime":"2020-07-11 02:02:03"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":11,"totalPage":2},"msg":"操作成功！"}
2020-07-11 10:02:07.559 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:02:07.560 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:02:07.560 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:07.560 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:02:07.561 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:02:10.397 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2838
2020-07-11 10:02:10.398 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770675596124160","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00","typeName":"java","updateTime":"2020-07-11 02:02:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770688267116544","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:03","typeName":"java","updateTime":"2020-07-11 02:02:03"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":12,"totalPage":2},"msg":"操作成功！"}
2020-07-11 10:02:13.370 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281770688267116544
2020-07-11 10:02:13.371 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 10:02:13.371 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:13.372 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 10:02:13.372 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281770688267116544]
2020-07-11 10:02:15.448 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2078
2020-07-11 10:02:15.449 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 10:02:17.790 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:02:17.790 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:02:17.791 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:17.791 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:02:17.791 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=2, totalCount=12, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281770675596124160, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:02:00, updateTime=2020-07-11 02:02:00), BlogVo(blogId=1281770688267116544, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:02:03, updateTime=2020-07-11 02:02:03)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:02:19.146 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1356
2020-07-11 10:02:19.147 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770675596124160","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00","typeName":"java","updateTime":"2020-07-11 02:02:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770692163624960","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:04","typeName":"java","updateTime":"2020-07-11 02:02:04"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":11,"totalPage":2},"msg":"操作成功！"}
2020-07-11 10:02:22.054 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281770692163624960
2020-07-11 10:02:22.055 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 10:02:22.055 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:22.055 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 10:02:22.056 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281770692163624960]
2020-07-11 10:02:25.285 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3231
2020-07-11 10:02:25.286 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 10:02:27.079 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:02:27.080 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:02:27.080 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:27.081 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:02:27.081 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=2, totalCount=11, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281770675596124160, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:02:00, updateTime=2020-07-11 02:02:00), BlogVo(blogId=1281770692163624960, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:02:04, updateTime=2020-07-11 02:02:04)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:02:29.856 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2777
2020-07-11 10:02:29.857 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770675596124160","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00","typeName":"java","updateTime":"2020-07-11 02:02:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770704025116672","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:07","typeName":"java","updateTime":"2020-07-11 02:02:07"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":10,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:02:34.247 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281770704025116672
2020-07-11 10:02:34.248 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 10:02:34.249 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:34.250 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 10:02:34.250 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281770704025116672]
2020-07-11 10:02:34.491 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 244
2020-07-11 10:02:34.491 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 10:02:35.140 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:02:35.140 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:02:35.140 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:02:35.141 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:02:35.141 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=10, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281770675596124160, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:02:00, updateTime=2020-07-11 02:02:00), BlogVo(blogId=1281770704025116672, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:02:07, updateTime=2020-07-11 02:02:07)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:02:35.722 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 582
2020-07-11 10:02:35.722 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281770675596124160","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00","typeName":"java","updateTime":"2020-07-11 02:02:00"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:03:25.543 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281770675596124160
2020-07-11 10:03:25.544 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 10:03:25.544 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:03:25.546 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 10:03:25.546 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281770675596124160]
2020-07-11 10:03:26.088 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 545
2020-07-11 10:03:26.088 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 10:03:26.672 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:03:26.673 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:03:26.673 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:03:26.673 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:03:26.673 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=9, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281770675596124160, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:02:00, updateTime=2020-07-11 02:02:00)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:03:27.312 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 640
2020-07-11 10:03:27.312 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:04:00.410 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-07-11 10:04:00.410 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:04:00.411 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:04:00.411 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-07-11 10:04:00.412 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=发布测试, blogImage=null, blogContent=<p>发布微博测试。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 10:04:01.642 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1232
2020-07-11 10:04:01.643 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 10:04:02.208 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:04:02.209 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:04:02.210 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:04:02.210 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:04:02.211 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:04:02.796 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 588
2020-07-11 10:04:02.798 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1281771191935918080","blogRead":0,"blogTitle":"发布测试","createdTime":"2020-07-11 02:04:03","typeName":"java","updateTime":"2020-07-11 02:04:03"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:04:14.860 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1281771191935918080
2020-07-11 10:04:14.860 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-07-11 10:04:14.861 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:04:14.861 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-07-11 10:04:14.861 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1281771191935918080]
2020-07-11 10:04:15.377 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 517
2020-07-11 10:04:15.378 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 10:04:15.674 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:04:15.675 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:04:15.676 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:04:15.676 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:04:15.677 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=9, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=11, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 00:56:51), BlogVo(blogId=1281771191935918080, blogTitle=发布测试, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-07-11 02:04:03, updateTime=2020-07-11 02:04:03)], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:04:15.946 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 272
2020-07-11 10:04:15.948 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:04:49.303 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 10:04:49.304 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:04:49.304 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:04:49.306 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 10:04:49.306 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:04:49.400 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 97
2020-07-11 10:04:49.400 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 10:05:27.599 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/save
2020-07-11 10:05:27.599 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:05:27.600 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:05:27.600 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.save
2020-07-11 10:05:27.600 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Type(typeId=null, typeName=C++, typeBlogCount=null, enable=null, deleted=null)]
2020-07-11 10:05:28.649 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1050
2020-07-11 10:05:28.649 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-07-11 10:05:29.450 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 10:05:29.451 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:05:29.451 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:05:29.451 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 10:05:29.452 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:05:29.612 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 162
2020-07-11 10:05:29.614 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"C++"}],"msg":"操作成功！"}
2020-07-11 10:06:19.527 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/delete/7
2020-07-11 10:06:19.528 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:06:19.529 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:06:19.529 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.delete
2020-07-11 10:06:19.529 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[7]
2020-07-11 10:06:20.737 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1210
2020-07-11 10:06:20.738 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-07-11 10:06:21.472 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 10:06:21.472 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:06:21.472 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:06:21.473 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 10:06:21.473 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:06:21.734 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 262
2020-07-11 10:06:21.735 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 10:14:51.596 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:14:51.596 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:14:51.596 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 10:14:51.596 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 10:14:51.597 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:14:51.597 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:14:51.597 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:14:51.597 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:14:51.597 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:14:51.597 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:14:51.598 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 10:14:51.598 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 10:14:51.598 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:14:51.598 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:14:51.598 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:14:51.892 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 10:14:51.892 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 10:14:51.893 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:14:51.893 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:14:51.893 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:14:51.893 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:14:51.893 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 10:14:51.893 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 10:14:51.894 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:14:51.894 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:14:52.137 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 541
2020-07-11 10:14:52.138 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 10:14:52.210 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 614
2020-07-11 10:14:52.211 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 10:14:52.578 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 686
2020-07-11 10:14:52.579 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 10:14:52.684 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1088
2020-07-11 10:14:52.685 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:14:58.391 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 10:14:58.392 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:14:58.393 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:14:58.393 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 10:14:58.394 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:15:00.025 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1634
2020-07-11 10:15:00.026 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":8,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-11 01:35:00","version":10},"msg":"操作成功！"}
2020-07-11 10:15:16.051 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:15:16.052 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:15:16.053 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:15:16.053 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:15:16.054 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:15:16.329 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 278
2020-07-11 10:15:16.330 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:16:04.674 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 10:16:04.675 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:16:04.677 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:04.678 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 10:16:04.679 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:16:06.477 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1803
2020-07-11 10:16:06.478 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":9,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-11 02:15:01","version":11},"msg":"操作成功！"}
2020-07-11 10:16:24.821 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:16:24.822 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:16:24.823 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:24.824 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:16:24.825 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:16:25.155 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 334
2020-07-11 10:16:25.156 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:16:25.447 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 10:16:25.447 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:16:25.448 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:25.448 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 10:16:25.449 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:16:26.215 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 768
2020-07-11 10:16:26.215 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 10:16:29.929 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:16:29.930 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:16:29.931 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:29.932 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:16:29.933 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:16:30.387 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 458
2020-07-11 10:16:30.388 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:16:47.102 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 10:16:47.102 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:16:47.103 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:47.104 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 10:16:47.104 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:16:55.150 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-07-11 10:16:55.151 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:16:55.151 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:55.151 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-07-11 10:16:55.152 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:16:55.788 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getList
2020-07-11 10:16:55.789 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:16:55.789 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:55.790 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getList
2020-07-11 10:16:55.790 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:16:57.186 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 10:16:57.216 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:16:57.217 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:16:57.217 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 10:16:57.218 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:17:19.518 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 10:17:19.520 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:17:19.521 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:17:19.522 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 10:17:19.522 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:17:19.695 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 177
2020-07-11 10:17:19.696 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 10:17:26.026 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 10:17:26.027 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:17:26.027 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:17:26.027 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 10:17:26.027 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:17:42.691 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-07-11 10:17:42.691 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:17:42.692 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:17:42.692 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-07-11 10:17:42.692 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:17:43.658 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getList
2020-07-11 10:17:43.659 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:17:43.661 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:17:43.662 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getList
2020-07-11 10:17:43.663 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 10:17:44.549 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-07-11 10:17:44.550 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:17:44.550 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:17:44.551 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-07-11 10:17:44.552 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:17:45.144 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 595
2020-07-11 10:17:45.147 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1281771191935918080","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:04:03"},{"blogId":"1281770704025116672","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:07"},{"blogId":"1281770692163624960","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:04"},{"blogId":"1281770688267116544","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:03"},{"blogId":"1281770675596124160","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00"},{"blogId":"1281769510993092608","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:23"},{"blogId":"1281769494329122816","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19"}],"month":"2020-07"},{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}
2020-07-11 10:17:45.337 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:17:45.338 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:17:45.338 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:17:45.339 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:17:45.339 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:17:46.514 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1177
2020-07-11 10:17:46.516 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:18:29.198 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:18:29.199 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 10:18:29.199 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:18:29.200 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:18:29.200 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:18:29.200 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:18:29.200 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:18:29.200 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 10:18:29.201 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:18:29.201 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:18:39.189 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 10:18:39.190 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:18:39.191 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:18:39.192 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 10:18:39.193 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:18:41.613 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-07-11 10:18:41.615 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:18:41.616 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:18:41.616 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-07-11 10:18:41.617 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:18:47.071 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:18:47.072 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:18:47.072 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:18:47.073 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:18:47.073 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:18:52.168 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 10:20:10.097 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 10:20:10.097 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:20:10.098 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:20:10.098 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:20:10.098 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:10.098 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:10.099 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 10:20:10.099 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:20:10.099 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:20:10.099 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:20:10.330 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 10:20:10.330 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 10:20:10.331 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:20:10.331 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:20:10.332 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:10.332 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:10.332 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 10:20:10.332 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:20:10.332 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 10:20:10.333 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:20:10.809 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 712
2020-07-11 10:20:10.809 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 10:20:11.631 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1301
2020-07-11 10:20:11.631 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 10:20:12.354 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2257
2020-07-11 10:20:12.355 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:20:54.234 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 10:20:54.235 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:20:54.236 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:54.236 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 10:20:54.236 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 10:20:54.715 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 481
2020-07-11 10:20:54.715 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"1876E5F5396C289BA4AB3B3F0AE3F885"},"msg":"操作成功！"}
2020-07-11 10:20:55.889 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 10:20:55.889 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:20:55.889 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:20:55.890 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:20:55.890 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:55.890 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 10:20:55.890 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:55.891 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:20:55.891 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:20:55.891 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:20:56.215 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 10:20:56.215 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 10:20:56.215 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:20:56.215 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 10:20:56.215 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:56.215 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:20:56.216 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 10:20:56.216 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:20:56.216 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:56.216 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:20:56.216 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:20:56.216 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 10:20:56.217 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 10:20:56.217 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:20:56.217 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:20:56.294 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 405
2020-07-11 10:20:56.295 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 10:20:56.477 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 262
2020-07-11 10:20:56.477 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 10:20:57.040 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 825
2020-07-11 10:20:57.041 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 10:20:57.114 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1225
2020-07-11 10:20:57.115 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:21:01.944 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 10:36:21.936 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 10:36:21.937 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:36:21.938 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:36:21.938 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 10:36:21.939 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:36:22.226 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 289
2020-07-11 10:36:22.227 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 10:36:22.521 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:36:22.522 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:36:22.523 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:36:22.523 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:36:22.524 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:36:22.794 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 273
2020-07-11 10:36:22.795 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":11,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 00:56:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:37:47.721 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264726600279891968
2020-07-11 10:37:47.722 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:37:47.723 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:37:47.723 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 10:37:47.724 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 10:37:47.733 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 10:37:47.734 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:37:47.734 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:37:47.734 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 10:37:47.734 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264726600279891968
2020-07-11 10:37:47.735 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:37:47.735 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:37:47.736 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 10:37:47.736 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 10:37:47.735 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 10:37:47.738 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 10:37:47.739 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:37:47.740 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:37:47.741 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 10:37:47.741 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 10:37:48.605 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 884
2020-07-11 10:37:48.606 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}
2020-07-11 10:37:49.178 INFO  [http-nio-1001-exec-9]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:3, serverValue:484}] to 39.97.183.122:27017
2020-07-11 10:37:49.200 INFO  [http-nio-1001-exec-1]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:4, serverValue:485}] to 39.97.183.122:27017
2020-07-11 10:37:49.239 INFO  [http-nio-1001-exec-8]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:486}] to 39.97.183.122:27017
2020-07-11 10:37:49.495 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1757
2020-07-11 10:37:49.496 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 10:37:49.499 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1765
2020-07-11 10:37:49.499 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 10:37:50.357 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2624
2020-07-11 10:37:50.374 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":true,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 10:39:47.492 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:39:47.493 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:39:47.493 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:47.494 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:39:47.495 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:39:47.496 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 10:39:47.497 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:39:47.497 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:47.498 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 10:39:47.498 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:39:47.630 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 134
2020-07-11 10:39:47.631 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 10:39:47.699 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 10:39:47.700 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:39:47.700 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:47.703 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 10:39:47.703 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:39:47.704 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 10:39:47.704 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:39:47.705 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:47.706 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 10:39:47.707 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:39:47.760 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 268
2020-07-11 10:39:47.761 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 02:37:50"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:39:47.857 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 153
2020-07-11 10:39:47.858 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 10:39:58.673 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 10:39:58.675 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:39:58.676 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:58.677 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 10:39:58.677 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 10:39:58.773 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 100
2020-07-11 10:39:58.774 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"44CD66EB81B561FBD03E8A8E3BAA1494"},"msg":"操作成功！"}
2020-07-11 10:39:59.203 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 10:39:59.203 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:39:59.204 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:59.204 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 10:39:59.205 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 10:39:59.496 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 293
2020-07-11 10:39:59.499 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 02:37:50"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 10:39:59.553 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 10:39:59.553 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:39:59.554 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:59.554 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 10:39:59.557 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:39:59.554 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 10:39:59.560 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:39:59.560 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:59.561 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 10:39:59.556 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 10:39:59.561 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:39:59.561 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 10:39:59.562 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:59.561 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:39:59.562 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:39:59.562 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 10:39:59.562 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:39:59.562 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:39:59.562 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 10:39:59.563 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:39:59.736 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 182
2020-07-11 10:39:59.737 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 10:39:59.789 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 235
2020-07-11 10:39:59.789 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 10:39:59.793 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 233
2020-07-11 10:39:59.794 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 10:54:04.314 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 10:54:04.315 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 10:54:04.316 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:54:04.317 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 10:54:04.317 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 10:54:04.702 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 388
2020-07-11 10:54:04.703 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"E78BA969EAB4A7A3027C35340B776F72"},"msg":"操作成功！"}
2020-07-11 10:54:04.984 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 10:54:04.984 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:54:04.985 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:54:04.986 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 10:54:04.986 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:54:04.986 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2
2020-07-11 10:54:04.986 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 10:54:05.704 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 10:54:05.709 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:54:05.711 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:54:05.713 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 10:54:05.714 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:54:05.928 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 224
2020-07-11 10:54:05.929 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 10:55:37.996 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 10:55:37.997 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 10:55:37.997 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 10:55:37.998 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 10:55:37.998 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 10:55:38.224 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 228
2020-07-11 10:55:38.224 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 11:02:44.354 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/getByPage
2020-07-11 11:02:44.355 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:02:44.355 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:02:44.356 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.getByPage
2020-07-11 11:02:44.356 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:02:44.736 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 382
2020-07-11 11:02:44.737 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":9,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-07-11 02:16:08"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:02:50.631 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-07-11 11:02:50.631 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:02:50.632 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:02:50.632 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-07-11 11:02:50.633 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:02:51.221 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 590
2020-07-11 11:02:51.223 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:10:51.959 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 11:10:51.960 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:10:51.960 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:10:51.961 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 11:10:51.961 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:10:54.567 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2608
2020-07-11 11:10:54.568 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 02:37:50"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:11:22.492 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 11:11:22.492 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 11:11:22.492 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:11:22.493 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 11:11:22.493 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 11:11:24.700 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2209
2020-07-11 11:11:24.701 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 11:11:25.029 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 11:11:25.029 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:11:25.029 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:11:25.030 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 11:11:25.031 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:11:26.897 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1869
2020-07-11 11:11:26.897 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:11:43.980 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-07-11 11:11:43.981 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:11:43.982 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:11:43.983 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-07-11 11:11:43.985 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:11:45.253 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1273
2020-07-11 11:11:45.254 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:17:47.609 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 11:17:47.609 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 11:17:47.609 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:17:47.610 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 11:17:47.610 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 11:17:51.404 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3795
2020-07-11 11:17:51.405 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 11:18:51.705 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 11:18:51.706 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:18:51.706 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:18:51.707 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 11:18:51.707 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:18:53.964 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2259
2020-07-11 11:18:53.965 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 02:37:50"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:19:21.276 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/getByPage
2020-07-11 11:19:21.277 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:19:21.277 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:19:21.277 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.getByPage
2020-07-11 11:19:21.277 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:19:35.809 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 11:19:35.810 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 11:19:35.810 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:19:35.810 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 11:19:35.810 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 11:19:46.586 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 25310
2020-07-11 11:19:46.587 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":9,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-07-11 02:16:08"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:19:47.501 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 11692
2020-07-11 11:19:47.502 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 11:19:53.546 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 11:19:53.547 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:19:53.547 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:19:53.547 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 11:19:53.548 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:19:54.853 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1307
2020-07-11 11:19:54.853 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:20:19.176 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-07-11 11:20:19.177 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:20:19.178 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:20:19.179 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-07-11 11:20:19.180 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:20:19.397 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 221
2020-07-11 11:20:19.398 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:20:33.595 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /log/getByPage
2020-07-11 11:20:33.596 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:20:33.596 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:20:33.597 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LogController.getByPage
2020-07-11 11:20:33.597 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:20:36.653 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3058
2020-07-11 11:20:36.659 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1389,"totalPage":139},"msg":"操作成功！"}
2020-07-11 11:20:54.115 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getByPage
2020-07-11 11:20:54.115 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:20:54.116 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:20:54.116 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-07-11 11:20:54.116 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:21:33.146 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /log/getByPage
2020-07-11 11:21:33.148 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:21:33.149 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:21:33.149 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LogController.getByPage
2020-07-11 11:21:33.151 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:21:35.859 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2713
2020-07-11 11:21:35.860 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1391,"totalPage":140},"msg":"操作成功！"}
2020-07-11 11:21:36.740 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getByPage
2020-07-11 11:21:36.740 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:21:36.741 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:21:36.741 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getByPage
2020-07-11 11:21:36.742 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:22:17.861 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:22:17.862 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:22:17.862 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:22:17.863 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:22:17.863 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@715a42c1]
2020-07-11 11:22:44.667 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:22:44.668 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:22:44.669 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:22:44.669 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:22:44.669 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@23684db9]
2020-07-11 11:23:18.717 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:23:18.718 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:23:18.719 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:23:18.720 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:23:18.721 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@752d06e3]
2020-07-11 11:23:43.909 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:23:43.911 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:23:43.912 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:23:43.914 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:23:43.915 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@438d37c8]
2020-07-11 11:23:54.617 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 11:24:15.881 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 11:24:45.258 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:24:45.259 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:24:45.259 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:24:45.260 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:24:45.260 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2166846f]
2020-07-11 11:24:55.489 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 11:25:25.018 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 11:26:31.271 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:26:31.272 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:31.273 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:31.273 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:26:31.274 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5e7074fd]
2020-07-11 11:26:38.862 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:38.865 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:38.865 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:38.866 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:38.867 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:47.258 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:47.259 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:47.259 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:47.259 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:47.260 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:50.295 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:50.296 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:50.297 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:50.297 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:50.298 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:50.790 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:50.790 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:50.791 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:50.791 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:50.791 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:51.259 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:51.259 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:51.260 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:51.260 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:51.261 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:51.628 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:51.631 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:51.632 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:51.632 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:51.633 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:51.980 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:51.980 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:51.981 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:51.981 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:51.982 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:56.305 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:56.305 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:56.306 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:56.306 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:56.307 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:59.411 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:59.414 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:59.417 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:59.417 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:59.418 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:26:59.840 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:26:59.840 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:26:59.841 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:26:59.841 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:26:59.842 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:27:00.282 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:27:00.283 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:27:00.283 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:27:00.283 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:27:00.283 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:27:16.301 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:27:16.303 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:27:16.303 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:27:16.304 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:27:16.304 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@10420a52]
2020-07-11 11:27:17.623 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:27:17.624 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:27:17.624 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:27:17.625 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:27:17.625 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:27:30.068 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:27:30.069 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:27:30.069 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:27:30.069 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:27:30.070 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:27:41.393 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 11:28:12.413 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 11:29:51.072 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-07-11 11:29:51.074 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:29:51.074 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:29:51.075 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-07-11 11:29:51.075 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@1617e1fa]
2020-07-11 11:29:59.401 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:29:59.401 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:29:59.402 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:29:59.403 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:29:59.403 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:30:05.733 INFO  [Druid-ConnectionPool-Create-1502616653]com.alibaba.druid.pool.DruidDataSource.run:2514 -put physical connection to pool failed.
2020-07-11 11:30:33.494 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:30:33.494 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:30:33.495 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:30:33.495 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:30:33.495 INFO  [http-nio-1001-exec-13]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:30:39.188 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/save
2020-07-11 11:30:39.189 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:30:39.190 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:30:39.191 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.save
2020-07-11 11:30:39.191 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Music(id=null, name=ping小优, artist=小优, url=null, cover=null, lrc=[by:Pig小优]
[00:00.000] 作曲 : Pig小优
[00:01.000] 作词 : Ming.明
[00:03.95]编曲/和声编写/和声/唱/混音：Pig小优
[00:05.00]美工：张小喵【这个工作室】
[00:07.03]
[00:09.33]踏红船 繁华似人间
[00:12.23]灯火熙攘祈愿
[00:14.09]手中红线姻缘 何时现
[00:17.87]薄雾小雨润如烟 灯中画舫烟中浅
[00:24.31]
[00:25.00]这尘缘 如惊鸿一面
[00:28.03]谁家翩翩少年
[00:29.81]桥边白衣如纤 印心间
[00:33.68]这世间情话誓言 不抵这柔情一眼
[00:39.75]
[00:40.85]步儿缓 红绳缠
[00:42.72]石桥边 灯火染
[00:44.70]杯中仙 促长谈
[00:46.71]舷外雨声人言难断
[00:49.32]已成烟 已消散
[00:51.63]化作春意满
[00:55.93]
[00:56.36]晚来风寒心却暖三两杯酒后情又添
[01:00.04]暮鼓丝弦声声慢有佳人舞纤纤
[01:04.08]研磨提笔在画卷眉目间流转
[01:08.17]细雨婵娟
[01:12.04]
[01:12.48]醉卧画舫听雨眠一场梦无言
[01:16.07]窗外依旧喧怎转眼桥上人不见
[01:20.44]回眸深处看细雨茫茫如烟
[01:24.22]苦了思念
[01:28.81]
[01:44.58]步儿缓 红绳缠
[01:46.40]石桥边 灯火染
[01:48.39]杯中仙 促长谈
[01:50.21]舷外雨声人言难断
[01:53.36]已成烟 已消散
[01:55.17]化作春意满
[01:59.37]
[01:59.72]晚来风寒心却暖三两杯酒后情又添
[02:03.66]暮鼓丝弦声声慢有佳人舞纤纤
[02:07.88]研磨提笔在画卷眉目间流转
[02:12.23]细雨婵娟
[02:16.24]
[02:16.38]醉卧画舫听雨眠一场梦无言
[02:19.66]窗外依旧喧怎转眼桥上人不见
[02:24.01]回眸深处看细雨茫茫如烟
[02:27.62]苦了思念
[02:30.69]
[02:43.72]青山乌蓬伴流年繁华多阑珊
[02:47.34]刹那嫣然笑款款镌刻在画中仙
[02:51.41]满纸柔情过指尖笔墨笑意染
[02:55.79]长袖翩翩
[02:59.32]
[02:59.51]醉卧画舫听雨眠一场梦无言
[03:03.23]窗外依旧喧怎转眼桥上人不见
[03:07.60]回眸深处看水中"喜"字红残
[03:11.39]倒了人间
[03:16.35]新歌发布群：976688736（此群木有聊天功能，只用于发布新歌和动态）
[03:20.38]
, createdTime=null, enabled=null, deleted=null)]
2020-07-11 11:30:57.841 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 11:30:57.841 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 11:30:57.842 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:30:57.842 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 11:30:57.843 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 11:30:58.091 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 250
2020-07-11 11:30:58.092 INFO  [http-nio-1001-exec-11]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 11:31:16.288 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 11:31:16.289 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:31:16.290 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:31:16.290 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 11:31:16.290 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:31:16.850 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 562
2020-07-11 11:31:16.852 INFO  [http-nio-1001-exec-12]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:31:19.682 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 11:31:19.683 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 11:31:19.683 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:31:19.683 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 11:31:19.684 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 11:31:19.977 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 295
2020-07-11 11:31:19.978 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 11:31:40.342 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 11:31:40.343 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:31:40.344 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:31:40.344 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 11:31:40.345 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:31:41.903 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1561
2020-07-11 11:31:41.903 INFO  [http-nio-1001-exec-14]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 02:37:50"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:31:52.905 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 11:31:52.905 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 11:31:52.906 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:31:52.906 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 11:31:52.908 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 11:31:53.467 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 562
2020-07-11 11:31:53.467 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 11:32:06.931 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 11:32:06.932 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:32:06.933 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:32:06.934 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 11:32:06.935 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:32:08.008 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1077
2020-07-11 11:32:08.008 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 11:33:04.457 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-07-11 11:33:04.458 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 11:33:04.459 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 11:33:04.459 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-07-11 11:33:04.460 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 11:33:04.940 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 483
2020-07-11 11:33:04.941 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:13:58.493 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 19628 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 15:13:58.621 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 15:14:04.041 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 20836 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 15:14:04.053 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 15:14:08.367 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 15:14:08.425 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 15:14:09.689 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 1249ms. Found 4 MongoDB repository interfaces.
2020-07-11 15:14:09.787 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 1369ms. Found 4 MongoDB repository interfaces.
2020-07-11 15:14:11.749 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:11.853 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:12.855 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$75b37a0b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:12.859 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$aa629567] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.159 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.189 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.204 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$5c06b887] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.225 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$42de5cc9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.238 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 15:14:13.238 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$90b5d3e3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.259 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$778d7825] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.275 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 15:14:13.864 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.896 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.920 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:13.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:14.130 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:14.117 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:23.017 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 15:14:23.017 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:23.029 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 15:14:23.040 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:23.293 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:23.293 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.003 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.012 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.043 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.065 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.099 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.108 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.116 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.121 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.129 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.134 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.148 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.149 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.153 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.153 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.292 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7cbeac65' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.317 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5b5f9003' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.336 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7cbeac65' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.345 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5b5f9003' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.480 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#467b684d' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.508 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4fecf308' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.537 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#41eb94bc' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.546 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#41eb94bc' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.563 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#423ed3b5' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.575 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#423ed3b5' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.684 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.691 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.697 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.714 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.725 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.732 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.737 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:26.746 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:27.697 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 15:14:27.697 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 15:14:27.708 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 15:14:27.708 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 15:14:28.106 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:28.106 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:28.210 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:28.210 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:28.239 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:28.239 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:28.669 INFO  [cluster-ClusterId{value='5f0966d359d5211fda066587', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:492}] to 39.97.183.122:27017
2020-07-11 15:14:28.715 INFO  [cluster-ClusterId{value='5f0966d307abe10d33d76052', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:493}] to 39.97.183.122:27017
2020-07-11 15:14:28.761 INFO  [cluster-ClusterId{value='5f0966d307abe10d33d76052', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=40817528}
2020-07-11 15:14:28.761 INFO  [cluster-ClusterId{value='5f0966d359d5211fda066587', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=91653199}
2020-07-11 15:14:28.780 INFO  [cluster-ClusterId{value='5f0966d359d5211fda066587', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 15:14:28.784 INFO  [cluster-ClusterId{value='5f0966d307abe10d33d76052', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 15:14:29.281 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:29.301 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:30.204 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:30.206 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:30.557 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:30.579 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:31.052 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:31.079 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:33.884 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:33.951 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:33.967 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.012 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.147 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#32d418a9' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.147 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#32d418a9' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.147 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7061622' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.158 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#746c411c' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.159 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#746c411c' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.208 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.211 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.219 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2b936b04' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.222 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2b936b04' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.222 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#6dece1f9' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.222 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5635bcd2' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.233 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5635bcd2' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.300 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.300 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.341 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.357 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.379 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.403 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.594 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.636 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.707 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:34.725 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:14:37.318 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 15:14:37.374 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 15:14:37.374 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 15:14:37.374 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 15:14:37.403 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 15:14:37.443 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 15:14:37.443 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 15:14:37.456 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 15:14:38.550 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 15:14:38.550 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 39131 ms
2020-07-11 15:14:38.554 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 15:14:38.557 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 34373 ms
2020-07-11 15:14:49.687 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 15:14:49.864 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 15:14:50.063 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-11 15:14:50.065 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 58.448 seconds (JVM running for 68.248)
2020-07-11 15:14:50.948 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Pausing ProtocolHandler ["http-nio-1001"]
2020-07-11 15:14:50.949 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Stopping service [Tomcat]
2020-07-11 15:14:50.961 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Stopping ProtocolHandler ["http-nio-1001"]
2020-07-11 15:14:50.963 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Destroying ProtocolHandler ["http-nio-1001"]
2020-07-11 15:14:50.993 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-07-11 15:14:51.059 INFO  [main]o.s.jmx.export.annotation.AnnotationMBeanExporter.doUnregister:211 -Could not unregister MBean [com.github.tobato.fastdfs.domain.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2020-07-11 15:14:51.109 INFO  [main]com.alibaba.druid.pool.DruidDataSource.close:1825 -{dataSource-1} closed
2020-07-11 15:16:42.641 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 11344 (started by adminstrator in E:\Idea代码\blog)
2020-07-11 15:16:42.651 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-11 15:16:44.344 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-11 15:16:44.574 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 222ms. Found 4 MongoDB repository interfaces.
2020-07-11 15:16:45.218 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:45.468 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$888466c1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:45.617 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:45.637 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$6ed7a53d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:45.647 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$55af497f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:45.657 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-11 15:16:45.777 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:45.817 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:45.867 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:50.747 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-11 15:16:50.747 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:50.927 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.337 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.347 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.357 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.357 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.367 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.367 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.367 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.397 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2e66bc32' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.397 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2e66bc32' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.427 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#1aad0b1' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.427 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#23f3da8b' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.437 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#23f3da8b' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.467 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.467 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.467 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.477 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.557 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-11 15:16:51.557 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-11 15:16:51.607 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.617 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.627 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.727 INFO  [cluster-ClusterId{value='5f0967633bb2af4994d5296f', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:494}] to 39.97.183.122:27017
2020-07-11 15:16:51.747 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.767 INFO  [cluster-ClusterId{value='5f0967633bb2af4994d5296f', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=35513631}
2020-07-11 15:16:51.767 INFO  [cluster-ClusterId{value='5f0967633bb2af4994d5296f', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-11 15:16:51.797 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.877 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:51.987 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.437 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.457 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.517 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3281dfc2' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.517 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3281dfc2' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.527 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#707e4fe4' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.527 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#14422d9d' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.527 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#14422d9d' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.557 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.557 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.607 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.617 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.707 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:52.757 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-11 15:16:53.317 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-11 15:16:53.347 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-11 15:16:53.347 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-11 15:16:53.347 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-11 15:16:53.707 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-11 15:16:53.707 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 10963 ms
2020-07-11 15:16:56.630 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-11 15:16:56.670 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-11 15:16:56.670 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 16.479 seconds (JVM running for 19.352)
2020-07-11 15:17:59.554 INFO  [http-nio-1001-exec-4]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-11 15:17:59.564 INFO  [http-nio-1001-exec-4]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-07-11 15:17:59.645 INFO  [http-nio-1001-exec-4]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 81 ms
2020-07-11 15:18:00.457 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 15:18:00.458 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 15:18:00.459 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 15:18:00.460 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:00.461 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:00.462 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:18:00.463 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:00.459 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:00.464 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:00.474 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 15:18:00.475 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 15:18:00.476 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:18:00.477 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 15:18:00.478 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:18:00.476 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:18:02.054 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:18:02.055 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:18:02.056 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:02.057 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:18:02.058 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:18:02.477 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2020
2020-07-11 15:18:02.486 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2028
2020-07-11 15:18:02.491 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 15:18:02.508 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 15:18:02.622 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 568
2020-07-11 15:18:02.683 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 02:37:50"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:18:21.000 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 15:18:21.002 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:18:21.003 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:21.004 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 15:18:21.005 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 15:18:21.172 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 172
2020-07-11 15:18:21.183 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"59B96DB45D669B6C3FD6DB53AAB45CA0"},"msg":"操作成功！"}
2020-07-11 15:18:21.767 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:18:21.767 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:18:21.768 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:21.769 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:18:21.769 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:18:21.935 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 15:18:21.935 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:18:21.935 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:21.935 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 15:18:21.935 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:18:21.945 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 15:18:21.945 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:21.945 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:21.945 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 15:18:21.945 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:18:22.762 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 15:18:22.763 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:22.763 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:22.764 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 15:18:22.765 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:18:22.765 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 15:18:22.766 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:22.767 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:22.768 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 15:18:22.768 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:18:22.909 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 974
2020-07-11 15:18:22.909 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 15:18:22.957 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1012
2020-07-11 15:18:22.958 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1192
2020-07-11 15:18:22.960 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":12,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 02:37:50"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:18:22.961 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 15:18:22.987 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 222
2020-07-11 15:18:22.992 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 15:18:56.745 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 15:18:56.751 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:56.745 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264726600279891968
2020-07-11 15:18:56.751 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:56.751 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:56.752 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 15:18:56.754 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:18:56.757 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:56.758 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 15:18:56.759 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:18:56.801 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264726600279891968
2020-07-11 15:18:56.802 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:56.803 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:56.805 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 15:18:56.807 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:18:56.801 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 15:18:56.808 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:18:56.809 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:18:56.810 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 15:18:56.811 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:18:57.297 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 552
2020-07-11 15:18:57.298 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}
2020-07-11 15:18:57.413 INFO  [http-nio-1001-exec-5]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:495}] to 39.97.183.122:27017
2020-07-11 15:18:57.433 INFO  [http-nio-1001-exec-1]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:4, serverValue:496}] to 39.97.183.122:27017
2020-07-11 15:18:57.505 INFO  [http-nio-1001-exec-4]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:3, serverValue:497}] to 39.97.183.122:27017
2020-07-11 15:18:57.791 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 990
2020-07-11 15:18:57.791 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 990
2020-07-11 15:18:57.792 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 15:18:57.792 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 15:18:57.984 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1239
2020-07-11 15:18:57.998 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":true,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 15:19:02.920 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:19:02.921 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:19:02.921 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:02.922 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:19:02.922 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:19:03.165 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 245
2020-07-11 15:19:03.166 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:19:32.829 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 15:19:32.830 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:19:32.832 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:32.832 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 15:19:32.835 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:19:32.933 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 104
2020-07-11 15:19:32.938 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 15:19:38.630 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-07-11 15:19:38.631 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:19:38.632 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:38.633 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-07-11 15:19:38.634 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:19:38.860 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 230
2020-07-11 15:19:38.865 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":1,"blogComment":2,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":12},"blogId":"1264726600279891968","collectionId":"1281751950536974336","user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"userId":3}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:19:39.654 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getList
2020-07-11 15:19:39.655 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:19:39.655 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:39.656 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getList
2020-07-11 15:19:39.656 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:19:39.707 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 54
2020-07-11 15:19:39.708 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:19:44.914 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 15:19:44.915 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:19:44.916 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:44.917 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 15:19:44.918 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:19:44.994 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 15:19:44.995 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 81
2020-07-11 15:19:44.995 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:19:44.996 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:44.996 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 15:19:44.996 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 15:19:44.996 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:19:45.005 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 15:19:45.006 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:19:45.007 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:45.007 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 15:19:45.008 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:19:45.104 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 110
2020-07-11 15:19:45.105 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 15:19:45.130 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 125
2020-07-11 15:19:45.131 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 15:19:45.324 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 15:19:45.325 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:19:45.325 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:45.326 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 15:19:45.326 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:19:45.326 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 15:19:45.327 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:19:45.327 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:19:45.328 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 15:19:45.328 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:19:45.446 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 120
2020-07-11 15:19:45.446 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 15:20:00.851 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:20:00.851 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 15:20:00.851 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:20:00.851 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:20:00.852 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:20:00.852 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:20:00.852 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 15:20:00.852 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:20:00.853 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:20:00.853 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:20:00.957 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 106
2020-07-11 15:20:00.958 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 15:20:01.090 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 15:20:01.091 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:20:01.091 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:20:01.100 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 15:20:01.101 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:20:01.106 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 255
2020-07-11 15:20:01.107 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:20:01.108 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 15:20:01.110 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:20:01.112 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:20:01.119 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 15:20:01.120 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:20:01.213 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 105
2020-07-11 15:20:01.214 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 15:27:22.386 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 15:27:22.406 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:27:22.407 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:22.407 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 15:27:22.408 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 15:27:22.593 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 207
2020-07-11 15:27:22.597 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"0A4D1F8E958F37257D0FA880A49E44C0"},"msg":"操作成功！"}
2020-07-11 15:27:23.229 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-07-11 15:27:23.230 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:27:23.230 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:23.230 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-07-11 15:27:23.230 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=test, password=e10adc3949ba59abbe56e057f20f883e, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-07-11 15:27:23.557 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 328
2020-07-11 15:27:23.558 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","nickname":"张三","password":"","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test"},"token":"0A4D1F8E958F37257D0FA880A49E44C0"},"msg":"操作成功！"}
2020-07-11 15:27:24.721 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:27:24.722 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:27:24.722 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:24.723 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:27:24.723 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:27:25.015 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 15:27:25.015 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-11 15:27:25.016 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:27:25.016 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:27:25.016 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:25.016 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:25.017 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 15:27:25.017 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-11 15:27:25.017 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:25.017 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:25.019 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-11 15:27:25.019 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:27:25.019 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-11 15:27:25.020 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:25.020 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:27:25.020 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:25.020 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-11 15:27:25.021 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-11 15:27:25.050 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:25.050 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:25.022 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 301
2020-07-11 15:27:25.050 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:27:25.384 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 369
2020-07-11 15:27:25.385 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-11 15:27:25.390 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 371
2020-07-11 15:27:25.391 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-11 15:27:25.398 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 383
2020-07-11 15:27:25.399 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 15:27:30.036 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 15:27:30.039 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:27:30.040 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:30.040 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 15:27:30.041 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:30.175 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 139
2020-07-11 15:27:30.183 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 15:27:31.734 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:27:31.735 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:27:31.736 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:31.737 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:27:31.737 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=3}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:27:32.025 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 291
2020-07-11 15:27:32.026 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{"typeId":"3"},"sortColumn":"created_time","sortMethod":"desc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-07-11 15:27:33.878 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-07-11 15:27:33.879 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:27:33.880 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:33.880 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-07-11 15:27:33.880 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:33.984 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 106
2020-07-11 15:27:33.989 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1281771191935918080","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:04:03"},{"blogId":"1281770704025116672","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:07"},{"blogId":"1281770692163624960","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:04"},{"blogId":"1281770688267116544","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:03"},{"blogId":"1281770675596124160","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00"},{"blogId":"1281769510993092608","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:23"},{"blogId":"1281769494329122816","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19"}],"month":"2020-07"},{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}
2020-07-11 15:27:43.953 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 15:27:43.954 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:27:43.955 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:43.956 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 15:27:43.956 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:44.697 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 744
2020-07-11 15:27:44.701 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":10,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-11 02:16:08","version":12},"msg":"操作成功！"}
2020-07-11 15:27:45.869 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:27:45.870 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:27:45.872 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:45.872 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:27:45.873 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:27:47.201 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1332
2020-07-11 15:27:47.211 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:27:53.863 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-07-11 15:27:53.867 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:27:53.867 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:27:53.868 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-07-11 15:27:53.868 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:27:54.046 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 183
2020-07-11 15:27:54.047 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":1,"commentCount":3},"msg":"操作成功！"}
2020-07-11 15:48:37.812 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 15:48:37.822 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:48:37.823 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:37.825 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 15:48:37.826 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:48:38.081 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 270
2020-07-11 15:48:38.083 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 15:48:38.232 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-07-11 15:48:38.233 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:48:38.234 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:38.234 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-07-11 15:48:38.234 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:48:38.352 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 120
2020-07-11 15:48:38.354 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1281771191935918080","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:04:03"},{"blogId":"1281770704025116672","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:07"},{"blogId":"1281770692163624960","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:04"},{"blogId":"1281770688267116544","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:03"},{"blogId":"1281770675596124160","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00"},{"blogId":"1281769510993092608","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:23"},{"blogId":"1281769494329122816","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19"}],"month":"2020-07"},{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}
2020-07-11 15:48:39.402 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/read
2020-07-11 15:48:39.403 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:48:39.404 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:39.404 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.read
2020-07-11 15:48:39.405 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:48:39.909 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 507
2020-07-11 15:48:39.910 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"aboutContent":"<p>手作，是为複刻古人的情懷。 &mdash;&mdash;知其白<br /><br />古人是讲究的，什么时节，喝什么酒，哪一天酿下的酒，哪一天又开启。那般优雅，最是撩人。<br /><br />而现在，在这个功利横行、效率横行的世界，很多东西都已遗落。<br /><br />2013年的秋天，心里有了这样的一个念头，更重要的是，那个念头没有一闪而过。<br />我们抱着这样的信念，不断的继续向上，努力达到巅峰。<br />我们迷恋的不仅仅是手工制作，更多的是想要复刻古人的情怀。<br /><br />所以我们将酒壶重新设计，将包装将运输都用心去考虑，将每一个细节都追求极致，为的是客户拿到手上时的那一刻心情。<br /><br />在这里每一件事物都渗透着我们对这个世界的理解。<br />除却这些，还有的是一颗不断探索和雕琢的心！</p>","aboutId":4,"aboutRead":11,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","updateTime":"2020-07-11 07:27:46","version":13},"msg":"操作成功！"}
2020-07-11 15:48:40.271 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-07-11 15:48:40.272 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:48:40.272 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:40.272 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-07-11 15:48:40.273 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:48:40.353 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 82
2020-07-11 15:48:40.353 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1281771191935918080","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:04:03"},{"blogId":"1281770704025116672","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:07"},{"blogId":"1281770692163624960","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:04"},{"blogId":"1281770688267116544","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:03"},{"blogId":"1281770675596124160","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 02:02:00"},{"blogId":"1281769510993092608","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:23"},{"blogId":"1281769494329122816","blogMonth":"2020-07","blogTitle":"发布测试","createdTime":"2020-07-11 01:57:19"}],"month":"2020-07"},{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365631460507648","blogMonth":"2020-05","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264363719424188416","blogMonth":"2020-05","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"},{"blogId":"1264358089300877312","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-05","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-05","blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00"}],"month":"2020-05"}],"msg":"操作成功！"}
2020-07-11 15:48:48.996 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:48:48.997 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:48:48.998 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:48.998 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:48:48.999 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:48:49.244 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 248
2020-07-11 15:48:49.246 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:48:52.282 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:48:52.283 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:48:52.284 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:52.285 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:48:52.286 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=13, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 07:18:59), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37)], params={}, sortColumn=blog_goods, sortMethod=desc)]
2020-07-11 15:48:52.579 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 297
2020-07-11 15:48:52.580 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"}],"pageSize":10,"params":{},"sortColumn":"blog_goods","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:48:53.853 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:48:53.853 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:48:53.853 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:53.853 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:48:53.853 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=13, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 07:18:59), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51)], params={}, sortColumn=blog_comment, sortMethod=desc)]
2020-07-11 15:48:54.148 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 295
2020-07-11 15:48:54.148 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"}],"pageSize":10,"params":{},"sortColumn":"blog_comment","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:48:54.314 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:48:54.315 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:48:54.316 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:54.316 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:48:54.317 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264726600279891968, blogTitle=新生代与老年代, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg, blogContent=null, blogGoods=5, blogRead=13, blogCollection=1, typeName=java, blogSource=null, blogRemark=null, blogComment=3, blogMonth=null, createdTime=2020-05-25 01:14:56, updateTime=2020-07-11 07:18:59), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=4, blogRead=3, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:20:33, updateTime=2020-07-11 00:44:08), BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=2, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:49:00, updateTime=2020-07-11 00:28:37), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:27, updateTime=2020-05-25 02:28:09), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=1, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, blogMonth=null, createdTime=2020-05-24 01:19:04, updateTime=2020-07-11 00:53:51)], params={}, sortColumn=blog_read, sortMethod=desc)]
2020-07-11 15:48:54.554 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 240
2020-07-11 15:48:54.556 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"}],"pageSize":10,"params":{},"sortColumn":"blog_read","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:48:57.467 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 15:48:57.475 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:48:57.476 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:48:57.477 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 15:48:57.478 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:48:57.575 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 108
2020-07-11 15:48:57.576 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 15:49:01.344 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:49:01.345 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:49:01.346 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:49:01.346 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:49:01.347 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-11 15:49:01.601 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 257
2020-07-11 15:49:01.602 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:18:59"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:49:10.219 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264726600279891968
2020-07-11 15:49:10.219 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264726600279891968
2020-07-11 15:49:10.219 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:49:10.220 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:49:10.221 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:49:10.223 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:49:10.224 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-07-11 15:49:10.224 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:49:10.229 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264726600279891968
2020-07-11 15:49:10.230 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:49:10.223 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-07-11 15:49:10.231 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:49:10.231 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:49:10.232 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-07-11 15:49:10.232 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264726600279891968
2020-07-11 15:49:10.232 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:49:10.232 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:49:10.232 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:49:10.233 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-07-11 15:49:10.233 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264726600279891968]
2020-07-11 15:49:10.596 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 367
2020-07-11 15:49:10.597 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 15:49:10.611 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 379
2020-07-11 15:49:10.612 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-07-11 15:49:10.662 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 443
2020-07-11 15:49:10.663 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},"msg":"操作成功！"}
2020-07-11 15:49:10.668 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 449
2020-07-11 15:49:10.669 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":true,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"msg":"操作成功！"}
2020-07-11 15:51:05.455 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-11 15:51:05.466 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:51:05.467 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:05.467 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-11 15:51:05.469 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-11 15:51:05.562 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 108
2020-07-11 15:51:05.562 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"CF60A46EA3F81A4AEE9D1B587F3FBF29"},"msg":"操作成功！"}
2020-07-11 15:51:05.772 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-11 15:51:05.773 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:51:05.773 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:05.774 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-11 15:51:05.774 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:51:05.775 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-07-11 15:51:05.775 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 15:51:06.366 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-11 15:51:06.367 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:51:06.368 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:06.368 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-11 15:51:06.369 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:51:06.531 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 165
2020-07-11 15:51:06.531 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 15:51:09.908 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 15:51:09.909 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:51:09.910 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:09.910 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 15:51:09.910 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:51:10.176 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 268
2020-07-11 15:51:10.176 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 15:51:11.561 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:51:11.562 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:51:11.564 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:11.565 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:51:11.566 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:51:11.804 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 243
2020-07-11 15:51:11.805 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:49:12"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:51:12.843 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 15:51:12.844 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:51:12.845 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:12.846 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 15:51:12.847 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:51:12.919 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 76
2020-07-11 15:51:12.920 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-11 15:51:14.277 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:51:14.279 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:51:14.279 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:14.280 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:51:14.281 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:51:14.552 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 275
2020-07-11 15:51:14.553 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:49:12"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:51:28.670 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /about/getByPage
2020-07-11 15:51:28.670 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:51:28.671 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:28.671 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AboutController.getByPage
2020-07-11 15:51:28.672 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:51:28.940 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 270
2020-07-11 15:51:28.941 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"aboutId":1,"aboutRead":0,"aboutTitle":"修改后的测试","createdTime":"2020-05-25 00:14:16","enable":0,"updateTime":"2020-05-25 01:01:50"},{"aboutId":2,"aboutRead":0,"aboutTitle":"测试2","createdTime":"2020-05-25 00:34:13","enable":0,"updateTime":"2020-05-25 00:39:48"},{"aboutId":4,"aboutRead":11,"aboutTitle":"关于稽哥","createdTime":"2020-05-25 00:54:33","enable":1,"updateTime":"2020-07-11 07:48:42"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:51:32.281 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-11 15:51:32.282 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:51:32.282 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:32.282 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-11 15:51:32.283 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:51:32.506 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 225
2020-07-11 15:51:32.507 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:49:12"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:51:35.853 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 15:51:35.854 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:51:35.854 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:35.854 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 15:51:35.855 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:51:35.938 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 85
2020-07-11 15:51:35.939 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 15:51:38.444 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/getByPage
2020-07-11 15:51:38.445 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:51:38.445 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:38.446 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.getByPage
2020-07-11 15:51:38.446 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:51:38.701 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 257
2020-07-11 15:51:38.701 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-25 07:53:40","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Ljp-AHExDAAArr4MOxxQ281.jpg","name":"23","nickname":"鲜肉","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"123@qq.com","userId":1,"username":"鸡哥"},{"createdTime":"2020-05-25 09:09:48","header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"updateTime":"2020-05-25 11:08:30","userEmail":"12345678@qq.com","userId":3,"username":"test"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:51:39.706 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-11 15:51:39.707 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:51:39.708 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:39.708 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-11 15:51:39.709 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:51:39.810 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 104
2020-07-11 15:51:39.811 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-11 15:51:40.749 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-07-11 15:51:40.749 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-11 15:51:40.750 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:40.750 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-07-11 15:51:40.751 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-11 15:51:41.144 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 395
2020-07-11 15:51:41.145 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":0,"blogComment":1,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":4,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":5,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":6},"commentBlog":"1264726600279891968","commentContent":"33333333333","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-06-29 22:14:10","id":"1277606288085958656","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":0,"blogComment":2,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":6,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":8},"commentBlog":"1264726600279891968","commentContent":"55555555555555","commentFlag":false,"commentGood":0,"commentUser":3,"createdTime":"20-07-10 13:29:19","id":"1281460473655173120","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}},{"blog":{"blogCollection":1,"blogComment":3,"blogContent":"<p>Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。</p>\n<p>在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。其中新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。</p>\n<p>这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。</p>\n<p>堆的内存模型大致为：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191117211513826.png\" /></p>\n<p>默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为&nbsp;1:2&nbsp;( 该值可以通过参数 &ndash;XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。</p>\n<p>默认的，Edem : from : to = 8 : 1 : 1&nbsp;( 可以通过参数 &ndash;XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。</p>\n<p>&nbsp;</p>\n<p>根据垃圾回收机制的不同，Java堆有可能拥有不同的结构，最为常见的就是将整个Java堆分为</p>\n<p>新生代和老年代。其中新生带存放新生的对象或者年龄不大的对象，老年代则存放老年对象。</p>\n<p>新生代分为den区、s0区、s1区，s0和s1也被称为from和to区域，他们是两块大小相等并且可以互相角色的空间。</p>\n<p>绝大多数情况下，对象首先分配在eden区，在新生代回收后，如果对象还存活，则进入s0或s1区，之后每经过一次</p>\n<p>新生代回收，如果对象存活则它的年龄就加1，对象达到一定的年龄后（默认15），则进入老年代。</p>\n<p>&nbsp;</p>\n<p>新生代：存放刚出生不久的对象</p>\n<p>老年代：存放比较活跃、经常被引用的对象</p>\n<p>垃圾回收机制在新生代比较频繁</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103113563</p>","blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":9,"blogTitle":"新生代与老年代","blogType":1,"createdTime":"2020-05-25 01:14:56","version":13},"commentBlog":"1264726600279891968","commentContent":"333333333333","commentFlag":false,"commentGood":1,"commentUser":3,"createdTime":"20-07-11 08:47:36","id":"1281751963203772416","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7Li1uAbVdHAAAy9lUatg0354.png","name":"张三","nickname":"张三","sex":1,"userEmail":"12345678@qq.com","userId":3,"username":"test","version":7}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-07-11 15:51:57.987 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-07-11 15:51:57.988 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-11 15:51:57.989 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-11 15:51:57.989 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-07-11 15:51:57.990 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-11 15:51:58.062 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 75
2020-07-11 15:51:58.063 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":13,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
