2020-05-23 06:58:10.359 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-23 08:43:26.352 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 08:43:26.587 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 08:43:26.868 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 08:43:28.257 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 08:43:28.260 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 08:43:47.457 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 08:43:47.484 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 08:43:47.485 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 08:43:47.511 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 08:43:47.519 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 19323(Long), {"code":20000,"data":{"token":"D9F46A13359032659983CF3BFEF0320C"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 08:43:47.544 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 08:43:47.600 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 08:43:47.602 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 10030(Long), {"code":20000,"data":{"token":"AFD97760370DDB20893E1DE0D5E4B32B"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 08:43:47.639 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 08:43:47.717 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 08:43:48.503 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 08:43:48.508 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 3178(Long), {"code":20000,"data":{"token":"7C3C369A9DF299718333B98F6E204A1B"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 08:43:48.616 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 08:43:56.057 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 08:43:56.059 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 08:43:56.107 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 08:43:56.163 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 08:43:56.166 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 116(Long), {"code":20000,"data":{"token":"BEE2E3EEA2F4D64423F2C8805709CF4E"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 08:43:56.263 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 08:43:56.405 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 08:43:56.406 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 08:43:56.506 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 09:25:51.734 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-23 09:29:35.704 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 09:29:35.743 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 09:29:35.935 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 09:29:36.114 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 09:29:36.119 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 415(Long), {"code":20000,"data":{"token":"507EDD86E51AD195E0FB55EF976D92C3"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 09:29:36.209 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 09:29:36.353 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 09:29:36.354 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 09:29:36.827 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:13:05.481 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 10:13:05.487 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 10:13:05.542 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 10:13:05.605 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:13:05.644 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 213(Long), {"code":20000,"data":{"token":"EB41D4CFABE20A1C03B5770955C53D72"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:13:05.732 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:13:06.114 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:13:06.114 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:13:06.203 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:20:35.569 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:20:35.572 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 7(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:20:35.663 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:28:52.998 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:28:53.001 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:28:53.264 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:29:45.520 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:29:45.523 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:29:45.710 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:29:45.904 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:29:45.904 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 609(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:29:46.094 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:30:10.591 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:30:10.592 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:30:10.680 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:30:10.785 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:30:10.786 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 242(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:30:10.927 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:30:20.211 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:30:20.213 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:30:20.401 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:30:21.030 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:30:21.030 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:30:21.110 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:30:21.187 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:30:21.187 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 230(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:30:21.418 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:30:42.612 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:30:42.616 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:30:42.746 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:30:43.068 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:30:43.069 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:30:43.127 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:30:43.187 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:30:43.188 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 123(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:30:43.290 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:31:30.566 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:31:30.567 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:31:30.666 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:31:31.324 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:31:31.325 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:31:31.371 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:31:31.432 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:31:31.434 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 106(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:31:31.531 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:38:17.707 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:38:17.708 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:38:17.796 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:38:17.907 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:38:17.908 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 213(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:38:18.005 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:38:19.262 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:38:19.269 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 7(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:38:19.372 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:38:19.912 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:38:19.913 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:38:19.975 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:38:20.049 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:38:20.053 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 120(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:38:20.164 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:39:19.350 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:39:19.352 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:39:19.497 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:39:19.759 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:39:19.761 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:39:19.819 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:39:19.884 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:39:19.886 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 123(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:39:19.979 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:40:20.085 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:40:20.085 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:40:20.131 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:40:20.198 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:40:20.199 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 107(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:40:20.294 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:40:26.201 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:40:26.203 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:40:26.308 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:40:26.838 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:40:26.838 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:40:26.878 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:40:26.938 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:40:26.938 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 100(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:40:27.028 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:50:12.065 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:50:12.066 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:50:12.124 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:50:12.213 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:50:12.215 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 123(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:50:12.306 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:50:13.833 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:50:13.834 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:50:13.933 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:50:14.258 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:50:14.259 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:50:14.308 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:50:14.374 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:50:14.383 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 110(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:50:14.489 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:51:19.216 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:51:19.218 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:51:19.406 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:51:19.628 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:51:19.629 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:51:19.682 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:51:19.748 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:51:19.749 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 120(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:51:19.850 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:53:39.323 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:53:39.326 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:53:39.505 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:53:39.602 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:53:39.605 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 439(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:53:39.706 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:54:20.236 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:54:20.237 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:54:20.286 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:54:20.345 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:54:20.348 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 135(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:54:20.450 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:55:27.502 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:55:27.504 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:55:27.677 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 10:55:28.249 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 10:55:28.250 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 10:55:28.304 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 10:55:28.373 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 10:55:28.375 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 161(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 10:55:28.478 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:14:31.279 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:14:31.309 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 12(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:14:31.535 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:14:32.218 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:14:32.234 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:14:32.639 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:14:32.714 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:14:32.716 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 549(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:14:32.809 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:18:44.856 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:18:44.858 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 6(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:18:44.960 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:18:45.565 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:18:45.565 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:18:45.611 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:18:45.675 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:18:45.676 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 112(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:18:45.764 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:18:56.863 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:18:56.864 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 0(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:18:56.968 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:18:57.257 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:18:57.258 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:18:57.304 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:18:57.376 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:18:57.380 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 105(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:18:57.498 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:28:10.410 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:28:10.418 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 9(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:28:10.517 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:28:11.837 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:28:11.839 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:28:11.888 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:28:11.943 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:28:11.944 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 879(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:28:12.048 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:35:08.336 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:35:08.341 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:35:08.410 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:35:08.475 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:35:08.478 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 233(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:35:08.581 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:35:25.910 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:35:25.912 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 9(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:35:26.019 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:35:26.654 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:35:26.655 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:35:26.709 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:35:26.867 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:35:26.869 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 132(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:35:26.970 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:35:45.485 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:35:45.487 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 1(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:35:45.612 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:35:45.873 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:35:45.874 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:35:45.923 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:35:45.976 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:35:45.977 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 113(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:35:46.075 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:36:26.762 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:36:26.764 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 6(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:36:26.867 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 11:36:27.137 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 11:36:27.138 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 11:36:27.200 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 11:36:27.257 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 11:36:27.258 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 126(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 11:36:27.358 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:13:14.761 DEBUG [main]com.jg.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2020-05-23 12:14:14.015 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 12:14:14.068 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 12:14:14.160 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 12:14:14.366 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:14:14.372 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 282(Long), {"code":20000,"data":{"token":"EBC87F6D1FE3642DDA77607CC45DC05B"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:14:14.473 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:14:14.717 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:14:14.719 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:14:14.813 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:14:15.373 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:14:15.374 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:14:15.423 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:14:15.479 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:14:15.479 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 120(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:14:15.578 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:14:44.085 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:14:44.086 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:14:44.185 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:14:44.286 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:14:44.288 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 214(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:14:44.380 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:14:51.100 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:14:51.104 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 14(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:14:51.203 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:14:51.841 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:14:51.842 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:14:51.892 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:14:51.952 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:14:51.954 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 116(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:14:52.048 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:17:06.585 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:17:06.586 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:17:06.648 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:17:06.983 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:17:06.985 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 146(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:17:07.100 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:17:27.394 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:17:27.396 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:17:27.444 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:17:27.499 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:17:27.502 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 115(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:17:27.594 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:17:30.261 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:17:30.261 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:17:30.371 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:17:30.967 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:17:30.969 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:17:31.286 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:17:31.364 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:17:31.364 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 384(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:17:31.466 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:18:14.627 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:18:14.630 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:18:14.770 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:18:15.017 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:18:15.018 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:18:15.069 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:18:15.135 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:18:15.136 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 120(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:18:15.606 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:20:50.315 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:20:50.317 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:20:50.388 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:20:50.460 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:20:50.463 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 189(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:20:50.577 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:20:53.505 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:20:53.507 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:20:53.603 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:20:54.176 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:20:54.177 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:20:54.225 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:20:54.283 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:20:54.284 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 105(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:20:54.378 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:21:32.882 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:21:32.883 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:21:33.296 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:21:33.359 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:21:33.366 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 479(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:21:33.466 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:42:59.976 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:42:59.981 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:43:00.044 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 12:43:00.108 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:43:00.110 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 228(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":0,"typeBlogCount":0,"typeId":9,"typeName":"springBoot"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:43:00.228 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:43:05.216 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.deleteById.debug:159 -==>  Preparing: update bl_type set deleted = 1 where type_id = ? 
2020-05-23 12:43:05.217 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.deleteById.debug:159 -==> Parameters: 9(Integer)
2020-05-23 12:43:05.415 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.deleteById.debug:159 -<==    Updates: 1
2020-05-23 12:43:05.472 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:43:05.474 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/delete/9(String), [9](String), 1(Integer), null, POST(String), 354(Long), {"code":20000,"msg":"删除成功"}(String), 127.0.0.1(String)
2020-05-23 12:43:05.569 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:43:05.953 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:43:05.954 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:43:06.008 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 12:43:06.074 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:43:06.076 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 114(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:43:06.168 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:48:35.055 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:48:35.059 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:48:35.126 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 12:48:35.208 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:48:35.209 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 172(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:48:35.309 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:48:36.642 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:48:36.643 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:48:36.743 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:48:37.333 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:48:37.334 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:48:37.425 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 12:48:37.480 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:48:37.483 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 183(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:48:37.582 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:50:19.277 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:50:19.282 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 50(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:50:19.379 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 12:50:19.962 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 12:50:19.963 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 12:50:20.026 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 12:50:20.086 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 12:50:20.087 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 128(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 12:50:20.186 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:01:54.966 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:01:54.973 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:01:55.032 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:01:55.098 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:01:55.102 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 182(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:01:55.201 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:04:58.049 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:04:58.055 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:04:58.126 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:04:58.203 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:04:58.206 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 186(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:04:58.311 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:05:41.285 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:05:41.287 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:05:41.346 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:05:41.420 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:05:41.424 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 131(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:05:41.532 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:07:50.711 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:07:50.712 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:07:50.964 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:07:51.021 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:07:51.023 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 341(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:07:51.119 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:09:40.127 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:09:40.129 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:09:40.228 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:09:40.286 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:09:40.288 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 236(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:09:40.384 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:11:04.056 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:11:04.057 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:11:04.107 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:11:04.446 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:11:04.447 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 117(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:11:04.546 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:11:07.867 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:11:07.868 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:11:07.975 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:11:08.628 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:11:08.629 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:11:08.681 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:11:08.745 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:11:08.747 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 127(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:11:08.849 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:25:48.217 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:25:48.224 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:25:48.282 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:25:48.354 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:25:48.357 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 224(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:25:48.450 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:25:49.198 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:25:49.198 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 6(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:25:49.291 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:25:49.582 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:25:49.583 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:25:49.653 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:25:49.709 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:25:49.710 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 131(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:25:49.804 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:26:05.823 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:26:05.824 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:26:05.962 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:26:06.507 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:26:06.508 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:26:06.558 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:26:06.620 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:26:06.623 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 116(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:26:06.720 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:26:43.915 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:26:43.916 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:26:44.213 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:26:44.839 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:26:44.840 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:26:44.933 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:26:45.057 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:26:45.059 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 251(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:26:45.236 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:28:09.559 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:28:09.560 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:28:09.653 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:28:09.966 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:28:09.967 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:28:10.013 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 3
2020-05-23 13:28:10.065 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:28:10.066 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 175(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:28:10.156 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:28:27.641 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getByName.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and type_name = ? 
2020-05-23 13:28:27.641 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getByName.debug:159 -==> Parameters: python(String)
2020-05-23 13:28:27.691 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getByName.debug:159 -<==      Total: 0
2020-05-23 13:28:27.841 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.insert.debug:159 -==>  Preparing: insert into bl_type(type_name) values( ? ) 
2020-05-23 13:28:27.841 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.insert.debug:159 -==> Parameters: python(String)
2020-05-23 13:28:27.931 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.insert.debug:159 -<==    Updates: 1
2020-05-23 13:28:27.991 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:28:27.991 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/save(String), [Type(typeId=null, typeName=python, typeBlogCount=null, enable=null, deleted=null)](String), 1(Integer), null, POST(String), 410(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 13:28:28.081 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:28:28.182 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:28:28.183 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:28:28.229 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 13:28:28.281 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:28:28.282 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 101(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:28:28.379 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:29:36.747 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:29:36.747 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:29:36.964 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:29:37.377 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:29:37.378 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:29:37.449 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 4
2020-05-23 13:29:37.500 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:29:37.500 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 255(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:29:37.594 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:29:51.068 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getByName.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and type_name = ? 
2020-05-23 13:29:51.070 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getByName.debug:159 -==> Parameters: redis(String)
2020-05-23 13:29:51.115 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getByName.debug:159 -<==      Total: 0
2020-05-23 13:29:51.166 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.insert.debug:159 -==>  Preparing: insert into bl_type(type_name) values( ? ) 
2020-05-23 13:29:51.168 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.insert.debug:159 -==> Parameters: redis(String)
2020-05-23 13:29:51.258 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.insert.debug:159 -<==    Updates: 1
2020-05-23 13:29:51.308 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:29:51.309 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/save(String), [Type(typeId=null, typeName=redis, typeBlogCount=null, enable=null, deleted=null)](String), 1(Integer), null, POST(String), 251(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 13:29:51.404 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:29:51.490 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:29:51.491 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:29:51.538 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:29:51.593 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:29:51.595 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 106(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:29:51.689 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:32:48.565 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:32:48.574 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 49(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:32:48.669 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:32:49.239 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:32:49.241 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:32:49.291 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:32:49.347 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:32:49.349 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 111(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:32:49.743 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:33:49.312 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:33:49.314 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:33:49.507 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:33:49.691 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:33:49.693 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 253(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:33:49.784 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:35:08.149 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:35:08.154 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 6(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:35:08.247 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:35:08.537 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:35:08.538 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:35:08.588 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:35:08.643 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:35:08.646 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 108(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:35:08.740 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:37:30.770 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:37:30.772 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:37:30.864 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:37:31.484 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:37:31.486 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:37:31.534 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:37:31.611 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:37:31.613 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 116(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:37:31.704 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:48:36.922 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:48:36.928 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:48:36.981 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:48:37.041 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:48:37.043 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 217(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:48:37.138 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:48:41.250 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:48:41.253 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 7(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:48:41.348 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:48:42.000 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:48:42.001 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:48:42.046 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:48:42.106 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:48:42.108 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 100(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:48:42.200 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:51:14.116 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:51:14.118 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 8(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:51:14.363 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 13:51:15.102 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 13:51:15.103 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 13:51:15.152 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 13:51:15.209 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 13:51:15.210 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 164(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 13:51:15.303 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:00:38.152 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:00:38.161 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 20(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:00:38.258 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:00:38.948 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:00:38.953 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:00:39.003 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:00:39.074 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:00:39.074 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 158(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:00:39.173 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:01:49.217 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:01:49.218 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:01:49.316 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:01:49.879 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:01:49.883 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:01:49.928 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:01:50.133 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:01:50.133 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 130(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:01:50.230 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:07:03.622 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:07:03.628 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:07:03.684 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:07:03.754 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:07:03.757 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 192(Long), {"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:07:04.219 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:07:07.126 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-05-23 14:07:07.144 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 6(Integer)
2020-05-23 14:07:07.193 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-05-23 14:07:07.515 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.update.debug:159 -==>  Preparing: update bl_type SET type_name = ?, enable = ? where type_id = ? 
2020-05-23 14:07:07.515 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.update.debug:159 -==> Parameters: JavaBoot(String), 0(Integer), 6(Integer)
2020-05-23 14:07:07.610 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.update.debug:159 -<==    Updates: 1
2020-05-23 14:07:07.661 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:07:07.662 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/disabled/6(String), [6](String), 1(Integer), null, PUT(String), 545(Long), {"code":20000,"msg":"未启用"}(String), 127.0.0.1(String)
2020-05-23 14:07:07.752 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:07:08.220 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:07:08.221 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:07:08.268 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:07:08.321 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:07:08.322 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 130(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:07:08.437 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:00.250 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:00.257 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 128(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:00.352 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:01.579 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 14:18:01.581 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 14:18:01.635 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 14:18:01.695 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:01.697 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 119(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:01.790 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:01.848 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:18:01.849 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:18:01.894 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:18:01.946 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:01.947 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 358(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:02.040 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:02.770 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:02.771 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:02.863 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:03.070 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 14:18:03.071 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 14:18:03.117 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 14:18:03.183 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:03.184 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 104(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:03.274 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:03.377 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:18:03.378 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:18:03.424 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:18:03.501 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:03.502 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 116(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:03.593 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:42.495 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:42.543 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 12(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:42.791 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:43.126 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 14:18:43.127 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 14:18:43.175 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 14:18:43.233 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:43.234 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 195(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:43.329 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:18:43.356 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:18:43.357 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:18:43.428 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:18:43.543 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:18:43.545 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 137(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:18:43.644 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:24:07.355 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:24:07.362 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 29(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:24:07.456 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:24:07.747 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 14:24:07.749 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 14:24:07.804 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 14:24:07.856 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:24:07.857 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 114(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:24:07.949 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:24:08.052 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 14:24:08.053 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 14:24:08.102 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 14:24:08.222 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:24:08.223 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 104(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:24:08.314 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 14:24:17.699 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where type_id = ? and deleted = 0 
2020-05-23 14:24:17.701 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -==> Parameters: 6(Integer)
2020-05-23 14:24:17.844 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getById.debug:159 -<==      Total: 1
2020-05-23 14:24:17.957 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 14:24:17.958 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/get/6(String), [6](String), 1(Integer), null, POST(String), 366(Long), {"code":20000,"data":{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 14:24:18.049 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 16:35:56.627 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 16:35:56.669 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 16:35:56.719 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 16:35:56.853 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 16:35:56.855 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 970(Long), {"code":20000,"data":{"token":"42F9B273D6D6BFF255F870B79DDBDAFF"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 16:35:56.948 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 16:35:57.062 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 16:35:57.063 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 16:35:57.155 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 16:35:57.820 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 16:35:57.822 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 16:35:57.869 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 16:35:57.925 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 16:35:57.926 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 16:35:57.971 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 16:35:58.027 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 16:35:58.028 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 167(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 16:35:58.120 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 16:35:58.175 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 16:35:58.177 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 261(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 16:35:58.270 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 16:36:03.904 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 16:36:03.904 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 16:36:03.950 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 16:36:04.031 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 16:36:04.033 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 124(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 16:36:04.125 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:14:49.099 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 17:14:49.135 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 17:14:49.245 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 17:14:49.408 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:14:49.409 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 428(Long), {"code":20000,"data":{"token":"15C46A909039934CC2432E7AFF07B7B8"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:14:49.510 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:14:49.653 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:14:49.671 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:14:49.771 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:14:50.307 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:14:50.308 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:14:50.351 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count, enable from bl_type where deleted = 0 
2020-05-23 17:14:50.352 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -==> Parameters: 
2020-05-23 17:14:50.356 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:14:50.403 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getAll.debug:159 -<==      Total: 5
2020-05-23 17:14:50.445 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:14:50.447 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 112(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:14:50.472 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:14:50.473 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 123(Long), {"code":20000,"data":[{"enable":0,"typeBlogCount":0,"typeId":6,"typeName":"JavaBoot"},{"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"python"},{"enable":1,"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:14:50.544 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:14:50.572 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:14:55.669 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:14:55.670 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:14:55.733 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:14:55.734 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:14:55.735 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:14:55.800 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:14:56.483 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:14:56.484 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 1277(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:14:56.579 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:20:34.734 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:20:34.737 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:20:34.792 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:20:34.793 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:20:34.795 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:20:34.842 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:20:34.995 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:20:34.996 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 319(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:20:35.094 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:26:33.707 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:26:33.713 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:26:33.764 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:26:33.766 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:26:33.767 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:26:33.814 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:26:33.993 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:26:33.996 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 366(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:26:34.087 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:31:47.185 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:31:47.189 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:31:47.247 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:31:47.249 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:31:47.250 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:31:47.295 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:31:47.696 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:31:47.697 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 577(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:31:47.789 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:33:15.744 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:33:15.746 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:33:15.799 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:33:15.801 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:33:15.802 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:33:15.849 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:33:15.992 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:33:15.994 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 328(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:33:16.087 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:33:53.968 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:33:53.969 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:33:54.017 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:33:54.018 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:33:54.020 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:33:54.063 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:33:54.205 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:33:54.206 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 422(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:33:54.297 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:36:26.962 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:36:26.965 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 7(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:36:27.059 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:36:27.816 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:36:27.818 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:36:27.865 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:36:27.867 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:36:27.868 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:36:27.916 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:36:27.918 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:36:27.920 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:36:27.920 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:36:27.921 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 106(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:36:27.967 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:36:28.014 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:36:28.118 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:36:28.119 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 298(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:36:28.211 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:37:19.674 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:37:19.675 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:37:19.724 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:37:19.725 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:37:19.726 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:37:19.771 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:37:19.926 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:37:19.928 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 366(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:37:20.022 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:37:21.030 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:37:21.031 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:37:21.125 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:37:21.570 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:37:21.571 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:37:21.619 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:37:21.621 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:37:21.622 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:37:21.668 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:37:21.727 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:37:21.728 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:37:21.772 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:37:21.840 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:37:21.841 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 388(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:37:21.845 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:37:21.846 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 99(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:37:21.936 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:37:21.937 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:38:42.650 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:38:42.653 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 7(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:38:42.744 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:38:43.254 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:38:43.255 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:38:43.305 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:38:43.308 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:38:43.309 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:38:43.361 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:38:43.507 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:38:43.510 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 306(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:38:43.517 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:38:43.518 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:38:43.565 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:38:43.599 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:38:43.621 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:38:43.622 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 110(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:38:43.716 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:41:26.841 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:41:26.843 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:41:26.952 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:41:27.502 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:41:27.503 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:41:27.551 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:41:27.576 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:41:27.577 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:41:27.606 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:41:27.607 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 109(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:41:27.626 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:41:27.627 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:41:27.627 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:41:27.674 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:41:27.704 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:41:27.826 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:41:27.827 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 320(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:41:27.930 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:43:32.156 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:43:32.159 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 6(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:43:32.261 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:43:32.949 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:43:32.950 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:43:32.994 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:43:32.998 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:43:33.003 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:43:33.048 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:43:33.051 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:43:33.053 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:43:33.067 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:43:33.069 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 141(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:43:33.100 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:43:33.161 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:43:33.238 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:43:33.239 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 324(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:43:33.689 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:44:38.354 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:44:38.356 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 9(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:44:38.450 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:44:39.178 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:44:39.179 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:44:39.226 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:44:39.229 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:44:39.231 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:44:39.277 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:44:39.279 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:44:39.279 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:44:39.280 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:44:39.281 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 107(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:44:39.337 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:44:39.371 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:44:39.480 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:44:39.481 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 306(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:44:39.573 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:45:38.401 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:45:38.403 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 10(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:45:38.500 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:45:39.167 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 17:45:39.168 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 17:45:39.220 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 17:45:39.222 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:45:39.224 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:45:39.268 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:45:39.270 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:45:39.270 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:45:39.272 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:45:39.273 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 121(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:45:39.314 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:45:39.364 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:45:39.453 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:45:39.454 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 301(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:45:39.546 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:51:08.893 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:51:08.897 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:51:08.948 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:51:08.950 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:51:08.951 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:51:08.997 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:51:09.166 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:51:09.171 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 342(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:51:09.280 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:51:25.541 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:51:25.542 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:51:25.590 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:51:25.592 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:51:25.593 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:51:25.638 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:51:25.778 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:51:25.779 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 288(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:51:25.872 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:52:10.788 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:52:10.789 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:52:10.838 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:52:10.840 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:52:10.841 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:52:10.887 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:52:11.035 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:52:11.037 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 289(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:52:11.131 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:53:44.060 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:53:44.062 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:53:44.114 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:53:44.116 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:53:44.117 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:53:44.162 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:53:44.305 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:53:44.307 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 471(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:53:44.402 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:55:23.676 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:55:23.680 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:55:23.745 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:55:23.751 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:55:23.753 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:55:23.800 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:55:23.950 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:55:23.955 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 369(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:55:24.049 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:55:58.867 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:55:58.868 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:55:58.920 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:55:58.922 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:55:58.923 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:55:58.972 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:55:59.125 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:55:59.127 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 300(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:55:59.223 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 17:59:36.642 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 17:59:36.647 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 17:59:36.701 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 17:59:36.702 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 17:59:36.704 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 17:59:36.748 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 17:59:36.894 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 17:59:36.895 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 338(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 17:59:36.985 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:06:45.188 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:06:45.195 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 70(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:06:45.294 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:06:46.047 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:06:46.048 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:06:46.105 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:06:46.111 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:06:46.113 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:06:46.165 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:06:46.166 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:06:46.166 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:06:46.167 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:06:46.167 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 126(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:06:46.214 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:06:46.261 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:06:46.365 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:06:46.367 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 319(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:06:46.466 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:42:22.007 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-05-23 18:42:22.021 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-05-23 18:42:22.074 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.AdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-05-23 18:42:22.145 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:42:22.147 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/login(String), [Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)](String), 1(Integer), null, POST(String), 166(Long), {"code":20000,"data":{"token":"1A4D37CAF50390D597E1AC8B9F6B11B1"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:42:22.244 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:42:22.379 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:42:22.439 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:42:22.539 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:42:23.075 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:42:23.076 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:42:23.122 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:42:23.132 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:42:23.133 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:42:23.187 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:42:23.190 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:42:23.192 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:42:23.195 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:42:23.198 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 107(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:42:23.237 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:42:23.290 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:42:23.378 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:42:23.379 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 300(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:42:23.471 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:43:18.270 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:43:18.272 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 7(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:43:18.365 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:43:18.789 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:43:18.790 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:43:18.837 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:43:18.889 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:43:18.890 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 149(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:43:18.984 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:43:22.660 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:43:22.661 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:43:22.717 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:43:22.718 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:43:22.719 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:43:22.768 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:43:22.913 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:43:22.914 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 301(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:43:23.011 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:45:08.445 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:45:08.450 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 11(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:45:08.547 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:45:08.935 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:45:08.938 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:45:08.988 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:45:09.046 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:45:09.047 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 166(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:45:09.140 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:45:09.241 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:45:09.242 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:45:09.294 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:45:09.295 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:45:09.296 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:45:09.344 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:45:09.540 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:45:09.542 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 307(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:45:09.639 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:53:14.927 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:53:14.943 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 9(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:53:15.037 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:53:15.703 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:53:15.704 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:53:15.756 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:53:15.756 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:53:15.760 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:53:15.807 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:53:15.808 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:53:15.809 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:53:15.817 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:53:15.819 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 208(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:53:15.853 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:53:15.909 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:53:15.995 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:53:15.996 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 332(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:53:16.094 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:54:07.773 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:54:07.774 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:54:07.970 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:54:08.632 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:54:08.633 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:54:08.678 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:54:08.687 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:54:08.688 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:54:08.728 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:54:08.729 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 123(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:54:08.734 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:54:08.735 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:54:08.736 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:54:08.784 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:54:08.821 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:54:09.034 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:54:09.035 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 321(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:54:09.138 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:54:50.757 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:54:50.758 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:54:50.853 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:54:51.582 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:54:51.583 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:54:51.631 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:54:51.661 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:54:51.665 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:54:51.700 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:54:51.701 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 113(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:54:51.714 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:54:51.715 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:54:51.716 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:54:51.763 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:54:51.798 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:54:51.920 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:54:51.923 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 325(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:54:52.017 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:55:39.227 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:55:39.235 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 25(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:55:39.462 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:55:40.125 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 18:55:40.126 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 18:55:40.174 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 18:55:40.367 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:55:40.368 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 112(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:55:40.412 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 18:55:40.413 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 18:55:40.462 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 18:55:40.463 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 18:55:40.465 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 18:55:40.466 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 18:55:40.512 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 18:55:40.671 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 18:55:40.672 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 532(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 18:55:40.768 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:09:04.038 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:09:04.046 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:09:04.151 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:09:04.781 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 19:09:04.783 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 19:09:04.840 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 19:09:04.842 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:09:04.845 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:09:04.912 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 19:09:04.914 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:09:04.915 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:09:04.918 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:09:04.919 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 158(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:09:04.963 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:09:05.016 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:09:05.122 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:09:05.124 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 363(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:09:05.218 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:28:54.886 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:28:54.893 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:28:55.179 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:28:56.069 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 19:28:56.070 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 19:28:56.119 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 19:28:56.124 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:28:56.125 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:28:57.453 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 19:28:57.454 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:28:57.455 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:28:57.481 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:28:57.482 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 113(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:28:57.500 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:28:57.575 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:28:57.650 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:28:57.651 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 1577(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:28:57.743 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:29:24.931 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:29:24.945 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 17(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:29:25.183 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:29:25.672 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:29:25.673 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:29:25.799 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 19:29:25.802 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:29:25.803 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:29:25.805 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 19:29:25.806 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 19:29:25.899 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:29:25.900 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 19:29:26.216 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:29:26.217 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 237(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:29:26.416 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:29:26.427 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:29:26.429 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 954(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709837061111808","blogRead":0,"blogTitle":"博客2","createdTime":"2020-05-19 11:40:59","typeName":"JavaBoot","updateTime":"2020-05-19 11:40:59"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709865968254976","blogRead":0,"blogTitle":"博客3","createdTime":"2020-05-19 11:41:06","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262709896800583680","blogRead":0,"blogTitle":"博客4","createdTime":"2020-05-19 11:41:14","typeName":"JavaBoot","updateTime":"2020-05-19 11:41:14"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262710012693397504","blogRead":0,"blogTitle":"博客5","createdTime":"2020-05-19 11:41:41","typeName":"lINUX","updateTime":"2020-05-19 11:41:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1262711622848954368","blogRead":0,"blogTitle":"博客6","createdTime":"2020-05-19 11:48:05","typeName":"lINUX","updateTime":"2020-05-19 11:48:05"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:29:26.820 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:35:32.824 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:35:32.829 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264158016633778176(String), 程序员到底要不要重复造轮子？(String), null, <p>关于这个话题，现在这里阐述立场：就公司工作而言，不建议重复造轮子。就个人技术而言，强烈建议造轮子！</p>
<p>程序员圈子里流行这么一句话：&ldquo;不要重复造轮子&rdquo;。它的原文是：&ldquo;Stop Trying to Reinvent the Wheel&rdquo;，意思是&ldquo;不要重复发明轮子&rdquo;。</p>
<p>首先我们要搞清楚两个概念 &mdash;&mdash; 造轮子和发明轮子。轮子是在距今6800年前被发明出来，在此之前我们的祖先可能已经就在尝试对轮子的创造。从三角形、四边形、五边形等等，一直到最后的圆形轮子，每种轮子都不一样，这叫做发明轮子。</p>
<p>而当轮子的形状确定后，再发明其它形状的轮子就没有意义了，改进轮子才是重点，于是就有了石轮、木轮、空心木轮、气轮的转变。而现在，气轮也有多种款式，适用于不同的场景，这叫做造轮子。</p>
<p>可以看出，发明轮子已经变得毫无意义，但是造轮子依然是人们所关注的焦点。</p>
<p>jdbc操作数据库过于繁琐，所以有了hibernate。hibernate过于笨重，因此有了轻量级的mybatis。mybatis 手写sql比较麻烦，因此衍生出了通用Mapper、mybatisplus等框架，struts2浪费资源，所以有了单例的SpringMVC。。。这就是重复造轮子的过程，了解现有轮子的原理和利弊，加以改进，这并不是一个无意义的过程。</p>
<p>造轮子是一种学习方式，造轮子前需要对现有的轮子理解透彻，我相信mybatisplus的作者一定熟读了mybatis的源码，这样才能把自己的轮子造的好，这是自我能力提高的表现，同时可以增加自己的知名度。有的人工作了五六年依然只会crud，有的人已经靠造轮子成了大V。有的人依然沉溺于旧技术而排斥新技术，有的人已经靠造轮子写了书。有的人在小公司使用SSM写完了一生的项目，有的人靠造轮子已经被大公司挖走。。</p>
<p>造轮子是学习技术的极好途径，当你要造一个轮子时，必定要去阅读类似的源码。初步可能寸步难行，而当你攻破了一个、两个、三个关卡之后不知不觉的就理解了他的架构方式，你会发现高手之所以是高手，代码可读性真的高。有些的代码读起来很享受，而有些人的代码读起来让人想死。而当你理解了框架源码后，自己的技术也就有了质的飞跃。</p>(String), 10(Integer), null, null
2020-05-23 19:35:32.930 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:35:32.987 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:35:32.989 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=<p>关于这个话题，现在这里阐述立场：就公司工作而言，不建议重复造轮子。就个人技术而言，强烈建议造轮子！</p>
<p>程序员圈子里流行这么一句话：&ldquo;不要重复造轮子&rdquo;。它的原文是：&ldquo;Stop Trying to Reinvent the Wheel&rdquo;，意思是&ldquo;不要重复发明轮子&rdquo;。</p>
<p>首先我们要搞清楚两个概念 &mdash;&mdash; 造轮子和发明轮子。轮子是在距今6800年前被发明出来，在此之前我们的祖先可能已经就在尝试对轮子的创造。从三角形、四边形、五边形等等，一直到最后的圆形轮子，每种轮子都不一样，这叫做发明轮子。</p>
<p>而当轮子的形状确定后，再发明其它形状的轮子就没有意义了，改进轮子才是重点，于是就有了石轮、木轮、空心木轮、气轮的转变。而现在，气轮也有多种款式，适用于不同的场景，这叫做造轮子。</p>
<p>可以看出，发明轮子已经变得毫无意义，但是造轮子依然是人们所关注的焦点。</p>
<p>jdbc操作数据库过于繁琐，所以有了hibernate。hibernate过于笨重，因此有了轻量级的mybatis。mybatis 手写sql比较麻烦，因此衍生出了通用Mapper、mybatisplus等框架，struts2浪费资源，所以有了单例的SpringMVC。。。这就是重复造轮子的过程，了解现有轮子的原理和利弊，加以改进，这并不是一个无意义的过程。</p>
<p>造轮子是一种学习方式，造轮子前需要对现有的轮子理解透彻，我相信mybatisplus的作者一定熟读了mybatis的源码，这样才能把自己的轮子造的好，这是自我能力提高的表现，同时可以增加自己的知名度。有的人工作了五六年依然只会crud，有的人已经靠造轮子成了大V。有的人依然沉溺于旧技术而排斥新技术，有的人已经靠造轮子写了书。有的人在小公司使用SSM写完了一生的项目，有的人靠造轮子已经被大公司挖走。。</p>
<p>造轮子是学习技术的极好途径，当你要造一个轮子时，必定要去阅读类似的源码。初步可能寸步难行，而当你攻破了一个、两个、三个关卡之后不知不觉的就理解了他的架构方式，你会发现高手之所以是高手，代码可读性真的高。有些的代码读起来很享受，而有些人的代码读起来让人想死。而当你理解了框架源码后，自己的技术也就有了质的飞跃。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=10, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 251(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:35:33.082 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:35:33.237 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:35:33.238 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:35:33.287 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 1
2020-05-23 19:35:33.290 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:35:33.291 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:35:33.337 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:35:33.493 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:35:33.494 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=5, list=[BlogVo(blogId=1262709837061111808, blogTitle=博客2, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=JavaBoot, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-19 11:40:59, updateTime=2020-05-19 11:40:59), BlogVo(blogId=1262709865968254976, blogTitle=博客3, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=JavaBoot, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-19 11:41:06, updateTime=2020-05-19 11:41:06), BlogVo(blogId=1262709896800583680, blogTitle=博客4, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=JavaBoot, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-19 11:41:14, updateTime=2020-05-19 11:41:14), BlogVo(blogId=1262710012693397504, blogTitle=博客5, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-19 11:41:41, updateTime=2020-05-19 11:41:41), BlogVo(blogId=1262711622848954368, blogTitle=博客6, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-19 11:48:05, updateTime=2020-05-19 11:48:05)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 309(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:35:33.587 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:37:45.353 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:37:45.355 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264158572613939200(String), Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射(String), null, <p>前言<br />在前面的文章中，已经介绍了三种SqlSource的代码，下面开始介绍执行select语句对查询结果集封装的过程。</p>
<p>ResultSetHandler<br />前面的文章中得知，mybatis会将结果集按照映射配置文件中定义的映射规则，如resultMap节点，映射成相应的结果对象。</p>
<p>在StatementHandler接口执行完指定的select语句后，会将查询结果集交给ResultSetHandler完成映射处理。</p>
<p>ResultSetHandler接口代码如下：</p>
<p>/**<br />* 处理select查询的结果集<br />* @author Clinton Begin<br />*/<br />public interface ResultSetHandler {<br /><br />/**<br />* 处理结果集，生成结果集集合<br />* @param stmt<br />* @param &lt;E&gt;<br />* @return<br />* @throws SQLException<br />*/<br />&lt;E&gt; List&lt;E&gt; handleResultSets(Statement stmt) throws SQLException;<br /><br />/**<br />* 处理结果集，返回相应的游标<br />* @param stmt<br />* @param &lt;E&gt;<br />* @return<br />* @throws SQLException<br />*/<br />&lt;E&gt; Cursor&lt;E&gt; handleCursorResultSets(Statement stmt) throws SQLException;<br /><br />/**<br />* 处理存储过程<br />* @param cs<br />* @throws SQLException<br />*/<br />void handleOutputParameters(CallableStatement cs) throws SQLException;<br /><br />}<br />ResultSetHandler只有DefaultResultSetHandler一个实现，该类是处理结果集映射的核心类。核心字段如下所示：</p>(String), 10(Integer), null, null
2020-05-23 19:37:45.451 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:37:45.509 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:37:45.511 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=<p>前言<br />在前面的文章中，已经介绍了三种SqlSource的代码，下面开始介绍执行select语句对查询结果集封装的过程。</p>
<p>ResultSetHandler<br />前面的文章中得知，mybatis会将结果集按照映射配置文件中定义的映射规则，如resultMap节点，映射成相应的结果对象。</p>
<p>在StatementHandler接口执行完指定的select语句后，会将查询结果集交给ResultSetHandler完成映射处理。</p>
<p>ResultSetHandler接口代码如下：</p>
<p>/**<br />* 处理select查询的结果集<br />* @author Clinton Begin<br />*/<br />public interface ResultSetHandler {<br /><br />/**<br />* 处理结果集，生成结果集集合<br />* @param stmt<br />* @param &lt;E&gt;<br />* @return<br />* @throws SQLException<br />*/<br />&lt;E&gt; List&lt;E&gt; handleResultSets(Statement stmt) throws SQLException;<br /><br />/**<br />* 处理结果集，返回相应的游标<br />* @param stmt<br />* @param &lt;E&gt;<br />* @return<br />* @throws SQLException<br />*/<br />&lt;E&gt; Cursor&lt;E&gt; handleCursorResultSets(Statement stmt) throws SQLException;<br /><br />/**<br />* 处理存储过程<br />* @param cs<br />* @throws SQLException<br />*/<br />void handleOutputParameters(CallableStatement cs) throws SQLException;<br /><br />}<br />ResultSetHandler只有DefaultResultSetHandler一个实现，该类是处理结果集映射的核心类。核心字段如下所示：</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=10, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 159(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:37:45.609 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:37:45.750 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:37:45.751 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:37:45.799 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 2
2020-05-23 19:37:45.801 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:37:45.802 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:37:45.850 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:37:46.254 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:37:46.255 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=1, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 555(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:37:46.350 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:47:55.723 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:47:55.729 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 54(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:47:55.826 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:47:56.152 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:47:56.154 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:47:56.209 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 2
2020-05-23 19:47:56.211 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:47:56.213 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:47:56.258 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:47:56.380 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 19:47:56.381 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 19:47:56.404 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:47:56.405 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 323(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:47:56.430 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 19:47:56.598 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:47:56.781 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:47:56.782 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 110(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:47:56.876 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:48:44.554 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:48:44.555 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 6(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:48:44.646 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:48:45.189 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 19:48:45.189 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 19:48:45.237 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 19:48:45.286 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:48:45.289 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:48:45.310 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:48:45.312 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 120(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:48:45.343 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 2
2020-05-23 19:48:45.344 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:48:45.345 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:48:45.389 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:48:45.401 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:48:45.557 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:48:45.562 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 297(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:48:45.657 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:49:06.347 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:49:06.348 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264161428926574592(String), varchar字段长度最好是2的n次方-1(String), null, <p>计算机是二进制计算的，1 bytes = 8 bit ,一个字节最多可以代表的数据长度是2的8次方 11111111 在计算机中也就是-128到127。</p>
<p>而varchar类型存储变长字段的字符类型，当存储的字符串长度小于255字节时，其需要1字节的空间，当大于255字节时，需要2字节的空间。</p>
<p>使用2 ^ n长度是更好的磁盘或内存块对齐。对齐块更快。今天&ldquo;块&rdquo;的大小更大，内存和磁盘足够快，可以忽略对齐，对于非常大的块来说是非常重要的。</p>
<p>所以使用（2^n）-1 可以更好的利用磁盘空间和内存，使数据库可以在最大限度内存储更多的数据</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103929348</p>(String), 7(Integer), null, null
2020-05-23 19:49:06.441 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:49:06.497 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:49:06.498 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=<p>计算机是二进制计算的，1 bytes = 8 bit ,一个字节最多可以代表的数据长度是2的8次方 11111111 在计算机中也就是-128到127。</p>
<p>而varchar类型存储变长字段的字符类型，当存储的字符串长度小于255字节时，其需要1字节的空间，当大于255字节时，需要2字节的空间。</p>
<p>使用2 ^ n长度是更好的磁盘或内存块对齐。对齐块更快。今天&ldquo;块&rdquo;的大小更大，内存和磁盘足够快，可以忽略对齐，对于非常大的块来说是非常重要的。</p>
<p>所以使用（2^n）-1 可以更好的利用磁盘空间和内存，使数据库可以在最大限度内存储更多的数据</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/103929348</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=7, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 149(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:49:06.593 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:49:06.743 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:49:06.744 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:49:06.792 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 3
2020-05-23 19:49:06.794 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:49:06.795 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:49:06.843 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:49:06.990 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:49:06.992 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=2, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 314(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:49:07.085 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:51:12.044 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:51:12.048 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264161956096061440(String), Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource(String), null, <p>SqlSourceBuilder<br />前面我们对SqlSource和SqlNode进行了介绍，在经过SqlNode.apply方法的解析之后，Sql语句会被传递到SqlSourceBuilder中进行进一步的解析。SqlSourceBuilder主要完成了两方面的操作，一方面是解析Sql中的#{}占位符定义的属性，如jdbcType、javaType（使用较少），一方面是把#{}占位符替换成?占位符</p>
<p>SqlSourceBuilder代码如下</p>
<p><br />/**<br />* 用于进一步解析SqlSource中的${}<br />* @author Clinton Begin<br />*/<br />public class SqlSourceBuilder extends BaseBuilder {<br /><br />private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";<br /><br />public SqlSourceBuilder(Configuration configuration) {<br />super(configuration);<br />}<br /><br />/**<br />* 解析#{}<br />* @param originalSql 被SqlNode.apply解析后的sql<br />* @param parameterType 参数类型<br />* @param additionalParameters DynamicContext.bindings集合<br />* @return<br />*/<br />public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);<br />// 解析#{}<br />GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);<br />String sql = parser.parse(originalSql);<br />// 最终被解析成含有？的静态sql。创建StaticSqlSource，包含这个sql和参数<br />return new StaticSqlSource(configuration, sql, handler.getParameterMappings());<br />}<br /><br />/**<br />* 内部类，是解析#{}的核心<br />*/<br />private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {<br /><br />/**<br />* 记录解析后得到的parameterMapping集合<br />*/<br />private List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;&gt;();<br />/**<br />* 参数类型<br />*/<br />private Class&lt;?&gt; parameterType;<br />/**<br />* DynamicContext.bindings对应的类<br />*/<br />private MetaObject metaParameters;<br /><br />public ParameterMappingTokenHandler(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />super(configuration);<br />this.parameterType = parameterType;<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />/**<br />* 占位符处理器核心方法。<br />* @param content<br />* @return<br />*/<br />@Override<br />public String handleToken(String content) {<br />parameterMappings.add(buildParameterMapping(content));<br />return "?";<br />}<br /><br />private ParameterMapping buildParameterMapping(String content) {<br />Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br />String property = propertiesMap.get("property");<br />Class&lt;?&gt; propertyType;<br />if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params<br />propertyType = metaParameters.getGetterType(property);<br />} else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {<br />propertyType = parameterType;<br />} else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {<br />propertyType = java.sql.ResultSet.class;<br />} else if (property == null || Map.class.isAssignableFrom(parameterType)) {<br />propertyType = Object.class;<br />} else {<br />MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br />if (metaClass.hasGetter(property)) {<br />propertyType = metaClass.getGetterType(property);<br />} else {<br />propertyType = Object.class;<br />}<br />}<br />ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);<br />Class&lt;?&gt; javaType = propertyType;<br />String typeHandlerAlias = null;<br />for (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) {<br />String name = entry.getKey();<br />String value = entry.getValue();<br />// 处理jdbcType、javaType等一大堆东西<br />if ("javaType".equals(name)) {<br />javaType = resolveClass(value);<br />builder.javaType(javaType);<br />} else if ("jdbcType".equals(name)) {<br />builder.jdbcType(resolveJdbcType(value));<br />} else if ("mode".equals(name)) {<br />builder.mode(resolveParameterMode(value));<br />} else if ("numericScale".equals(name)) {<br />builder.numericScale(Integer.valueOf(value));<br />} else if ("resultMap".equals(name)) {<br />builder.resultMapId(value);<br />} else if ("typeHandler".equals(name)) {<br />typeHandlerAlias = value;<br />} else if ("jdbcTypeName".equals(name)) {<br />builder.jdbcTypeName(value);<br />} else if ("property".equals(name)) {<br />// Do Nothing<br />} else if ("expression".equals(name)) {<br />throw new BuilderException("Expression based parameters are not supported yet");<br />} else {<br />throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}. Valid properties are " + PARAMETER_PROPERTIES);<br />}<br />}<br />if (typeHandlerAlias != null) {<br />builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br />}<br />return builder.build();<br />}<br /><br />private Map&lt;String, String&gt; parseParameterMapping(String content) {<br />try {<br />return new ParameterExpression(content);<br />} catch (BuilderException ex) {<br />throw ex;<br />} catch (Exception ex) {<br />throw new BuilderException("Parsing error was found in mapping #{" + content + "}. Check syntax #{property|(expression), var1=value1, var2=value2, ...} ", ex);<br />}<br />}<br />}<br /><br />}<br />其中，ParameterMappingTokenHandler是SqlSourceBuilder的一个内部类，该类是解析#{}的核心。</p>
<p>ParameterMapping中记录了#{}占位符中的参数属性，字段如下</p>
<p>public class ParameterMapping {<br /><br />private Configuration configuration;<br /><br />/**<br />* 参数名<br />*/<br />private String property;<br />/**<br />* 参数模式。输入参数还是输出参数<br />*/<br />private ParameterMode mode;<br />private Class&lt;?&gt; javaType = Object.class;<br />private JdbcType jdbcType;<br />private Integer numericScale;<br />private TypeHandler&lt;?&gt; typeHandler;<br />private String resultMapId;<br />private String jdbcTypeName;<br />private String expression;<br />}<br />之后，SqlSourceBuilder会将Sql语句以及parameterMap平时集合封装成StaticSqlSource对象。StaticSqlSource.getBoundSql方法直接返回BoundSql，BoundSql代码如下。</p>
<p><br />/**<br />* Sql实体。包含sql和 参数集合<br />*<br />* @author Clinton Begin<br />*/<br />public class BoundSql {<br /><br />private final String sql;<br />/**<br />* SQL中参数属性集合#{item}这些<br />*/<br />private final List&lt;ParameterMapping&gt; parameterMappings;<br />/**<br />* 执行SQL时传入的实际参数<br />*/<br />private final Object parameterObject;<br />/**<br />* DynamicContext.bindings集合<br />*/<br />private final Map&lt;String, Object&gt; additionalParameters;<br />/**<br />* additionalParameters对应的MetaObject<br />*/<br />private final MetaObject metaParameters;<br /><br />public BoundSql(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject) {<br />this.sql = sql;<br />this.parameterMappings = parameterMappings;<br />this.parameterObject = parameterObject;<br />this.additionalParameters = new HashMap&lt;&gt;();<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public String getSql() {<br />return sql;<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />public Object getParameterObject() {<br />return parameterObject;<br />}<br /><br />public boolean hasAdditionalParameter(String name) {<br />String paramName = new PropertyTokenizer(name).getName();<br />return additionalParameters.containsKey(paramName);<br />}<br /><br />public void setAdditionalParameter(String name, Object value) {<br />metaParameters.setValue(name, value);<br />}<br /><br />public Object getAdditionalParameter(String name) {<br />return metaParameters.getValue(name);<br />}<br />}<br />DynamicSqlSource<br />DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现。DynamicSqlSource使用rootSqlNode字段，记录了带解析的SqlNode根节点DynamicSqlSource的代码如下。</p>
<p><br />/**<br />* 负责解析动态sql语句<br />* 包含#{}占位符<br />*<br />* @author Clinton Begin<br />*/<br />public class DynamicSqlSource implements SqlSource {<br /><br />private final Configuration configuration;<br />private final SqlNode rootSqlNode;<br /><br />public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {<br />this.configuration = configuration;<br />this.rootSqlNode = rootSqlNode;<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />// 创建<br />DynamicContext context = new DynamicContext(configuration, parameterObject);<br />// 解析sql节点<br />rootSqlNode.apply(context);<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass();<br />// 解析sql，将#{}替换成?<br />SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br />BoundSql boundSql = sqlSource.getBoundSql(parameterObject);<br />context.getBindings().forEach(boundSql::setAdditionalParameter);<br />return boundSql;<br />}<br /><br />}<br />RawSqlSource<br />RawSqlSource的逻辑和DynamicSqlSource类似，但是处理SQL的机制不同。RawSqlSource用于处理非动态SQL。当一个sql中只包含#{}占位符。不包含${}和动态sql节点，就不是动态SQL语句，会创建相应的StaticTextSqlNode在XmlScriptBuilder.parseScriptNode方法会判断整个SQL节点是否是动态的，如果是动态，就用DynamicSqlSource进行处理，否则用RawSqlSource进行处理。</p>
<p>RawSqlSource在构造方法中会调用getSql方法，该方法会调用SqlNode.apply方法完成sql语句的处不处理。SqlSourceBuilder完成占位符的替换，并返回StaticSqlSource对象。</p>
<p><br />/**<br />* 处理非动态sql语句<br />* 如果节点只包含&ldquo;＃｛｝&rdquo;占位符，而不包含动态 SQL 点或未解析的 &ldquo;$｛｝&rdquo;占位<br />* 符的话， 则不是动态 SQL 语句<br />*<br />* @author Eduardo Macarron<br />* @since 3.2.0<br />*/<br />public class RawSqlSource implements SqlSource {<br /><br />private final SqlSource sqlSource;<br /><br />public RawSqlSource(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType) {<br />this(configuration, getSql(configuration, rootSqlNode), parameterType);<br />}<br /><br />public RawSqlSource(Configuration configuration, String sql, Class&lt;?&gt; parameterType) {<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; clazz = parameterType == null ? Object.class : parameterType;<br />sqlSource = sqlSourceParser.parse(sql, clazz, new HashMap&lt;&gt;());<br />}<br /><br />private static String getSql(Configuration configuration, SqlNode rootSqlNode) {<br />DynamicContext context = new DynamicContext(configuration, null);<br />rootSqlNode.apply(context);<br />return context.getSql();<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />return sqlSource.getBoundSql(parameterObject);<br />}<br />}<br />像foreach、if、where等标签，以及${}占位符，在mybatis初始化时并不知道其具体含义，因此这类sql就视为&ldquo;动态sql&rdquo;，交由DynamicSqlSource在程序运行时进行解析。而如果只含有#{}占位符，则会在mybatis初始化时就完成sql解析。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>(String), 7(Integer), null, null
2020-05-23 19:51:12.148 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:51:12.205 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:51:12.207 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=<p>SqlSourceBuilder<br />前面我们对SqlSource和SqlNode进行了介绍，在经过SqlNode.apply方法的解析之后，Sql语句会被传递到SqlSourceBuilder中进行进一步的解析。SqlSourceBuilder主要完成了两方面的操作，一方面是解析Sql中的#{}占位符定义的属性，如jdbcType、javaType（使用较少），一方面是把#{}占位符替换成?占位符</p>
<p>SqlSourceBuilder代码如下</p>
<p><br />/**<br />* 用于进一步解析SqlSource中的${}<br />* @author Clinton Begin<br />*/<br />public class SqlSourceBuilder extends BaseBuilder {<br /><br />private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";<br /><br />public SqlSourceBuilder(Configuration configuration) {<br />super(configuration);<br />}<br /><br />/**<br />* 解析#{}<br />* @param originalSql 被SqlNode.apply解析后的sql<br />* @param parameterType 参数类型<br />* @param additionalParameters DynamicContext.bindings集合<br />* @return<br />*/<br />public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);<br />// 解析#{}<br />GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);<br />String sql = parser.parse(originalSql);<br />// 最终被解析成含有？的静态sql。创建StaticSqlSource，包含这个sql和参数<br />return new StaticSqlSource(configuration, sql, handler.getParameterMappings());<br />}<br /><br />/**<br />* 内部类，是解析#{}的核心<br />*/<br />private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {<br /><br />/**<br />* 记录解析后得到的parameterMapping集合<br />*/<br />private List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;&gt;();<br />/**<br />* 参数类型<br />*/<br />private Class&lt;?&gt; parameterType;<br />/**<br />* DynamicContext.bindings对应的类<br />*/<br />private MetaObject metaParameters;<br /><br />public ParameterMappingTokenHandler(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />super(configuration);<br />this.parameterType = parameterType;<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />/**<br />* 占位符处理器核心方法。<br />* @param content<br />* @return<br />*/<br />@Override<br />public String handleToken(String content) {<br />parameterMappings.add(buildParameterMapping(content));<br />return "?";<br />}<br /><br />private ParameterMapping buildParameterMapping(String content) {<br />Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br />String property = propertiesMap.get("property");<br />Class&lt;?&gt; propertyType;<br />if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params<br />propertyType = metaParameters.getGetterType(property);<br />} else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {<br />propertyType = parameterType;<br />} else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {<br />propertyType = java.sql.ResultSet.class;<br />} else if (property == null || Map.class.isAssignableFrom(parameterType)) {<br />propertyType = Object.class;<br />} else {<br />MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br />if (metaClass.hasGetter(property)) {<br />propertyType = metaClass.getGetterType(property);<br />} else {<br />propertyType = Object.class;<br />}<br />}<br />ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);<br />Class&lt;?&gt; javaType = propertyType;<br />String typeHandlerAlias = null;<br />for (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) {<br />String name = entry.getKey();<br />String value = entry.getValue();<br />// 处理jdbcType、javaType等一大堆东西<br />if ("javaType".equals(name)) {<br />javaType = resolveClass(value);<br />builder.javaType(javaType);<br />} else if ("jdbcType".equals(name)) {<br />builder.jdbcType(resolveJdbcType(value));<br />} else if ("mode".equals(name)) {<br />builder.mode(resolveParameterMode(value));<br />} else if ("numericScale".equals(name)) {<br />builder.numericScale(Integer.valueOf(value));<br />} else if ("resultMap".equals(name)) {<br />builder.resultMapId(value);<br />} else if ("typeHandler".equals(name)) {<br />typeHandlerAlias = value;<br />} else if ("jdbcTypeName".equals(name)) {<br />builder.jdbcTypeName(value);<br />} else if ("property".equals(name)) {<br />// Do Nothing<br />} else if ("expression".equals(name)) {<br />throw new BuilderException("Expression based parameters are not supported yet");<br />} else {<br />throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}. Valid properties are " + PARAMETER_PROPERTIES);<br />}<br />}<br />if (typeHandlerAlias != null) {<br />builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br />}<br />return builder.build();<br />}<br /><br />private Map&lt;String, String&gt; parseParameterMapping(String content) {<br />try {<br />return new ParameterExpression(content);<br />} catch (BuilderException ex) {<br />throw ex;<br />} catch (Exception ex) {<br />throw new BuilderException("Parsing error was found in mapping #{" + content + "}. Check syntax #{property|(expression), var1=value1, var2=value2, ...} ", ex);<br />}<br />}<br />}<br /><br />}<br />其中，ParameterMappingTokenHandler是SqlSourceBuilder的一个内部类，该类是解析#{}的核心。</p>
<p>ParameterMapping中记录了#{}占位符中的参数属性，字段如下</p>
<p>public class ParameterMapping {<br /><br />private Configuration configuration;<br /><br />/**<br />* 参数名<br />*/<br />private String property;<br />/**<br />* 参数模式。输入参数还是输出参数<br />*/<br />private ParameterMode mode;<br />private Class&lt;?&gt; javaType = Object.class;<br />private JdbcType jdbcType;<br />private Integer numericScale;<br />private TypeHandler&lt;?&gt; typeHandler;<br />private String resultMapId;<br />private String jdbcTypeName;<br />private String expression;<br />}<br />之后，SqlSourceBuilder会将Sql语句以及parameterMap平时集合封装成StaticSqlSource对象。StaticSqlSource.getBoundSql方法直接返回BoundSql，BoundSql代码如下。</p>
<p><br />/**<br />* Sql实体。包含sql和 参数集合<br />*<br />* @author Clinton Begin<br />*/<br />public class BoundSql {<br /><br />private final String sql;<br />/**<br />* SQL中参数属性集合#{item}这些<br />*/<br />private final List&lt;ParameterMapping&gt; parameterMappings;<br />/**<br />* 执行SQL时传入的实际参数<br />*/<br />private final Object parameterObject;<br />/**<br />* DynamicContext.bindings集合<br />*/<br />private final Map&lt;String, Object&gt; additionalParameters;<br />/**<br />* additionalParameters对应的MetaObject<br />*/<br />private final MetaObject metaParameters;<br /><br />public BoundSql(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject) {<br />this.sql = sql;<br />this.parameterMappings = parameterMappings;<br />this.parameterObject = parameterObject;<br />this.additionalParameters = new HashMap&lt;&gt;();<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public String getSql() {<br />return sql;<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />public Object getParameterObject() {<br />return parameterObject;<br />}<br /><br />public boolean hasAdditionalParameter(String name) {<br />String paramName = new PropertyTokenizer(name).getName();<br />return additionalParameters.containsKey(paramName);<br />}<br /><br />public void setAdditionalParameter(String name, Object value) {<br />metaParameters.setValue(name, value);<br />}<br /><br />public Object getAdditionalParameter(String name) {<br />return metaParameters.getValue(name);<br />}<br />}<br />DynamicSqlSource<br />DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现。DynamicSqlSource使用rootSqlNode字段，记录了带解析的SqlNode根节点DynamicSqlSource的代码如下。</p>
<p><br />/**<br />* 负责解析动态sql语句<br />* 包含#{}占位符<br />*<br />* @author Clinton Begin<br />*/<br />public class DynamicSqlSource implements SqlSource {<br /><br />private final Configuration configuration;<br />private final SqlNode rootSqlNode;<br /><br />public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {<br />this.configuration = configuration;<br />this.rootSqlNode = rootSqlNode;<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />// 创建<br />DynamicContext context = new DynamicContext(configuration, parameterObject);<br />// 解析sql节点<br />rootSqlNode.apply(context);<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass();<br />// 解析sql，将#{}替换成?<br />SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br />BoundSql boundSql = sqlSource.getBoundSql(parameterObject);<br />context.getBindings().forEach(boundSql::setAdditionalParameter);<br />return boundSql;<br />}<br /><br />}<br />RawSqlSource<br />RawSqlSource的逻辑和DynamicSqlSource类似，但是处理SQL的机制不同。RawSqlSource用于处理非动态SQL。当一个sql中只包含#{}占位符。不包含${}和动态sql节点，就不是动态SQL语句，会创建相应的StaticTextSqlNode在XmlScriptBuilder.parseScriptNode方法会判断整个SQL节点是否是动态的，如果是动态，就用DynamicSqlSource进行处理，否则用RawSqlSource进行处理。</p>
<p>RawSqlSource在构造方法中会调用getSql方法，该方法会调用SqlNode.apply方法完成sql语句的处不处理。SqlSourceBuilder完成占位符的替换，并返回StaticSqlSource对象。</p>
<p><br />/**<br />* 处理非动态sql语句<br />* 如果节点只包含&ldquo;＃｛｝&rdquo;占位符，而不包含动态 SQL 点或未解析的 &ldquo;$｛｝&rdquo;占位<br />* 符的话， 则不是动态 SQL 语句<br />*<br />* @author Eduardo Macarron<br />* @since 3.2.0<br />*/<br />public class RawSqlSource implements SqlSource {<br /><br />private final SqlSource sqlSource;<br /><br />public RawSqlSource(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType) {<br />this(configuration, getSql(configuration, rootSqlNode), parameterType);<br />}<br /><br />public RawSqlSource(Configuration configuration, String sql, Class&lt;?&gt; parameterType) {<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; clazz = parameterType == null ? Object.class : parameterType;<br />sqlSource = sqlSourceParser.parse(sql, clazz, new HashMap&lt;&gt;());<br />}<br /><br />private static String getSql(Configuration configuration, SqlNode rootSqlNode) {<br />DynamicContext context = new DynamicContext(configuration, null);<br />rootSqlNode.apply(context);<br />return context.getSql();<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />return sqlSource.getBoundSql(parameterObject);<br />}<br />}<br />像foreach、if、where等标签，以及${}占位符，在mybatis初始化时并不知道其具体含义，因此这类sql就视为&ldquo;动态sql&rdquo;，交由DynamicSqlSource在程序运行时进行解析。而如果只含有#{}占位符，则会在mybatis初始化时就完成sql解析。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=7, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 173(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:51:13.310 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:51:13.312 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=<p>SqlSourceBuilder<br />前面我们对SqlSource和SqlNode进行了介绍，在经过SqlNode.apply方法的解析之后，Sql语句会被传递到SqlSourceBuilder中进行进一步的解析。SqlSourceBuilder主要完成了两方面的操作，一方面是解析Sql中的#{}占位符定义的属性，如jdbcType、javaType（使用较少），一方面是把#{}占位符替换成?占位符</p>
<p>SqlSourceBuilder代码如下</p>
<p><br />/**<br />* 用于进一步解析SqlSource中的${}<br />* @author Clinton Begin<br />*/<br />public class SqlSourceBuilder extends BaseBuilder {<br /><br />private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";<br /><br />public SqlSourceBuilder(Configuration configuration) {<br />super(configuration);<br />}<br /><br />/**<br />* 解析#{}<br />* @param originalSql 被SqlNode.apply解析后的sql<br />* @param parameterType 参数类型<br />* @param additionalParameters DynamicContext.bindings集合<br />* @return<br />*/<br />public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);<br />// 解析#{}<br />GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);<br />String sql = parser.parse(originalSql);<br />// 最终被解析成含有？的静态sql。创建StaticSqlSource，包含这个sql和参数<br />return new StaticSqlSource(configuration, sql, handler.getParameterMappings());<br />}<br /><br />/**<br />* 内部类，是解析#{}的核心<br />*/<br />private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {<br /><br />/**<br />* 记录解析后得到的parameterMapping集合<br />*/<br />private List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;&gt;();<br />/**<br />* 参数类型<br />*/<br />private Class&lt;?&gt; parameterType;<br />/**<br />* DynamicContext.bindings对应的类<br />*/<br />private MetaObject metaParameters;<br /><br />public ParameterMappingTokenHandler(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />super(configuration);<br />this.parameterType = parameterType;<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />/**<br />* 占位符处理器核心方法。<br />* @param content<br />* @return<br />*/<br />@Override<br />public String handleToken(String content) {<br />parameterMappings.add(buildParameterMapping(content));<br />return "?";<br />}<br /><br />private ParameterMapping buildParameterMapping(String content) {<br />Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br />String property = propertiesMap.get("property");<br />Class&lt;?&gt; propertyType;<br />if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params<br />propertyType = metaParameters.getGetterType(property);<br />} else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {<br />propertyType = parameterType;<br />} else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {<br />propertyType = java.sql.ResultSet.class;<br />} else if (property == null || Map.class.isAssignableFrom(parameterType)) {<br />propertyType = Object.class;<br />} else {<br />MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br />if (metaClass.hasGetter(property)) {<br />propertyType = metaClass.getGetterType(property);<br />} else {<br />propertyType = Object.class;<br />}<br />}<br />ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);<br />Class&lt;?&gt; javaType = propertyType;<br />String typeHandlerAlias = null;<br />for (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) {<br />String name = entry.getKey();<br />String value = entry.getValue();<br />// 处理jdbcType、javaType等一大堆东西<br />if ("javaType".equals(name)) {<br />javaType = resolveClass(value);<br />builder.javaType(javaType);<br />} else if ("jdbcType".equals(name)) {<br />builder.jdbcType(resolveJdbcType(value));<br />} else if ("mode".equals(name)) {<br />builder.mode(resolveParameterMode(value));<br />} else if ("numericScale".equals(name)) {<br />builder.numericScale(Integer.valueOf(value));<br />} else if ("resultMap".equals(name)) {<br />builder.resultMapId(value);<br />} else if ("typeHandler".equals(name)) {<br />typeHandlerAlias = value;<br />} else if ("jdbcTypeName".equals(name)) {<br />builder.jdbcTypeName(value);<br />} else if ("property".equals(name)) {<br />// Do Nothing<br />} else if ("expression".equals(name)) {<br />throw new BuilderException("Expression based parameters are not supported yet");<br />} else {<br />throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}. Valid properties are " + PARAMETER_PROPERTIES);<br />}<br />}<br />if (typeHandlerAlias != null) {<br />builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br />}<br />return builder.build();<br />}<br /><br />private Map&lt;String, String&gt; parseParameterMapping(String content) {<br />try {<br />return new ParameterExpression(content);<br />} catch (BuilderException ex) {<br />throw ex;<br />} catch (Exception ex) {<br />throw new BuilderException("Parsing error was found in mapping #{" + content + "}. Check syntax #{property|(expression), var1=value1, var2=value2, ...} ", ex);<br />}<br />}<br />}<br /><br />}<br />其中，ParameterMappingTokenHandler是SqlSourceBuilder的一个内部类，该类是解析#{}的核心。</p>
<p>ParameterMapping中记录了#{}占位符中的参数属性，字段如下</p>
<p>public class ParameterMapping {<br /><br />private Configuration configuration;<br /><br />/**<br />* 参数名<br />*/<br />private String property;<br />/**<br />* 参数模式。输入参数还是输出参数<br />*/<br />private ParameterMode mode;<br />private Class&lt;?&gt; javaType = Object.class;<br />private JdbcType jdbcType;<br />private Integer numericScale;<br />private TypeHandler&lt;?&gt; typeHandler;<br />private String resultMapId;<br />private String jdbcTypeName;<br />private String expression;<br />}<br />之后，SqlSourceBuilder会将Sql语句以及parameterMap平时集合封装成StaticSqlSource对象。StaticSqlSource.getBoundSql方法直接返回BoundSql，BoundSql代码如下。</p>
<p><br />/**<br />* Sql实体。包含sql和 参数集合<br />*<br />* @author Clinton Begin<br />*/<br />public class BoundSql {<br /><br />private final String sql;<br />/**<br />* SQL中参数属性集合#{item}这些<br />*/<br />private final List&lt;ParameterMapping&gt; parameterMappings;<br />/**<br />* 执行SQL时传入的实际参数<br />*/<br />private final Object parameterObject;<br />/**<br />* DynamicContext.bindings集合<br />*/<br />private final Map&lt;String, Object&gt; additionalParameters;<br />/**<br />* additionalParameters对应的MetaObject<br />*/<br />private final MetaObject metaParameters;<br /><br />public BoundSql(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject) {<br />this.sql = sql;<br />this.parameterMappings = parameterMappings;<br />this.parameterObject = parameterObject;<br />this.additionalParameters = new HashMap&lt;&gt;();<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public String getSql() {<br />return sql;<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />public Object getParameterObject() {<br />return parameterObject;<br />}<br /><br />public boolean hasAdditionalParameter(String name) {<br />String paramName = new PropertyTokenizer(name).getName();<br />return additionalParameters.containsKey(paramName);<br />}<br /><br />public void setAdditionalParameter(String name, Object value) {<br />metaParameters.setValue(name, value);<br />}<br /><br />public Object getAdditionalParameter(String name) {<br />return metaParameters.getValue(name);<br />}<br />}<br />DynamicSqlSource<br />DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现。DynamicSqlSource使用rootSqlNode字段，记录了带解析的SqlNode根节点DynamicSqlSource的代码如下。</p>
<p><br />/**<br />* 负责解析动态sql语句<br />* 包含#{}占位符<br />*<br />* @author Clinton Begin<br />*/<br />public class DynamicSqlSource implements SqlSource {<br /><br />private final Configuration configuration;<br />private final SqlNode rootSqlNode;<br /><br />public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {<br />this.configuration = configuration;<br />this.rootSqlNode = rootSqlNode;<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />// 创建<br />DynamicContext context = new DynamicContext(configuration, parameterObject);<br />// 解析sql节点<br />rootSqlNode.apply(context);<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass();<br />// 解析sql，将#{}替换成?<br />SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br />BoundSql boundSql = sqlSource.getBoundSql(parameterObject);<br />context.getBindings().forEach(boundSql::setAdditionalParameter);<br />return boundSql;<br />}<br /><br />}<br />RawSqlSource<br />RawSqlSource的逻辑和DynamicSqlSource类似，但是处理SQL的机制不同。RawSqlSource用于处理非动态SQL。当一个sql中只包含#{}占位符。不包含${}和动态sql节点，就不是动态SQL语句，会创建相应的StaticTextSqlNode在XmlScriptBuilder.parseScriptNode方法会判断整个SQL节点是否是动态的，如果是动态，就用DynamicSqlSource进行处理，否则用RawSqlSource进行处理。</p>
<p>RawSqlSource在构造方法中会调用getSql方法，该方法会调用SqlNode.apply方法完成sql语句的处不处理。SqlSourceBuilder完成占位符的替换，并返回StaticSqlSource对象。</p>
<p><br />/**<br />* 处理非动态sql语句<br />* 如果节点只包含&ldquo;＃｛｝&rdquo;占位符，而不包含动态 SQL 点或未解析的 &ldquo;$｛｝&rdquo;占位<br />* 符的话， 则不是动态 SQL 语句<br />*<br />* @author Eduardo Macarron<br />* @since 3.2.0<br />*/<br />public class RawSqlSource implements SqlSource {<br /><br />private final SqlSource sqlSource;<br /><br />public RawSqlSource(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType) {<br />this(configuration, getSql(configuration, rootSqlNode), parameterType);<br />}<br /><br />public RawSqlSource(Configuration configuration, String sql, Class&lt;?&gt; parameterType) {<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; clazz = parameterType == null ? Object.class : parameterType;<br />sqlSource = sqlSourceParser.parse(sql, clazz, new HashMap&lt;&gt;());<br />}<br /><br />private static String getSql(Configuration configuration, SqlNode rootSqlNode) {<br />DynamicContext context = new DynamicContext(configuration, null);<br />rootSqlNode.apply(context);<br />return context.getSql();<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />return sqlSource.getBoundSql(parameterObject);<br />}<br />}<br />像foreach、if、where等标签，以及${}占位符，在mybatis初始化时并不知道其具体含义，因此这类sql就视为&ldquo;动态sql&rdquo;，交由DynamicSqlSource在程序运行时进行解析。而如果只含有#{}占位符，则会在mybatis初始化时就完成sql解析。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=7, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 0(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
### The error may involve com.jg.blog.mapper.LogMapper.save-Inline
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
	at com.jg.blog.service.impl.LogServiceImpl.save(LogServiceImpl.java:36)
	at com.jg.blog.service.impl.LogServiceImpl$$FastClassBySpringCGLIB$$d24891de.invoke(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$EnhancerBySpringCGLIB$$28666633.save(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$FastClassBySpringCGLIB$$d24891de.invoke(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$EnhancerBySpringCGLIB$$bbd9df25.save(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAfterReturning(RequestAspect.java:85)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8aee03a7.save(<generated>)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
(String), POST(String), 0(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:53:09.778 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:53:09.785 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264162449455263744(String), Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource(String), null, <p>SqlSourceBuilder<br />前面我们对SqlSource和SqlNode进行了介绍，在经过SqlNode.apply方法的解析之后，Sql语句会被传递到SqlSourceBuilder中进行进一步的解析。SqlSourceBuilder主要完成了两方面的操作，一方面是解析Sql中的#{}占位符定义的属性，如jdbcType、javaType（使用较少），一方面是把#{}占位符替换成?占位符</p>
<p>SqlSourceBuilder代码如下</p>
<p><br />/**<br />* 用于进一步解析SqlSource中的${}<br />* @author Clinton Begin<br />*/<br />public class SqlSourceBuilder extends BaseBuilder {<br /><br />private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";<br /><br />public SqlSourceBuilder(Configuration configuration) {<br />super(configuration);<br />}<br /><br />/**<br />* 解析#{}<br />* @param originalSql 被SqlNode.apply解析后的sql<br />* @param parameterType 参数类型<br />* @param additionalParameters DynamicContext.bindings集合<br />* @return<br />*/<br />public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);<br />// 解析#{}<br />GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);<br />String sql = parser.parse(originalSql);<br />// 最终被解析成含有？的静态sql。创建StaticSqlSource，包含这个sql和参数<br />return new StaticSqlSource(configuration, sql, handler.getParameterMappings());<br />}<br /><br />/**<br />* 内部类，是解析#{}的核心<br />*/<br />private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {<br /><br />/**<br />* 记录解析后得到的parameterMapping集合<br />*/<br />private List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;&gt;();<br />/**<br />* 参数类型<br />*/<br />private Class&lt;?&gt; parameterType;<br />/**<br />* DynamicContext.bindings对应的类<br />*/<br />private MetaObject metaParameters;<br /><br />public ParameterMappingTokenHandler(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />super(configuration);<br />this.parameterType = parameterType;<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />/**<br />* 占位符处理器核心方法。<br />* @param content<br />* @return<br />*/<br />@Override<br />public String handleToken(String content) {<br />parameterMappings.add(buildParameterMapping(content));<br />return "?";<br />}<br /><br />private ParameterMapping buildParameterMapping(String content) {<br />Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br />String property = propertiesMap.get("property");<br />Class&lt;?&gt; propertyType;<br />if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params<br />propertyType = metaParameters.getGetterType(property);<br />} else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {<br />propertyType = parameterType;<br />} else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {<br />propertyType = java.sql.ResultSet.class;<br />} else if (property == null || Map.class.isAssignableFrom(parameterType)) {<br />propertyType = Object.class;<br />} else {<br />MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br />if (metaClass.hasGetter(property)) {<br />propertyType = metaClass.getGetterType(property);<br />} else {<br />propertyType = Object.class;<br />}<br />}<br />ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);<br />Class&lt;?&gt; javaType = propertyType;<br />String typeHandlerAlias = null;<br />for (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) {<br />String name = entry.getKey();<br />String value = entry.getValue();<br />// 处理jdbcType、javaType等一大堆东西<br />if ("javaType".equals(name)) {<br />javaType = resolveClass(value);<br />builder.javaType(javaType);<br />} else if ("jdbcType".equals(name)) {<br />builder.jdbcType(resolveJdbcType(value));<br />} else if ("mode".equals(name)) {<br />builder.mode(resolveParameterMode(value));<br />} else if ("numericScale".equals(name)) {<br />builder.numericScale(Integer.valueOf(value));<br />} else if ("resultMap".equals(name)) {<br />builder.resultMapId(value);<br />} else if ("typeHandler".equals(name)) {<br />typeHandlerAlias = value;<br />} else if ("jdbcTypeName".equals(name)) {<br />builder.jdbcTypeName(value);<br />} else if ("property".equals(name)) {<br />// Do Nothing<br />} else if ("expression".equals(name)) {<br />throw new BuilderException("Expression based parameters are not supported yet");<br />} else {<br />throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}. Valid properties are " + PARAMETER_PROPERTIES);<br />}<br />}<br />if (typeHandlerAlias != null) {<br />builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br />}<br />return builder.build();<br />}<br /><br />private Map&lt;String, String&gt; parseParameterMapping(String content) {<br />try {<br />return new ParameterExpression(content);<br />} catch (BuilderException ex) {<br />throw ex;<br />} catch (Exception ex) {<br />throw new BuilderException("Parsing error was found in mapping #{" + content + "}. Check syntax #{property|(expression), var1=value1, var2=value2, ...} ", ex);<br />}<br />}<br />}<br /><br />}<br />其中，ParameterMappingTokenHandler是SqlSourceBuilder的一个内部类，该类是解析#{}的核心。</p>
<p>ParameterMapping中记录了#{}占位符中的参数属性，字段如下</p>
<p>public class ParameterMapping {<br /><br />private Configuration configuration;<br /><br />/**<br />* 参数名<br />*/<br />private String property;<br />/**<br />* 参数模式。输入参数还是输出参数<br />*/<br />private ParameterMode mode;<br />private Class&lt;?&gt; javaType = Object.class;<br />private JdbcType jdbcType;<br />private Integer numericScale;<br />private TypeHandler&lt;?&gt; typeHandler;<br />private String resultMapId;<br />private String jdbcTypeName;<br />private String expression;<br />}<br />之后，SqlSourceBuilder会将Sql语句以及parameterMap平时集合封装成StaticSqlSource对象。StaticSqlSource.getBoundSql方法直接返回BoundSql，BoundSql代码如下。</p>
<p><br />/**<br />* Sql实体。包含sql和 参数集合<br />*<br />* @author Clinton Begin<br />*/<br />public class BoundSql {<br /><br />private final String sql;<br />/**<br />* SQL中参数属性集合#{item}这些<br />*/<br />private final List&lt;ParameterMapping&gt; parameterMappings;<br />/**<br />* 执行SQL时传入的实际参数<br />*/<br />private final Object parameterObject;<br />/**<br />* DynamicContext.bindings集合<br />*/<br />private final Map&lt;String, Object&gt; additionalParameters;<br />/**<br />* additionalParameters对应的MetaObject<br />*/<br />private final MetaObject metaParameters;<br /><br />public BoundSql(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject) {<br />this.sql = sql;<br />this.parameterMappings = parameterMappings;<br />this.parameterObject = parameterObject;<br />this.additionalParameters = new HashMap&lt;&gt;();<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public String getSql() {<br />return sql;<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />public Object getParameterObject() {<br />return parameterObject;<br />}<br /><br />public boolean hasAdditionalParameter(String name) {<br />String paramName = new PropertyTokenizer(name).getName();<br />return additionalParameters.containsKey(paramName);<br />}<br /><br />public void setAdditionalParameter(String name, Object value) {<br />metaParameters.setValue(name, value);<br />}<br /><br />public Object getAdditionalParameter(String name) {<br />return metaParameters.getValue(name);<br />}<br />}<br />DynamicSqlSource<br />DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现。DynamicSqlSource使用rootSqlNode字段，记录了带解析的SqlNode根节点DynamicSqlSource的代码如下。</p>
<p><br />/**<br />* 负责解析动态sql语句<br />* 包含#{}占位符<br />*<br />* @author Clinton Begin<br />*/<br />public class DynamicSqlSource implements SqlSource {<br /><br />private final Configuration configuration;<br />private final SqlNode rootSqlNode;<br /><br />public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {<br />this.configuration = configuration;<br />this.rootSqlNode = rootSqlNode;<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />// 创建<br />DynamicContext context = new DynamicContext(configuration, parameterObject);<br />// 解析sql节点<br />rootSqlNode.apply(context);<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass();<br />// 解析sql，将#{}替换成?<br />SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br />BoundSql boundSql = sqlSource.getBoundSql(parameterObject);<br />context.getBindings().forEach(boundSql::setAdditionalParameter);<br />return boundSql;<br />}<br /><br />}<br />RawSqlSource<br />RawSqlSource的逻辑和DynamicSqlSource类似，但是处理SQL的机制不同。RawSqlSource用于处理非动态SQL。当一个sql中只包含#{}占位符。不包含${}和动态sql节点，就不是动态SQL语句，会创建相应的StaticTextSqlNode在XmlScriptBuilder.parseScriptNode方法会判断整个SQL节点是否是动态的，如果是动态，就用DynamicSqlSource进行处理，否则用RawSqlSource进行处理。</p>
<p>RawSqlSource在构造方法中会调用getSql方法，该方法会调用SqlNode.apply方法完成sql语句的处不处理。SqlSourceBuilder完成占位符的替换，并返回StaticSqlSource对象。</p>
<p><br />/**<br />* 处理非动态sql语句<br />* 如果节点只包含&ldquo;＃｛｝&rdquo;占位符，而不包含动态 SQL 点或未解析的 &ldquo;$｛｝&rdquo;占位<br />* 符的话， 则不是动态 SQL 语句<br />*<br />* @author Eduardo Macarron<br />* @since 3.2.0<br />*/<br />public class RawSqlSource implements SqlSource {<br /><br />private final SqlSource sqlSource;<br /><br />public RawSqlSource(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType) {<br />this(configuration, getSql(configuration, rootSqlNode), parameterType);<br />}<br /><br />public RawSqlSource(Configuration configuration, String sql, Class&lt;?&gt; parameterType) {<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; clazz = parameterType == null ? Object.class : parameterType;<br />sqlSource = sqlSourceParser.parse(sql, clazz, new HashMap&lt;&gt;());<br />}<br /><br />private static String getSql(Configuration configuration, SqlNode rootSqlNode) {<br />DynamicContext context = new DynamicContext(configuration, null);<br />rootSqlNode.apply(context);<br />return context.getSql();<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />return sqlSource.getBoundSql(parameterObject);<br />}<br />}<br />像foreach、if、where等标签，以及${}占位符，在mybatis初始化时并不知道其具体含义，因此这类sql就视为&ldquo;动态sql&rdquo;，交由DynamicSqlSource在程序运行时进行解析。而如果只含有#{}占位符，则会在mybatis初始化时就完成sql解析。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>(String), 7(Integer), null, null
2020-05-23 19:53:09.883 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:53:09.938 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:53:09.941 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=<p>SqlSourceBuilder<br />前面我们对SqlSource和SqlNode进行了介绍，在经过SqlNode.apply方法的解析之后，Sql语句会被传递到SqlSourceBuilder中进行进一步的解析。SqlSourceBuilder主要完成了两方面的操作，一方面是解析Sql中的#{}占位符定义的属性，如jdbcType、javaType（使用较少），一方面是把#{}占位符替换成?占位符</p>
<p>SqlSourceBuilder代码如下</p>
<p><br />/**<br />* 用于进一步解析SqlSource中的${}<br />* @author Clinton Begin<br />*/<br />public class SqlSourceBuilder extends BaseBuilder {<br /><br />private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";<br /><br />public SqlSourceBuilder(Configuration configuration) {<br />super(configuration);<br />}<br /><br />/**<br />* 解析#{}<br />* @param originalSql 被SqlNode.apply解析后的sql<br />* @param parameterType 参数类型<br />* @param additionalParameters DynamicContext.bindings集合<br />* @return<br />*/<br />public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);<br />// 解析#{}<br />GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);<br />String sql = parser.parse(originalSql);<br />// 最终被解析成含有？的静态sql。创建StaticSqlSource，包含这个sql和参数<br />return new StaticSqlSource(configuration, sql, handler.getParameterMappings());<br />}<br /><br />/**<br />* 内部类，是解析#{}的核心<br />*/<br />private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {<br /><br />/**<br />* 记录解析后得到的parameterMapping集合<br />*/<br />private List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;&gt;();<br />/**<br />* 参数类型<br />*/<br />private Class&lt;?&gt; parameterType;<br />/**<br />* DynamicContext.bindings对应的类<br />*/<br />private MetaObject metaParameters;<br /><br />public ParameterMappingTokenHandler(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />super(configuration);<br />this.parameterType = parameterType;<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />/**<br />* 占位符处理器核心方法。<br />* @param content<br />* @return<br />*/<br />@Override<br />public String handleToken(String content) {<br />parameterMappings.add(buildParameterMapping(content));<br />return "?";<br />}<br /><br />private ParameterMapping buildParameterMapping(String content) {<br />Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br />String property = propertiesMap.get("property");<br />Class&lt;?&gt; propertyType;<br />if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params<br />propertyType = metaParameters.getGetterType(property);<br />} else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {<br />propertyType = parameterType;<br />} else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {<br />propertyType = java.sql.ResultSet.class;<br />} else if (property == null || Map.class.isAssignableFrom(parameterType)) {<br />propertyType = Object.class;<br />} else {<br />MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br />if (metaClass.hasGetter(property)) {<br />propertyType = metaClass.getGetterType(property);<br />} else {<br />propertyType = Object.class;<br />}<br />}<br />ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);<br />Class&lt;?&gt; javaType = propertyType;<br />String typeHandlerAlias = null;<br />for (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) {<br />String name = entry.getKey();<br />String value = entry.getValue();<br />// 处理jdbcType、javaType等一大堆东西<br />if ("javaType".equals(name)) {<br />javaType = resolveClass(value);<br />builder.javaType(javaType);<br />} else if ("jdbcType".equals(name)) {<br />builder.jdbcType(resolveJdbcType(value));<br />} else if ("mode".equals(name)) {<br />builder.mode(resolveParameterMode(value));<br />} else if ("numericScale".equals(name)) {<br />builder.numericScale(Integer.valueOf(value));<br />} else if ("resultMap".equals(name)) {<br />builder.resultMapId(value);<br />} else if ("typeHandler".equals(name)) {<br />typeHandlerAlias = value;<br />} else if ("jdbcTypeName".equals(name)) {<br />builder.jdbcTypeName(value);<br />} else if ("property".equals(name)) {<br />// Do Nothing<br />} else if ("expression".equals(name)) {<br />throw new BuilderException("Expression based parameters are not supported yet");<br />} else {<br />throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}. Valid properties are " + PARAMETER_PROPERTIES);<br />}<br />}<br />if (typeHandlerAlias != null) {<br />builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br />}<br />return builder.build();<br />}<br /><br />private Map&lt;String, String&gt; parseParameterMapping(String content) {<br />try {<br />return new ParameterExpression(content);<br />} catch (BuilderException ex) {<br />throw ex;<br />} catch (Exception ex) {<br />throw new BuilderException("Parsing error was found in mapping #{" + content + "}. Check syntax #{property|(expression), var1=value1, var2=value2, ...} ", ex);<br />}<br />}<br />}<br /><br />}<br />其中，ParameterMappingTokenHandler是SqlSourceBuilder的一个内部类，该类是解析#{}的核心。</p>
<p>ParameterMapping中记录了#{}占位符中的参数属性，字段如下</p>
<p>public class ParameterMapping {<br /><br />private Configuration configuration;<br /><br />/**<br />* 参数名<br />*/<br />private String property;<br />/**<br />* 参数模式。输入参数还是输出参数<br />*/<br />private ParameterMode mode;<br />private Class&lt;?&gt; javaType = Object.class;<br />private JdbcType jdbcType;<br />private Integer numericScale;<br />private TypeHandler&lt;?&gt; typeHandler;<br />private String resultMapId;<br />private String jdbcTypeName;<br />private String expression;<br />}<br />之后，SqlSourceBuilder会将Sql语句以及parameterMap平时集合封装成StaticSqlSource对象。StaticSqlSource.getBoundSql方法直接返回BoundSql，BoundSql代码如下。</p>
<p><br />/**<br />* Sql实体。包含sql和 参数集合<br />*<br />* @author Clinton Begin<br />*/<br />public class BoundSql {<br /><br />private final String sql;<br />/**<br />* SQL中参数属性集合#{item}这些<br />*/<br />private final List&lt;ParameterMapping&gt; parameterMappings;<br />/**<br />* 执行SQL时传入的实际参数<br />*/<br />private final Object parameterObject;<br />/**<br />* DynamicContext.bindings集合<br />*/<br />private final Map&lt;String, Object&gt; additionalParameters;<br />/**<br />* additionalParameters对应的MetaObject<br />*/<br />private final MetaObject metaParameters;<br /><br />public BoundSql(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject) {<br />this.sql = sql;<br />this.parameterMappings = parameterMappings;<br />this.parameterObject = parameterObject;<br />this.additionalParameters = new HashMap&lt;&gt;();<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public String getSql() {<br />return sql;<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />public Object getParameterObject() {<br />return parameterObject;<br />}<br /><br />public boolean hasAdditionalParameter(String name) {<br />String paramName = new PropertyTokenizer(name).getName();<br />return additionalParameters.containsKey(paramName);<br />}<br /><br />public void setAdditionalParameter(String name, Object value) {<br />metaParameters.setValue(name, value);<br />}<br /><br />public Object getAdditionalParameter(String name) {<br />return metaParameters.getValue(name);<br />}<br />}<br />DynamicSqlSource<br />DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现。DynamicSqlSource使用rootSqlNode字段，记录了带解析的SqlNode根节点DynamicSqlSource的代码如下。</p>
<p><br />/**<br />* 负责解析动态sql语句<br />* 包含#{}占位符<br />*<br />* @author Clinton Begin<br />*/<br />public class DynamicSqlSource implements SqlSource {<br /><br />private final Configuration configuration;<br />private final SqlNode rootSqlNode;<br /><br />public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {<br />this.configuration = configuration;<br />this.rootSqlNode = rootSqlNode;<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />// 创建<br />DynamicContext context = new DynamicContext(configuration, parameterObject);<br />// 解析sql节点<br />rootSqlNode.apply(context);<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass();<br />// 解析sql，将#{}替换成?<br />SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br />BoundSql boundSql = sqlSource.getBoundSql(parameterObject);<br />context.getBindings().forEach(boundSql::setAdditionalParameter);<br />return boundSql;<br />}<br /><br />}<br />RawSqlSource<br />RawSqlSource的逻辑和DynamicSqlSource类似，但是处理SQL的机制不同。RawSqlSource用于处理非动态SQL。当一个sql中只包含#{}占位符。不包含${}和动态sql节点，就不是动态SQL语句，会创建相应的StaticTextSqlNode在XmlScriptBuilder.parseScriptNode方法会判断整个SQL节点是否是动态的，如果是动态，就用DynamicSqlSource进行处理，否则用RawSqlSource进行处理。</p>
<p>RawSqlSource在构造方法中会调用getSql方法，该方法会调用SqlNode.apply方法完成sql语句的处不处理。SqlSourceBuilder完成占位符的替换，并返回StaticSqlSource对象。</p>
<p><br />/**<br />* 处理非动态sql语句<br />* 如果节点只包含&ldquo;＃｛｝&rdquo;占位符，而不包含动态 SQL 点或未解析的 &ldquo;$｛｝&rdquo;占位<br />* 符的话， 则不是动态 SQL 语句<br />*<br />* @author Eduardo Macarron<br />* @since 3.2.0<br />*/<br />public class RawSqlSource implements SqlSource {<br /><br />private final SqlSource sqlSource;<br /><br />public RawSqlSource(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType) {<br />this(configuration, getSql(configuration, rootSqlNode), parameterType);<br />}<br /><br />public RawSqlSource(Configuration configuration, String sql, Class&lt;?&gt; parameterType) {<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; clazz = parameterType == null ? Object.class : parameterType;<br />sqlSource = sqlSourceParser.parse(sql, clazz, new HashMap&lt;&gt;());<br />}<br /><br />private static String getSql(Configuration configuration, SqlNode rootSqlNode) {<br />DynamicContext context = new DynamicContext(configuration, null);<br />rootSqlNode.apply(context);<br />return context.getSql();<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />return sqlSource.getBoundSql(parameterObject);<br />}<br />}<br />像foreach、if、where等标签，以及${}占位符，在mybatis初始化时并不知道其具体含义，因此这类sql就视为&ldquo;动态sql&rdquo;，交由DynamicSqlSource在程序运行时进行解析。而如果只含有#{}占位符，则会在mybatis初始化时就完成sql解析。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=7, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 296(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:53:10.037 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:53:10.184 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:53:10.185 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:53:10.235 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 5
2020-05-23 19:53:10.237 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:53:10.239 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:53:10.285 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:53:10.432 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:53:10.433 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 300(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:53:10.526 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:54:24.523 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:54:24.526 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264162763432472576(String), String s = new String("123")究竟创建了几个对象(String), null, <p>SqlSourceBuilder<br />前面我们对SqlSource和SqlNode进行了介绍，在经过SqlNode.apply方法的解析之后，Sql语句会被传递到SqlSourceBuilder中进行进一步的解析。SqlSourceBuilder主要完成了两方面的操作，一方面是解析Sql中的#{}占位符定义的属性，如jdbcType、javaType（使用较少），一方面是把#{}占位符替换成?占位符</p>
<p>SqlSourceBuilder代码如下</p>
<p><br />/**<br />* 用于进一步解析SqlSource中的${}<br />* @author Clinton Begin<br />*/<br />public class SqlSourceBuilder extends BaseBuilder {<br /><br />private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";<br /><br />public SqlSourceBuilder(Configuration configuration) {<br />super(configuration);<br />}<br /><br />/**<br />* 解析#{}<br />* @param originalSql 被SqlNode.apply解析后的sql<br />* @param parameterType 参数类型<br />* @param additionalParameters DynamicContext.bindings集合<br />* @return<br />*/<br />public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);<br />// 解析#{}<br />GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);<br />String sql = parser.parse(originalSql);<br />// 最终被解析成含有？的静态sql。创建StaticSqlSource，包含这个sql和参数<br />return new StaticSqlSource(configuration, sql, handler.getParameterMappings());<br />}<br /><br />/**<br />* 内部类，是解析#{}的核心<br />*/<br />private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {<br /><br />/**<br />* 记录解析后得到的parameterMapping集合<br />*/<br />private List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;&gt;();<br />/**<br />* 参数类型<br />*/<br />private Class&lt;?&gt; parameterType;<br />/**<br />* DynamicContext.bindings对应的类<br />*/<br />private MetaObject metaParameters;<br /><br />public ParameterMappingTokenHandler(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />super(configuration);<br />this.parameterType = parameterType;<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />/**<br />* 占位符处理器核心方法。<br />* @param content<br />* @return<br />*/<br />@Override<br />public String handleToken(String content) {<br />parameterMappings.add(buildParameterMapping(content));<br />return "?";<br />}<br /><br />private ParameterMapping buildParameterMapping(String content) {<br />Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br />String property = propertiesMap.get("property");<br />Class&lt;?&gt; propertyType;<br />if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params<br />propertyType = metaParameters.getGetterType(property);<br />} else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {<br />propertyType = parameterType;<br />} else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {<br />propertyType = java.sql.ResultSet.class;<br />} else if (property == null || Map.class.isAssignableFrom(parameterType)) {<br />propertyType = Object.class;<br />} else {<br />MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br />if (metaClass.hasGetter(property)) {<br />propertyType = metaClass.getGetterType(property);<br />} else {<br />propertyType = Object.class;<br />}<br />}<br />ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);<br />Class&lt;?&gt; javaType = propertyType;<br />String typeHandlerAlias = null;<br />for (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) {<br />String name = entry.getKey();<br />String value = entry.getValue();<br />// 处理jdbcType、javaType等一大堆东西<br />if ("javaType".equals(name)) {<br />javaType = resolveClass(value);<br />builder.javaType(javaType);<br />} else if ("jdbcType".equals(name)) {<br />builder.jdbcType(resolveJdbcType(value));<br />} else if ("mode".equals(name)) {<br />builder.mode(resolveParameterMode(value));<br />} else if ("numericScale".equals(name)) {<br />builder.numericScale(Integer.valueOf(value));<br />} else if ("resultMap".equals(name)) {<br />builder.resultMapId(value);<br />} else if ("typeHandler".equals(name)) {<br />typeHandlerAlias = value;<br />} else if ("jdbcTypeName".equals(name)) {<br />builder.jdbcTypeName(value);<br />} else if ("property".equals(name)) {<br />// Do Nothing<br />} else if ("expression".equals(name)) {<br />throw new BuilderException("Expression based parameters are not supported yet");<br />} else {<br />throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}. Valid properties are " + PARAMETER_PROPERTIES);<br />}<br />}<br />if (typeHandlerAlias != null) {<br />builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br />}<br />return builder.build();<br />}<br /><br />private Map&lt;String, String&gt; parseParameterMapping(String content) {<br />try {<br />return new ParameterExpression(content);<br />} catch (BuilderException ex) {<br />throw ex;<br />} catch (Exception ex) {<br />throw new BuilderException("Parsing error was found in mapping #{" + content + "}. Check syntax #{property|(expression), var1=value1, var2=value2, ...} ", ex);<br />}<br />}<br />}<br /><br />}<br />其中，ParameterMappingTokenHandler是SqlSourceBuilder的一个内部类，该类是解析#{}的核心。</p>
<p>ParameterMapping中记录了#{}占位符中的参数属性，字段如下</p>
<p>public class ParameterMapping {<br /><br />private Configuration configuration;<br /><br />/**<br />* 参数名<br />*/<br />private String property;<br />/**<br />* 参数模式。输入参数还是输出参数<br />*/<br />private ParameterMode mode;<br />private Class&lt;?&gt; javaType = Object.class;<br />private JdbcType jdbcType;<br />private Integer numericScale;<br />private TypeHandler&lt;?&gt; typeHandler;<br />private String resultMapId;<br />private String jdbcTypeName;<br />private String expression;<br />}<br />之后，SqlSourceBuilder会将Sql语句以及parameterMap平时集合封装成StaticSqlSource对象。StaticSqlSource.getBoundSql方法直接返回BoundSql，BoundSql代码如下。</p>
<p><br />/**<br />* Sql实体。包含sql和 参数集合<br />*<br />* @author Clinton Begin<br />*/<br />public class BoundSql {<br /><br />private final String sql;<br />/**<br />* SQL中参数属性集合#{item}这些<br />*/<br />private final List&lt;ParameterMapping&gt; parameterMappings;<br />/**<br />* 执行SQL时传入的实际参数<br />*/<br />private final Object parameterObject;<br />/**<br />* DynamicContext.bindings集合<br />*/<br />private final Map&lt;String, Object&gt; additionalParameters;<br />/**<br />* additionalParameters对应的MetaObject<br />*/<br />private final MetaObject metaParameters;<br /><br />public BoundSql(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject) {<br />this.sql = sql;<br />this.parameterMappings = parameterMappings;<br />this.parameterObject = parameterObject;<br />this.additionalParameters = new HashMap&lt;&gt;();<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public String getSql() {<br />return sql;<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />public Object getParameterObject() {<br />return parameterObject;<br />}<br /><br />public boolean hasAdditionalParameter(String name) {<br />String paramName = new PropertyTokenizer(name).getName();<br />return additionalParameters.containsKey(paramName);<br />}<br /><br />public void setAdditionalParameter(String name, Object value) {<br />metaParameters.setValue(name, value);<br />}<br /><br />public Object getAdditionalParameter(String name) {<br />return metaParameters.getValue(name);<br />}<br />}<br />DynamicSqlSource<br />DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现。DynamicSqlSource使用rootSqlNode字段，记录了带解析的SqlNode根节点DynamicSqlSource的代码如下。</p>
<p><br />/**<br />* 负责解析动态sql语句<br />* 包含#{}占位符<br />*<br />* @author Clinton Begin<br />*/<br />public class DynamicSqlSource implements SqlSource {<br /><br />private final Configuration configuration;<br />private final SqlNode rootSqlNode;<br /><br />public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {<br />this.configuration = configuration;<br />this.rootSqlNode = rootSqlNode;<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />// 创建<br />DynamicContext context = new DynamicContext(configuration, parameterObject);<br />// 解析sql节点<br />rootSqlNode.apply(context);<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass();<br />// 解析sql，将#{}替换成?<br />SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br />BoundSql boundSql = sqlSource.getBoundSql(parameterObject);<br />context.getBindings().forEach(boundSql::setAdditionalParameter);<br />return boundSql;<br />}<br /><br />}<br />RawSqlSource<br />RawSqlSource的逻辑和DynamicSqlSource类似，但是处理SQL的机制不同。RawSqlSource用于处理非动态SQL。当一个sql中只包含#{}占位符。不包含${}和动态sql节点，就不是动态SQL语句，会创建相应的StaticTextSqlNode在XmlScriptBuilder.parseScriptNode方法会判断整个SQL节点是否是动态的，如果是动态，就用DynamicSqlSource进行处理，否则用RawSqlSource进行处理。</p>
<p>RawSqlSource在构造方法中会调用getSql方法，该方法会调用SqlNode.apply方法完成sql语句的处不处理。SqlSourceBuilder完成占位符的替换，并返回StaticSqlSource对象。</p>
<p><br />/**<br />* 处理非动态sql语句<br />* 如果节点只包含&ldquo;＃｛｝&rdquo;占位符，而不包含动态 SQL 点或未解析的 &ldquo;$｛｝&rdquo;占位<br />* 符的话， 则不是动态 SQL 语句<br />*<br />* @author Eduardo Macarron<br />* @since 3.2.0<br />*/<br />public class RawSqlSource implements SqlSource {<br /><br />private final SqlSource sqlSource;<br /><br />public RawSqlSource(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType) {<br />this(configuration, getSql(configuration, rootSqlNode), parameterType);<br />}<br /><br />public RawSqlSource(Configuration configuration, String sql, Class&lt;?&gt; parameterType) {<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; clazz = parameterType == null ? Object.class : parameterType;<br />sqlSource = sqlSourceParser.parse(sql, clazz, new HashMap&lt;&gt;());<br />}<br /><br />private static String getSql(Configuration configuration, SqlNode rootSqlNode) {<br />DynamicContext context = new DynamicContext(configuration, null);<br />rootSqlNode.apply(context);<br />return context.getSql();<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />return sqlSource.getBoundSql(parameterObject);<br />}<br />}<br />像foreach、if、where等标签，以及${}占位符，在mybatis初始化时并不知道其具体含义，因此这类sql就视为&ldquo;动态sql&rdquo;，交由DynamicSqlSource在程序运行时进行解析。而如果只含有#{}占位符，则会在mybatis初始化时就完成sql解析。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>(String), 7(Integer), null, null
2020-05-23 19:54:24.625 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:54:24.678 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:54:24.680 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=<p>SqlSourceBuilder<br />前面我们对SqlSource和SqlNode进行了介绍，在经过SqlNode.apply方法的解析之后，Sql语句会被传递到SqlSourceBuilder中进行进一步的解析。SqlSourceBuilder主要完成了两方面的操作，一方面是解析Sql中的#{}占位符定义的属性，如jdbcType、javaType（使用较少），一方面是把#{}占位符替换成?占位符</p>
<p>SqlSourceBuilder代码如下</p>
<p><br />/**<br />* 用于进一步解析SqlSource中的${}<br />* @author Clinton Begin<br />*/<br />public class SqlSourceBuilder extends BaseBuilder {<br /><br />private static final String PARAMETER_PROPERTIES = "javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName";<br /><br />public SqlSourceBuilder(Configuration configuration) {<br />super(configuration);<br />}<br /><br />/**<br />* 解析#{}<br />* @param originalSql 被SqlNode.apply解析后的sql<br />* @param parameterType 参数类型<br />* @param additionalParameters DynamicContext.bindings集合<br />* @return<br />*/<br />public SqlSource parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);<br />// 解析#{}<br />GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);<br />String sql = parser.parse(originalSql);<br />// 最终被解析成含有？的静态sql。创建StaticSqlSource，包含这个sql和参数<br />return new StaticSqlSource(configuration, sql, handler.getParameterMappings());<br />}<br /><br />/**<br />* 内部类，是解析#{}的核心<br />*/<br />private static class ParameterMappingTokenHandler extends BaseBuilder implements TokenHandler {<br /><br />/**<br />* 记录解析后得到的parameterMapping集合<br />*/<br />private List&lt;ParameterMapping&gt; parameterMappings = new ArrayList&lt;&gt;();<br />/**<br />* 参数类型<br />*/<br />private Class&lt;?&gt; parameterType;<br />/**<br />* DynamicContext.bindings对应的类<br />*/<br />private MetaObject metaParameters;<br /><br />public ParameterMappingTokenHandler(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters) {<br />super(configuration);<br />this.parameterType = parameterType;<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />/**<br />* 占位符处理器核心方法。<br />* @param content<br />* @return<br />*/<br />@Override<br />public String handleToken(String content) {<br />parameterMappings.add(buildParameterMapping(content));<br />return "?";<br />}<br /><br />private ParameterMapping buildParameterMapping(String content) {<br />Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br />String property = propertiesMap.get("property");<br />Class&lt;?&gt; propertyType;<br />if (metaParameters.hasGetter(property)) { // issue #448 get type from additional params<br />propertyType = metaParameters.getGetterType(property);<br />} else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {<br />propertyType = parameterType;<br />} else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {<br />propertyType = java.sql.ResultSet.class;<br />} else if (property == null || Map.class.isAssignableFrom(parameterType)) {<br />propertyType = Object.class;<br />} else {<br />MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());<br />if (metaClass.hasGetter(property)) {<br />propertyType = metaClass.getGetterType(property);<br />} else {<br />propertyType = Object.class;<br />}<br />}<br />ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);<br />Class&lt;?&gt; javaType = propertyType;<br />String typeHandlerAlias = null;<br />for (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) {<br />String name = entry.getKey();<br />String value = entry.getValue();<br />// 处理jdbcType、javaType等一大堆东西<br />if ("javaType".equals(name)) {<br />javaType = resolveClass(value);<br />builder.javaType(javaType);<br />} else if ("jdbcType".equals(name)) {<br />builder.jdbcType(resolveJdbcType(value));<br />} else if ("mode".equals(name)) {<br />builder.mode(resolveParameterMode(value));<br />} else if ("numericScale".equals(name)) {<br />builder.numericScale(Integer.valueOf(value));<br />} else if ("resultMap".equals(name)) {<br />builder.resultMapId(value);<br />} else if ("typeHandler".equals(name)) {<br />typeHandlerAlias = value;<br />} else if ("jdbcTypeName".equals(name)) {<br />builder.jdbcTypeName(value);<br />} else if ("property".equals(name)) {<br />// Do Nothing<br />} else if ("expression".equals(name)) {<br />throw new BuilderException("Expression based parameters are not supported yet");<br />} else {<br />throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}. Valid properties are " + PARAMETER_PROPERTIES);<br />}<br />}<br />if (typeHandlerAlias != null) {<br />builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br />}<br />return builder.build();<br />}<br /><br />private Map&lt;String, String&gt; parseParameterMapping(String content) {<br />try {<br />return new ParameterExpression(content);<br />} catch (BuilderException ex) {<br />throw ex;<br />} catch (Exception ex) {<br />throw new BuilderException("Parsing error was found in mapping #{" + content + "}. Check syntax #{property|(expression), var1=value1, var2=value2, ...} ", ex);<br />}<br />}<br />}<br /><br />}<br />其中，ParameterMappingTokenHandler是SqlSourceBuilder的一个内部类，该类是解析#{}的核心。</p>
<p>ParameterMapping中记录了#{}占位符中的参数属性，字段如下</p>
<p>public class ParameterMapping {<br /><br />private Configuration configuration;<br /><br />/**<br />* 参数名<br />*/<br />private String property;<br />/**<br />* 参数模式。输入参数还是输出参数<br />*/<br />private ParameterMode mode;<br />private Class&lt;?&gt; javaType = Object.class;<br />private JdbcType jdbcType;<br />private Integer numericScale;<br />private TypeHandler&lt;?&gt; typeHandler;<br />private String resultMapId;<br />private String jdbcTypeName;<br />private String expression;<br />}<br />之后，SqlSourceBuilder会将Sql语句以及parameterMap平时集合封装成StaticSqlSource对象。StaticSqlSource.getBoundSql方法直接返回BoundSql，BoundSql代码如下。</p>
<p><br />/**<br />* Sql实体。包含sql和 参数集合<br />*<br />* @author Clinton Begin<br />*/<br />public class BoundSql {<br /><br />private final String sql;<br />/**<br />* SQL中参数属性集合#{item}这些<br />*/<br />private final List&lt;ParameterMapping&gt; parameterMappings;<br />/**<br />* 执行SQL时传入的实际参数<br />*/<br />private final Object parameterObject;<br />/**<br />* DynamicContext.bindings集合<br />*/<br />private final Map&lt;String, Object&gt; additionalParameters;<br />/**<br />* additionalParameters对应的MetaObject<br />*/<br />private final MetaObject metaParameters;<br /><br />public BoundSql(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject) {<br />this.sql = sql;<br />this.parameterMappings = parameterMappings;<br />this.parameterObject = parameterObject;<br />this.additionalParameters = new HashMap&lt;&gt;();<br />this.metaParameters = configuration.newMetaObject(additionalParameters);<br />}<br /><br />public String getSql() {<br />return sql;<br />}<br /><br />public List&lt;ParameterMapping&gt; getParameterMappings() {<br />return parameterMappings;<br />}<br /><br />public Object getParameterObject() {<br />return parameterObject;<br />}<br /><br />public boolean hasAdditionalParameter(String name) {<br />String paramName = new PropertyTokenizer(name).getName();<br />return additionalParameters.containsKey(paramName);<br />}<br /><br />public void setAdditionalParameter(String name, Object value) {<br />metaParameters.setValue(name, value);<br />}<br /><br />public Object getAdditionalParameter(String name) {<br />return metaParameters.getValue(name);<br />}<br />}<br />DynamicSqlSource<br />DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现。DynamicSqlSource使用rootSqlNode字段，记录了带解析的SqlNode根节点DynamicSqlSource的代码如下。</p>
<p><br />/**<br />* 负责解析动态sql语句<br />* 包含#{}占位符<br />*<br />* @author Clinton Begin<br />*/<br />public class DynamicSqlSource implements SqlSource {<br /><br />private final Configuration configuration;<br />private final SqlNode rootSqlNode;<br /><br />public DynamicSqlSource(Configuration configuration, SqlNode rootSqlNode) {<br />this.configuration = configuration;<br />this.rootSqlNode = rootSqlNode;<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />// 创建<br />DynamicContext context = new DynamicContext(configuration, parameterObject);<br />// 解析sql节点<br />rootSqlNode.apply(context);<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; parameterType = parameterObject == null ? Object.class : parameterObject.getClass();<br />// 解析sql，将#{}替换成?<br />SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br />BoundSql boundSql = sqlSource.getBoundSql(parameterObject);<br />context.getBindings().forEach(boundSql::setAdditionalParameter);<br />return boundSql;<br />}<br /><br />}<br />RawSqlSource<br />RawSqlSource的逻辑和DynamicSqlSource类似，但是处理SQL的机制不同。RawSqlSource用于处理非动态SQL。当一个sql中只包含#{}占位符。不包含${}和动态sql节点，就不是动态SQL语句，会创建相应的StaticTextSqlNode在XmlScriptBuilder.parseScriptNode方法会判断整个SQL节点是否是动态的，如果是动态，就用DynamicSqlSource进行处理，否则用RawSqlSource进行处理。</p>
<p>RawSqlSource在构造方法中会调用getSql方法，该方法会调用SqlNode.apply方法完成sql语句的处不处理。SqlSourceBuilder完成占位符的替换，并返回StaticSqlSource对象。</p>
<p><br />/**<br />* 处理非动态sql语句<br />* 如果节点只包含&ldquo;＃｛｝&rdquo;占位符，而不包含动态 SQL 点或未解析的 &ldquo;$｛｝&rdquo;占位<br />* 符的话， 则不是动态 SQL 语句<br />*<br />* @author Eduardo Macarron<br />* @since 3.2.0<br />*/<br />public class RawSqlSource implements SqlSource {<br /><br />private final SqlSource sqlSource;<br /><br />public RawSqlSource(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType) {<br />this(configuration, getSql(configuration, rootSqlNode), parameterType);<br />}<br /><br />public RawSqlSource(Configuration configuration, String sql, Class&lt;?&gt; parameterType) {<br />SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);<br />Class&lt;?&gt; clazz = parameterType == null ? Object.class : parameterType;<br />sqlSource = sqlSourceParser.parse(sql, clazz, new HashMap&lt;&gt;());<br />}<br /><br />private static String getSql(Configuration configuration, SqlNode rootSqlNode) {<br />DynamicContext context = new DynamicContext(configuration, null);<br />rootSqlNode.apply(context);<br />return context.getSql();<br />}<br /><br />@Override<br />public BoundSql getBoundSql(Object parameterObject) {<br />return sqlSource.getBoundSql(parameterObject);<br />}<br />}<br />像foreach、if、where等标签，以及${}占位符，在mybatis初始化时并不知道其具体含义，因此这类sql就视为&ldquo;动态sql&rdquo;，交由DynamicSqlSource在程序运行时进行解析。而如果只含有#{}占位符，则会在mybatis初始化时就完成sql解析。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=7, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 167(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:54:24.781 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:54:24.910 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:54:24.911 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:54:24.965 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 6
2020-05-23 19:54:24.970 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:54:24.973 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:54:25.020 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:54:25.161 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:54:25.162 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=5, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 300(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":6,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:54:25.259 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:55:16.819 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:55:16.820 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264162982769405952(String), count(1)，count(*)，count(主键) 性能对比及辟谣(String), null, <p>前言<br />前段时间关于统计数量的sql问题和朋友进行了讨论，网上关于这三种查询方式说法不一，主要有以下两种说法。</p>
<p>count(*) = count(主键) &gt; count(1)<br />count(主键) &gt; count(*) &gt; count(1)<br />今天对这三种方式进行探究。</p>
<p>数据库为mysql 5.7.12，引擎为InnoDB。</p>
<p>建表</p>
<p>CREATE TABLE `user` (<br />`id` int(32) NOT NULL AUTO_INCREMENT,<br />`name` varchar(500) DEFAULT NULL COMMENT '姓名',<br />`deleted` int(2) NOT NULL DEFAULT '1' COMMENT '逻辑删除',<br />`created_date` datetime DEFAULT NULL COMMENT '创建时间',<br />`created_by` varchar(255) DEFAULT NULL,<br />`update_date` datetime DEFAULT NULL,<br />`update_by` varchar(255) DEFAULT NULL,<br />`version` int(11) NOT NULL DEFAULT '1' COMMENT '乐观锁',<br />PRIMARY KEY (`id`) USING BTREE<br />) ENGINE=InnoDB AUTO_INCREMENT=1502726 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='用户表';<br />循环插入150万条数据。</p>
<p>DROP PROCEDURE<br />IF<br />EXISTS proc_initData;<br />DELIMITER $<br />CREATE PROCEDURE proc_initData () BEGIN<br />DECLARE<br />i INT DEFAULT 1;<br />WHILE<br />i &lt;= 5000000 DO<br />INSERT INTO user ( name, created_date, update_date )<br />VALUES<br />( '哈哈哈啊哈哈哈', NOW(), NOW() );<br /><br />SET i = i + 1;<br /><br />END WHILE;<br /><br />END $ CALL proc_initData ();<br />这里需要使用到mysql的explain关键字，对count(1)，count(*)，count(id)，count(name)分别查看性能</p>
<p>explain select count(1) from user<br />explain select count(*) from user<br />explain select count(id) from user<br />explain select count(name) from user</p>(String), 7(Integer), null, null
2020-05-23 19:55:16.915 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:55:16.971 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:55:16.973 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=<p>前言<br />前段时间关于统计数量的sql问题和朋友进行了讨论，网上关于这三种查询方式说法不一，主要有以下两种说法。</p>
<p>count(*) = count(主键) &gt; count(1)<br />count(主键) &gt; count(*) &gt; count(1)<br />今天对这三种方式进行探究。</p>
<p>数据库为mysql 5.7.12，引擎为InnoDB。</p>
<p>建表</p>
<p>CREATE TABLE `user` (<br />`id` int(32) NOT NULL AUTO_INCREMENT,<br />`name` varchar(500) DEFAULT NULL COMMENT '姓名',<br />`deleted` int(2) NOT NULL DEFAULT '1' COMMENT '逻辑删除',<br />`created_date` datetime DEFAULT NULL COMMENT '创建时间',<br />`created_by` varchar(255) DEFAULT NULL,<br />`update_date` datetime DEFAULT NULL,<br />`update_by` varchar(255) DEFAULT NULL,<br />`version` int(11) NOT NULL DEFAULT '1' COMMENT '乐观锁',<br />PRIMARY KEY (`id`) USING BTREE<br />) ENGINE=InnoDB AUTO_INCREMENT=1502726 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='用户表';<br />循环插入150万条数据。</p>
<p>DROP PROCEDURE<br />IF<br />EXISTS proc_initData;<br />DELIMITER $<br />CREATE PROCEDURE proc_initData () BEGIN<br />DECLARE<br />i INT DEFAULT 1;<br />WHILE<br />i &lt;= 5000000 DO<br />INSERT INTO user ( name, created_date, update_date )<br />VALUES<br />( '哈哈哈啊哈哈哈', NOW(), NOW() );<br /><br />SET i = i + 1;<br /><br />END WHILE;<br /><br />END $ CALL proc_initData ();<br />这里需要使用到mysql的explain关键字，对count(1)，count(*)，count(id)，count(name)分别查看性能</p>
<p>explain select count(1) from user<br />explain select count(*) from user<br />explain select count(id) from user<br />explain select count(name) from user</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=7, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 161(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:55:17.066 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:55:17.187 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:55:17.189 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:55:17.239 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 7
2020-05-23 19:55:17.241 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:55:17.242 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:55:17.292 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:55:17.440 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:55:17.442 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=6, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 295(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:55:17.537 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:56:30.893 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:56:30.895 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264163293454086144(String), Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点(String), null, <p>前言<br />接上一篇博客，解析核心配置文件的流程还剩两块。Mybatis初始化1.2 &mdash;&mdash; 解析别名、插件、对象工厂、反射工具箱、环境</p>
<p>本想着只是两个模块，随便写写就完事，没想到内容还不少，加上最近几天事情比较多，就没怎么更新，几天抽空编写剩下两块代码。</p>
<p>解析sql片段<br />sql节点配置在Mapper.xml文件中，用于配置一些常用的sql片段。</p>
<p>/**<br />* 解析sql节点。<br />* sql节点用于定义一些常用的sql片段<br />* @param list<br />*/<br />private void sqlElement(List&lt;XNode&gt; list) {<br />if (configuration.getDatabaseId() != null) {<br />sqlElement(list, configuration.getDatabaseId());<br />}<br />sqlElement(list, null);<br />}<br /><br />/**<br />* 解析sql节点<br />* @param list sql节点集合<br />* @param requiredDatabaseId 当前配置的databaseId<br />*/<br />private void sqlElement(List&lt;XNode&gt; list, String requiredDatabaseId) {<br />for (XNode context : list) {<br />// 获取databaseId和id属性<br />String databaseId = context.getStringAttribute("databaseId");<br />// 这里的id指定的是命名空间<br />String id = context.getStringAttribute("id");<br />// 启用当前的命名空间<br />id = builderAssistant.applyCurrentNamespace(id, false);<br />if (databaseIdMatchesCurrent(id, databaseId, requiredDatabaseId)) {<br />// 如果该节点指定的databaseId是当前配置中的，就启用该节点的sql片段<br />sqlFragments.put(id, context);<br />}<br />}<br />}<br />这里面，SQLFragments用于存放sql片段。在存放sql片段之前，会先调用databaseIdMatchesCurrent方法去校验该片段的databaseId是否为当前启用的databaseId</p>
<p>/**<br />* 判断databaseId是否是当前启用的<br />* @param id 命名空间id<br />* @param databaseId 待匹配的databaseId<br />* @param requiredDatabaseId 当前启用的databaseId<br />* @return<br />*/<br />private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {<br />if (requiredDatabaseId != null) {<br />return requiredDatabaseId.equals(databaseId);<br />}<br />if (databaseId != null) {<br />return false;<br />}<br />if (!this.sqlFragments.containsKey(id)) {<br />return true;<br />}<br />// skip this fragment if there is a previous one with a not null databaseId<br />XNode context = this.sqlFragments.get(id);<br />return context.getStringAttribute("databaseId") == null;</p>(String), 8(Integer), null, null
2020-05-23 19:56:30.993 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:56:31.359 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:56:31.361 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=<p>前言<br />接上一篇博客，解析核心配置文件的流程还剩两块。Mybatis初始化1.2 &mdash;&mdash; 解析别名、插件、对象工厂、反射工具箱、环境</p>
<p>本想着只是两个模块，随便写写就完事，没想到内容还不少，加上最近几天事情比较多，就没怎么更新，几天抽空编写剩下两块代码。</p>
<p>解析sql片段<br />sql节点配置在Mapper.xml文件中，用于配置一些常用的sql片段。</p>
<p>/**<br />* 解析sql节点。<br />* sql节点用于定义一些常用的sql片段<br />* @param list<br />*/<br />private void sqlElement(List&lt;XNode&gt; list) {<br />if (configuration.getDatabaseId() != null) {<br />sqlElement(list, configuration.getDatabaseId());<br />}<br />sqlElement(list, null);<br />}<br /><br />/**<br />* 解析sql节点<br />* @param list sql节点集合<br />* @param requiredDatabaseId 当前配置的databaseId<br />*/<br />private void sqlElement(List&lt;XNode&gt; list, String requiredDatabaseId) {<br />for (XNode context : list) {<br />// 获取databaseId和id属性<br />String databaseId = context.getStringAttribute("databaseId");<br />// 这里的id指定的是命名空间<br />String id = context.getStringAttribute("id");<br />// 启用当前的命名空间<br />id = builderAssistant.applyCurrentNamespace(id, false);<br />if (databaseIdMatchesCurrent(id, databaseId, requiredDatabaseId)) {<br />// 如果该节点指定的databaseId是当前配置中的，就启用该节点的sql片段<br />sqlFragments.put(id, context);<br />}<br />}<br />}<br />这里面，SQLFragments用于存放sql片段。在存放sql片段之前，会先调用databaseIdMatchesCurrent方法去校验该片段的databaseId是否为当前启用的databaseId</p>
<p>/**<br />* 判断databaseId是否是当前启用的<br />* @param id 命名空间id<br />* @param databaseId 待匹配的databaseId<br />* @param requiredDatabaseId 当前启用的databaseId<br />* @return<br />*/<br />private boolean databaseIdMatchesCurrent(String id, String databaseId, String requiredDatabaseId) {<br />if (requiredDatabaseId != null) {<br />return requiredDatabaseId.equals(databaseId);<br />}<br />if (databaseId != null) {<br />return false;<br />}<br />if (!this.sqlFragments.containsKey(id)) {<br />return true;<br />}<br />// skip this fragment if there is a previous one with a not null databaseId<br />XNode context = this.sqlFragments.get(id);<br />return context.getStringAttribute("databaseId") == null;</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=8, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 164(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 19:56:31.532 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 19:56:31.665 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 19:56:31.666 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 19:56:31.715 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 8
2020-05-23 19:56:31.717 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 19:56:31.718 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 19:56:31.765 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 19:56:31.919 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 19:56:31.920 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=7, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 302(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 19:56:32.013 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:00:06.114 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:00:06.120 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264164196127027200(String), 注解版poi操作工具(String), null, <p>最近在搭公司新项目的架构，测试的过程中深感导出Excel极为不便，因此就产生了写一个通用导出工具类的想法。写完后经测试发现比较好用，因此将公司相关的代码移除，单独拿出来这个模块进行开源。</p>
<p>项目的GitHub地址：POI操作工具</p>
<p>如果您对本工具比较感兴趣，可以加入下面QQ群进行技术交流：781943947</p>
<p>使用方式：</p>
<p>创建数据库（这个操作就不贴代码了）</p>
<p>导入工程下db目录的数据库</p>
<p>创建类ApiLog（实际开发中换成自己的类），加上注解@Excel</p>
<p>@Data<br />public class ApiLog implements Serializable {<br /><br />private static final long serialVersionUID = -3286564461647015367L;<br /><br />/**<br />* 日志id<br />*/<br />@Excel(name = "编号")<br />private Integer logId;<br /><br />/**<br />* 请求路径<br />*/<br />@Excel(name = "请求地址")<br />private String logUrl;<br /><br />/**<br />* 参数<br />*/<br />@Excel(name = "请求参数")<br />private String logParams;<br /><br />/**<br />* 访问状态，1正常0异常<br />*/<br />@Excel(name = "访问状态")<br />private Integer logStatus;<br /><br />/**<br />* 异常信息<br />*/<br />@Excel(name = "异常信息")<br />private String logMessage;<br /><br />/**<br />* 浏览器UA标识<br />*/<br />@Excel(name = "浏览器标识", autoSize = true)<br />private String logUa;<br /><br />/**<br />* 访问controller<br />*/<br />@Excel(name = "控制层")<br />private String logController;<br /><br />/**<br />* 请求方式，get、post等<br />*/<br />@Excel(name = "请求方式")<br />private String logMethod;<br /><br />/**<br />* 响应时间，单位毫秒<br />*/<br />@Excel(name = "响应时间", isStatistics = true)<br />private Long logTime;<br /><br />/**<br />* 请求ip<br />*/<br />@Excel(name = "请求ip")<br />private String logIp;<br /><br />/**<br />* 设备MAC<br />*/<br />@Excel(name = "设备号")<br />private String logDevice;<br /><br />/**<br />* 创建时间<br />*/<br />@Excel(name = "请求时间")<br />private String createdDate;<br /><br />/**<br />* 创建人<br />*/<br />private String createdBy;<br /><br />/**<br />* 创建人姓名<br />*/<br />@Excel(name = "创建人", autoSize = true)<br />private String createdName;<br /><br />/**<br />* 返回值<br />*/<br />@Excel(name = "返回值")<br />private String logResult;<br /><br />/**<br />* 日志内容<br />*/<br />@Excel(name = "日志内容")<br />private String logContent;<br /><br />/**<br />* 日志类型 0:操作日志;1:登录日志;2:定时任务;<br />*/<br />private Integer logType;<br /><br />/**<br />* 操作类型 1查询，2添加，3修改，4删除，5导入，6导出<br />*/<br />private Integer logOperateType;<br /><br />@Override<br />public String toString() {<br />return "ApiLog{" +<br />"logId=" + logId +<br />", logUrl='" + logUrl + '\'' +<br />", logParams='" + logParams + '\'' +<br />", logStatus=" + logStatus +<br />", logMessage='" + logMessage + '\'' +<br />", logUa='" + logUa + '\'' +<br />", logController='" + logController + '\'' +<br />", logMethod='" + logMethod + '\'' +<br />", logTime=" + logTime +<br />", logIp='" + logIp + '\'' +<br />", logDevice='" + logDevice + '\'' +<br />", createdDate='" + createdDate + '\'' +<br />", createdBy='" + createdBy + '\'' +<br />", createdName='" + createdName + '\'' +<br />", logResult='" + logResult + '\'' +<br />", logContent='" + logContent + '\'' +<br />", logType=" + logType +<br />", logOperateType=" + logOperateType +<br />'}';<br />}<br />}<br />编写Mapper（Service就跳过了）</p>
<p>@Component<br />public interface ApiMapper {<br /><br />/**<br />* 查询所有<br />* @return<br />*/<br />List&lt;ApiLog&gt; findAll();<br /><br />}<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;<br />&lt;mapper namespace="com.gej.poi.mapper.ApiMapper"&gt;<br />&lt;!-- 注意：本内容仅限于风越云力内部传阅，禁止外泄以及用于其他的商业目 --&gt;<br />&lt;!-- 通用查询映射结果 --&gt;<br />&lt;resultMap id="BaseResultMap" type="com.gej.poi.pojo.ApiLog"&gt;<br />&lt;id column="log_id" property="logId"/&gt;<br />&lt;result column="log_url" property="logUrl"/&gt;<br />&lt;result column="log_params" property="logParams"/&gt;<br />&lt;result column="log_status" property="logStatus"/&gt;<br />&lt;result column="log_message" property="logMessage"/&gt;<br />&lt;result column="log_ua" property="logUa"/&gt;<br />&lt;result column="log_controller" property="logController"/&gt;<br />&lt;result column="log_method" property="logMethod"/&gt;<br />&lt;result column="log_time" property="logTime"/&gt;<br />&lt;result column="log_ip" property="logIp"/&gt;<br />&lt;result column="log_device" property="logDevice"/&gt;<br />&lt;result column="created_date" property="createdDate"/&gt;<br />&lt;result column="created_by" property="createdBy"/&gt;<br />&lt;result column="log_result" property="logResult"/&gt;<br />&lt;result column="created_name" property="createdName"/&gt;<br />&lt;/resultMap&gt;<br /><br />&lt;!-- 通用查询结果列 --&gt;<br />&lt;sql id="Base_Column_List"&gt;<br />log_id, log_url, log_params, log_status, log_message, log_ua, log_controller, log_method, log_time, log_ip, log_device, created_date, created_name, log_result<br />&lt;/sql&gt;<br /><br />&lt;select id="findAll" resultMap="BaseResultMap"&gt;<br />select * from sys_log_api<br />&lt;/select&gt;<br /><br />&lt;/mapper&gt;<br />编写测试类</p>
<p>@SpringBootTest<br />@RunWith(SpringRunner.class)<br />public class ExportTest {<br /><br />@Autowired<br />private ApiMapper apiMapper;<br /><br />/**<br />* 导出测试<br />* @throws Exception<br />*/<br />@Test<br />public void testExportLog() throws Exception {<br />List&lt;ApiLog&gt; list = apiMapper.findAll();<br />Workbook workbook = new ExcelExportHandler().createSheet(new ExportParams("测试导出", "最新日志"), ApiLog.class, list);<br />OutputStream outputStream = new FileOutputStream(new File("D:/测试.xlsx"));<br />workbook.write(outputStream);<br />}<br /><br />/**<br />* 导入测试<br />* @throws Exception<br />*/<br />@Test<br />public void testImportLog() throws Exception {<br />InputStream inputStream = new FileInputStream(new File("D:/测试.xlsx"));<br />List&lt;ApiLog&gt; apiLogs = new ExcelImportHandler().importExcel(inputStream, ApiLog.class, new ImportParams());<br />for (ApiLog apiLog : apiLogs) {<br />System.out.println(apiLog);<br />}<br />}<br /><br />}<br />最后附上Excel注解的代码</p>
<p>@Retention(RetentionPolicy.RUNTIME)<br />@Target({ElementType.FIELD})<br />public @interface Excel {<br /><br />/**<br />* 该列是否需要时间格式化<br />*/<br />boolean needFormat() default false;<br /><br />/**<br />* 时间格式化<br />*/<br />String format() default "";<br /><br />/**<br />* 导出时在excel中每个列的高度 单位为字符，一个汉字=2个字符<br />*/<br />double height() default 10;<br /><br />/**<br />* 导出时的列名。不可重复<br />*/<br />String name();<br /><br />/**<br />* 导出时在excel中每个列的宽 单位为字符，一个汉字=2个字符 如 以列名列内容中较合适的长度 例如姓名列6 【姓名一般三个字】<br />* 性别列4【男女占1，但是列标题两个汉字】 限制1-255<br />*/<br />double width() default 10;<br /><br />/**<br />* 是否自动统计数据,如果是统计,true的话在最后追加一行统计,把所有数据求和<br />*/<br />boolean isStatistics() default false;<br /><br />/**<br />* 是否设置列宽自适应<br />*/<br />boolean autoSize() default false;<br /><br />}<br />最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>(String), 8(Integer), null, null
2020-05-23 20:00:06.217 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:00:06.274 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:00:06.276 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=注解版poi操作工具, blogImage=null, blogContent=<p>最近在搭公司新项目的架构，测试的过程中深感导出Excel极为不便，因此就产生了写一个通用导出工具类的想法。写完后经测试发现比较好用，因此将公司相关的代码移除，单独拿出来这个模块进行开源。</p>
<p>项目的GitHub地址：POI操作工具</p>
<p>如果您对本工具比较感兴趣，可以加入下面QQ群进行技术交流：781943947</p>
<p>使用方式：</p>
<p>创建数据库（这个操作就不贴代码了）</p>
<p>导入工程下db目录的数据库</p>
<p>创建类ApiLog（实际开发中换成自己的类），加上注解@Excel</p>
<p>@Data<br />public class ApiLog implements Serializable {<br /><br />private static final long serialVersionUID = -3286564461647015367L;<br /><br />/**<br />* 日志id<br />*/<br />@Excel(name = "编号")<br />private Integer logId;<br /><br />/**<br />* 请求路径<br />*/<br />@Excel(name = "请求地址")<br />private String logUrl;<br /><br />/**<br />* 参数<br />*/<br />@Excel(name = "请求参数")<br />private String logParams;<br /><br />/**<br />* 访问状态，1正常0异常<br />*/<br />@Excel(name = "访问状态")<br />private Integer logStatus;<br /><br />/**<br />* 异常信息<br />*/<br />@Excel(name = "异常信息")<br />private String logMessage;<br /><br />/**<br />* 浏览器UA标识<br />*/<br />@Excel(name = "浏览器标识", autoSize = true)<br />private String logUa;<br /><br />/**<br />* 访问controller<br />*/<br />@Excel(name = "控制层")<br />private String logController;<br /><br />/**<br />* 请求方式，get、post等<br />*/<br />@Excel(name = "请求方式")<br />private String logMethod;<br /><br />/**<br />* 响应时间，单位毫秒<br />*/<br />@Excel(name = "响应时间", isStatistics = true)<br />private Long logTime;<br /><br />/**<br />* 请求ip<br />*/<br />@Excel(name = "请求ip")<br />private String logIp;<br /><br />/**<br />* 设备MAC<br />*/<br />@Excel(name = "设备号")<br />private String logDevice;<br /><br />/**<br />* 创建时间<br />*/<br />@Excel(name = "请求时间")<br />private String createdDate;<br /><br />/**<br />* 创建人<br />*/<br />private String createdBy;<br /><br />/**<br />* 创建人姓名<br />*/<br />@Excel(name = "创建人", autoSize = true)<br />private String createdName;<br /><br />/**<br />* 返回值<br />*/<br />@Excel(name = "返回值")<br />private String logResult;<br /><br />/**<br />* 日志内容<br />*/<br />@Excel(name = "日志内容")<br />private String logContent;<br /><br />/**<br />* 日志类型 0:操作日志;1:登录日志;2:定时任务;<br />*/<br />private Integer logType;<br /><br />/**<br />* 操作类型 1查询，2添加，3修改，4删除，5导入，6导出<br />*/<br />private Integer logOperateType;<br /><br />@Override<br />public String toString() {<br />return "ApiLog{" +<br />"logId=" + logId +<br />", logUrl='" + logUrl + '\'' +<br />", logParams='" + logParams + '\'' +<br />", logStatus=" + logStatus +<br />", logMessage='" + logMessage + '\'' +<br />", logUa='" + logUa + '\'' +<br />", logController='" + logController + '\'' +<br />", logMethod='" + logMethod + '\'' +<br />", logTime=" + logTime +<br />", logIp='" + logIp + '\'' +<br />", logDevice='" + logDevice + '\'' +<br />", createdDate='" + createdDate + '\'' +<br />", createdBy='" + createdBy + '\'' +<br />", createdName='" + createdName + '\'' +<br />", logResult='" + logResult + '\'' +<br />", logContent='" + logContent + '\'' +<br />", logType=" + logType +<br />", logOperateType=" + logOperateType +<br />'}';<br />}<br />}<br />编写Mapper（Service就跳过了）</p>
<p>@Component<br />public interface ApiMapper {<br /><br />/**<br />* 查询所有<br />* @return<br />*/<br />List&lt;ApiLog&gt; findAll();<br /><br />}<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;<br />&lt;mapper namespace="com.gej.poi.mapper.ApiMapper"&gt;<br />&lt;!-- 注意：本内容仅限于风越云力内部传阅，禁止外泄以及用于其他的商业目 --&gt;<br />&lt;!-- 通用查询映射结果 --&gt;<br />&lt;resultMap id="BaseResultMap" type="com.gej.poi.pojo.ApiLog"&gt;<br />&lt;id column="log_id" property="logId"/&gt;<br />&lt;result column="log_url" property="logUrl"/&gt;<br />&lt;result column="log_params" property="logParams"/&gt;<br />&lt;result column="log_status" property="logStatus"/&gt;<br />&lt;result column="log_message" property="logMessage"/&gt;<br />&lt;result column="log_ua" property="logUa"/&gt;<br />&lt;result column="log_controller" property="logController"/&gt;<br />&lt;result column="log_method" property="logMethod"/&gt;<br />&lt;result column="log_time" property="logTime"/&gt;<br />&lt;result column="log_ip" property="logIp"/&gt;<br />&lt;result column="log_device" property="logDevice"/&gt;<br />&lt;result column="created_date" property="createdDate"/&gt;<br />&lt;result column="created_by" property="createdBy"/&gt;<br />&lt;result column="log_result" property="logResult"/&gt;<br />&lt;result column="created_name" property="createdName"/&gt;<br />&lt;/resultMap&gt;<br /><br />&lt;!-- 通用查询结果列 --&gt;<br />&lt;sql id="Base_Column_List"&gt;<br />log_id, log_url, log_params, log_status, log_message, log_ua, log_controller, log_method, log_time, log_ip, log_device, created_date, created_name, log_result<br />&lt;/sql&gt;<br /><br />&lt;select id="findAll" resultMap="BaseResultMap"&gt;<br />select * from sys_log_api<br />&lt;/select&gt;<br /><br />&lt;/mapper&gt;<br />编写测试类</p>
<p>@SpringBootTest<br />@RunWith(SpringRunner.class)<br />public class ExportTest {<br /><br />@Autowired<br />private ApiMapper apiMapper;<br /><br />/**<br />* 导出测试<br />* @throws Exception<br />*/<br />@Test<br />public void testExportLog() throws Exception {<br />List&lt;ApiLog&gt; list = apiMapper.findAll();<br />Workbook workbook = new ExcelExportHandler().createSheet(new ExportParams("测试导出", "最新日志"), ApiLog.class, list);<br />OutputStream outputStream = new FileOutputStream(new File("D:/测试.xlsx"));<br />workbook.write(outputStream);<br />}<br /><br />/**<br />* 导入测试<br />* @throws Exception<br />*/<br />@Test<br />public void testImportLog() throws Exception {<br />InputStream inputStream = new FileInputStream(new File("D:/测试.xlsx"));<br />List&lt;ApiLog&gt; apiLogs = new ExcelImportHandler().importExcel(inputStream, ApiLog.class, new ImportParams());<br />for (ApiLog apiLog : apiLogs) {<br />System.out.println(apiLog);<br />}<br />}<br /><br />}<br />最后附上Excel注解的代码</p>
<p>@Retention(RetentionPolicy.RUNTIME)<br />@Target({ElementType.FIELD})<br />public @interface Excel {<br /><br />/**<br />* 该列是否需要时间格式化<br />*/<br />boolean needFormat() default false;<br /><br />/**<br />* 时间格式化<br />*/<br />String format() default "";<br /><br />/**<br />* 导出时在excel中每个列的高度 单位为字符，一个汉字=2个字符<br />*/<br />double height() default 10;<br /><br />/**<br />* 导出时的列名。不可重复<br />*/<br />String name();<br /><br />/**<br />* 导出时在excel中每个列的宽 单位为字符，一个汉字=2个字符 如 以列名列内容中较合适的长度 例如姓名列6 【姓名一般三个字】<br />* 性别列4【男女占1，但是列标题两个汉字】 限制1-255<br />*/<br />double width() default 10;<br /><br />/**<br />* 是否自动统计数据,如果是统计,true的话在最后追加一行统计,把所有数据求和<br />*/<br />boolean isStatistics() default false;<br /><br />/**<br />* 是否设置列宽自适应<br />*/<br />boolean autoSize() default false;<br /><br />}<br />最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=8, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 183(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 20:00:06.377 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:00:06.534 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:00:06.535 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:00:06.588 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 9
2020-05-23 20:00:06.590 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:00:06.593 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:00:06.639 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:00:06.833 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:00:06.834 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
### The error may involve com.jg.blog.mapper.LogMapper.save-Inline
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
	at com.jg.blog.service.impl.LogServiceImpl.save(LogServiceImpl.java:36)
	at com.jg.blog.service.impl.LogServiceImpl$$FastClassBySpringCGLIB$$d24891de.invoke(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$EnhancerBySpringCGLIB$$28666633.save(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$FastClassBySpringCGLIB$$d24891de.invoke(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$EnhancerBySpringCGLIB$$bbd9df25.save(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAfterReturning(RequestAspect.java:85)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8aee03a7.save(<generated>)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
(String), POST(String), 310(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":9,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:00:06.958 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:00:57.482 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:00:57.484 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264164411613589504(String), JVM内存调优参数(String), null, <p>-Xms<br />JVM启动时申请的初始Heap值，默认为操作系统物理内存的1/64但小于1G。默认当空余堆内存大于70%时，JVM会减小heap的大小到-Xms指定的大小，可通过-XX:MaxHeapFreeRation=来指定这个比列。Server端JVM最好将-Xms和-Xmx设为相同值，避免每次垃圾回收完成后JVM重新分配内存；开发测试机JVM可以保留默认值。</p>
<p>-Xmx<br />JVM可申请的最大Heap值，默认值为物理内存的1/4但小于1G，默认当空余堆内存小于40%时，JVM会增大Heap到-Xmx指定的大小，可通过-XX:MinHeapFreeRation=来指定这个比列。最佳设值应该视物理内存大小及计算机内其他内存开销而定。</p>
<p>-Xmn<br />Java Heap Young区大小。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小(相对于HotSpot 类型的虚拟机来说)。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。</p>
<p>程序新创建的对象都是从年轻代分配内存，年轻代由Eden Space和两块相同大小的SurvivorSpace(通常又称S0和S1或From和To)构成，可通过-Xmn参数来指定年轻代的大小，也可以通过-XX:SurvivorRation来调整Eden Space及SurvivorSpace的大小。</p>
<p>老年代用于存放经过多次新生代GC仍然存活的对象，例如缓存对象，新建的对象也有可能直接进入老年代，主要有两种情况：1、大对象，可通过启动参数设置-XX:PretenureSizeThreshold=1024(单位为字节，默认为0)来代表超过多大时就不在新生代分配，而是直接在老年代分配。2、大的数组对象，且数组中无引用外部对象。老年代所占的内存大小为-Xmx对应的值减去-Xmn对应的值。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p>
<p>-Xss<br />Java每个线程的Stack大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。根据应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。(例如：-Xss1024K)</p>
<p>-XX:PermSize<br />持久代（方法区）的初始内存大小。（例如：-XX:PermSize=64m）</p>
<p>-XX:MaxPermSize<br />持久代（方法区）的最大内存大小。（例如：-XX:MaxPermSize=512m）</p>
<p>-XX:+UseSerialGC<br />串行（SerialGC）是jvm的默认GC方式，一般适用于小型应用和单处理器，算法比较简单，GC效率也较高，但可能会给应用带来停顿。</p>
<p>-XX:+UseParallelGC<br />并行（ParallelGC）是指多个线程并行执行GC，一般适用于多处理器系统中，可以提高GC的效率，但算法复杂，系统消耗较大。（配合使用：-XX:ParallelGCThreads=8，并行收集器的线程数，此值最好配置与处理器数目相等）</p>
<p>-XX:+UseParNewGC<br />设置年轻代为并行收集，JKD5.0以上，JVM会根据系统配置自行设置，所以无需设置此值。</p>
<p>-XX:+UseParallelOldGC<br />设置年老代为并行收集，JKD6.0出现的参数选项。</p>
<p>-XX:+UseConcMarkSweepGC<br />并发（ConcMarkSweepGC）是指GC运行时，对应用程序运行几乎没有影响（也会造成停顿，不过很小而已），GC和app两者的线程在并发执行，这样可以最大限度不影响app的运行。</p>
<p>-XX:+UseCMSCompactAtFullCollection<br />在Full GC的时候，对老年代进行压缩整理。因为CMS是不会移动内存的，因此非常容易产生内存碎片。因此增加这个参数就可以在FullGC后对内存进行压缩整理，消除内存碎片。当然这个操作也有一定缺点，就是会增加CPU开销与GC时间，所以可以通过-XX:CMSFullGCsBeforeCompaction=3 这个参数来控制多少次Full GC以后进行一次碎片整理。</p>
<p>-XX:+CMSInitiatingOccupancyFraction=80<br />代表老年代使用空间达到80%后，就进行Full GC。CMS收集器在进行垃圾收集时，和应用程序一起工作，所以，不能等到老年代几乎完全被填满了再进行收集，这样会影响并发的应用线程的空间使用，从而再次触发不必要的Full GC。</p>
<p>-XX:+MaxTenuringThreshold=10<br />垃圾的最大年龄，代表对象在Survivor区经过10次复制以后才进入老年代。如果设置为0，则年轻代对象不经过Survivor区，直接进入老年代。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>(String), 8(Integer), null, null
2020-05-23 20:00:57.582 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:00:57.641 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:00:57.643 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=JVM内存调优参数, blogImage=null, blogContent=<p>-Xms<br />JVM启动时申请的初始Heap值，默认为操作系统物理内存的1/64但小于1G。默认当空余堆内存大于70%时，JVM会减小heap的大小到-Xms指定的大小，可通过-XX:MaxHeapFreeRation=来指定这个比列。Server端JVM最好将-Xms和-Xmx设为相同值，避免每次垃圾回收完成后JVM重新分配内存；开发测试机JVM可以保留默认值。</p>
<p>-Xmx<br />JVM可申请的最大Heap值，默认值为物理内存的1/4但小于1G，默认当空余堆内存小于40%时，JVM会增大Heap到-Xmx指定的大小，可通过-XX:MinHeapFreeRation=来指定这个比列。最佳设值应该视物理内存大小及计算机内其他内存开销而定。</p>
<p>-Xmn<br />Java Heap Young区大小。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小(相对于HotSpot 类型的虚拟机来说)。持久代一般固定大小为64m，所以增大年轻代后，将会减小年老代大小。此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。</p>
<p>程序新创建的对象都是从年轻代分配内存，年轻代由Eden Space和两块相同大小的SurvivorSpace(通常又称S0和S1或From和To)构成，可通过-Xmn参数来指定年轻代的大小，也可以通过-XX:SurvivorRation来调整Eden Space及SurvivorSpace的大小。</p>
<p>老年代用于存放经过多次新生代GC仍然存活的对象，例如缓存对象，新建的对象也有可能直接进入老年代，主要有两种情况：1、大对象，可通过启动参数设置-XX:PretenureSizeThreshold=1024(单位为字节，默认为0)来代表超过多大时就不在新生代分配，而是直接在老年代分配。2、大的数组对象，且数组中无引用外部对象。老年代所占的内存大小为-Xmx对应的值减去-Xmn对应的值。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p>
<p>-Xss<br />Java每个线程的Stack大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。根据应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。(例如：-Xss1024K)</p>
<p>-XX:PermSize<br />持久代（方法区）的初始内存大小。（例如：-XX:PermSize=64m）</p>
<p>-XX:MaxPermSize<br />持久代（方法区）的最大内存大小。（例如：-XX:MaxPermSize=512m）</p>
<p>-XX:+UseSerialGC<br />串行（SerialGC）是jvm的默认GC方式，一般适用于小型应用和单处理器，算法比较简单，GC效率也较高，但可能会给应用带来停顿。</p>
<p>-XX:+UseParallelGC<br />并行（ParallelGC）是指多个线程并行执行GC，一般适用于多处理器系统中，可以提高GC的效率，但算法复杂，系统消耗较大。（配合使用：-XX:ParallelGCThreads=8，并行收集器的线程数，此值最好配置与处理器数目相等）</p>
<p>-XX:+UseParNewGC<br />设置年轻代为并行收集，JKD5.0以上，JVM会根据系统配置自行设置，所以无需设置此值。</p>
<p>-XX:+UseParallelOldGC<br />设置年老代为并行收集，JKD6.0出现的参数选项。</p>
<p>-XX:+UseConcMarkSweepGC<br />并发（ConcMarkSweepGC）是指GC运行时，对应用程序运行几乎没有影响（也会造成停顿，不过很小而已），GC和app两者的线程在并发执行，这样可以最大限度不影响app的运行。</p>
<p>-XX:+UseCMSCompactAtFullCollection<br />在Full GC的时候，对老年代进行压缩整理。因为CMS是不会移动内存的，因此非常容易产生内存碎片。因此增加这个参数就可以在FullGC后对内存进行压缩整理，消除内存碎片。当然这个操作也有一定缺点，就是会增加CPU开销与GC时间，所以可以通过-XX:CMSFullGCsBeforeCompaction=3 这个参数来控制多少次Full GC以后进行一次碎片整理。</p>
<p>-XX:+CMSInitiatingOccupancyFraction=80<br />代表老年代使用空间达到80%后，就进行Full GC。CMS收集器在进行垃圾收集时，和应用程序一起工作，所以，不能等到老年代几乎完全被填满了再进行收集，这样会影响并发的应用线程的空间使用，从而再次触发不必要的Full GC。</p>
<p>-XX:+MaxTenuringThreshold=10<br />垃圾的最大年龄，代表对象在Survivor区经过10次复制以后才进入老年代。如果设置为0，则年轻代对象不经过Survivor区，直接进入老年代。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=8, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 164(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 20:00:57.740 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:00:58.189 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:00:58.191 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:00:58.245 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:00:58.246 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:00:58.247 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:00:58.293 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:00:58.442 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:00:58.444 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=9, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31), BlogVo(blogId=1264164196127027200, blogTitle=注解版poi操作工具, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:06, updateTime=2020-05-23 12:00:06)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 608(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":10,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:00:58.546 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:01:41.806 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:01:41.807 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264164597538697216(String), 垃圾回收算法(String), null, <p>标记清除算法<br />概念<br />该算法有两个阶段。</p>
<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>
<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>
<p>缺点：会产生碎片，不够连贯</p>
<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>
<p>优缺点<br />标记清除算法的优点和缺点</p>
<p>1. 优点</p>
<p>- 是可以解决循环引用的问题</p>
<p>- 必要时才回收(内存不足时)</p>
<p>2. 缺点：</p>
<p>- 回收时，应用需要挂起，也就是stop the world。</p>
<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>
<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>
<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>
<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>
<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>
<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>
<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>
<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>
<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>
<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>
<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>
<p>概念</p>
<p><br />&nbsp;</p>
<p>压缩算法简单介绍</p>
<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>
<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>
<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>
<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>
<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>
<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>
<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>
<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>
<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>
<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。<br /><br /></p>(String), 8(Integer), null, null
2020-05-23 20:01:41.902 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:01:41.957 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:01:41.958 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>
<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>
<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>
<p>缺点：会产生碎片，不够连贯</p>
<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>
<p>优缺点<br />标记清除算法的优点和缺点</p>
<p>1. 优点</p>
<p>- 是可以解决循环引用的问题</p>
<p>- 必要时才回收(内存不足时)</p>
<p>2. 缺点：</p>
<p>- 回收时，应用需要挂起，也就是stop the world。</p>
<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>
<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>
<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>
<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>
<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>
<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>
<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>
<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>
<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>
<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>
<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>
<p>概念</p>
<p><br />&nbsp;</p>
<p>压缩算法简单介绍</p>
<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>
<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>
<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>
<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>
<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>
<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>
<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>
<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>
<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>
<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。<br /><br /></p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=8, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 154(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 20:01:42.051 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:01:42.253 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:01:42.256 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:01:42.307 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:01:42.315 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:01:42.316 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:01:42.362 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:01:42.532 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:01:42.533 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=10, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31), BlogVo(blogId=1264164196127027200, blogTitle=注解版poi操作工具, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:06, updateTime=2020-05-23 12:00:06), BlogVo(blogId=1264164411613589504, blogTitle=JVM内存调优参数, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:58, updateTime=2020-05-23 12:00:58)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 370(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":11,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:01:42.628 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:03:40.912 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:03:40.918 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264165097050943488(String), 代理设计模式(String), null, <p>概念<br />通过代理控制对象的访问,可以详细访问某个对象的方法，在这个方法调用处理，或调用后处理（类似于AOP）。</p>
<p>代理设计模式应用场景：AOP、权限控制、事务</p>
<p>常见代理的分类有：静态代理，动态代理（JDK动态代理，Cglib等）</p>
<p>注意：本文所指的&ldquo;代理&rdquo;为设计模式中的&ldquo;代理设计模式&rdquo;，跟正向、反向代理并非一个概念，不要混淆。</p>
<p>静态代理<br />由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</p>
<p>public interface IUserDao {<br />void save();<br />}<br /><br />public class UserDao implements IUserDao {<br />public void save() {<br />System.out.println("已经保存数据...");<br />}<br />}<br /><br />/**<br />* 代理类<br />*/<br />public class UserDaoProxy implements IUserDao {<br />private IUserDao target;<br /><br />public UserDaoProxy(IUserDao iuserDao) {<br />this.target = iuserDao;<br />}<br /><br />public void save() {<br />System.out.println("开启事物...");<br />target.save();<br />System.out.println("关闭事物...");<br />}<br /><br />}<br />静态代理需要每个被代理类都有一个代理类，因此代码量较多，实际开发中非必须情况尽量少用。</p>
<p>动态代理<br />JDK动态代理<br />1)原理：是根据类加载器和接口创建代理类（此代理类是接口的实现类，所以必须使用接口 面向接口生成代理，位于java.lang.reflect包下）</p>
<p>2)实现方式：</p>
<p>1. 通过实现InvocationHandler接口创建自己的调用处理器 IvocationHandler handler = new InvocationHandlerImpl(&hellip;);</p>
<p>2. 通过为Proxy类指定ClassLoader对象和一组interface创建动态代理类Class clazz = Proxy.getProxyClass(classLoader,new Class[]{&hellip;});</p>
<p>3. 通过反射机制获取动态代理类的构造函数，其参数类型是调用处理器接口类型Constructor constructor = clazz.getConstructor(new Class[]{InvocationHandler.class});</p>
<p>4. 通过构造函数创建代理类实例，此时需将调用处理器对象作为参数被传入Interface Proxy = (Interface)constructor.newInstance(new Object[] (handler));</p>
<p>缺点：jdk动态代理，必须是面向接口，目标业务类必须实现接口</p>
<p>public class InvocationHandlerImpl implements InvocationHandler {<br /><br />/** 目标代理对象 */<br />private Object target;<br /><br />public InvocationHandlerImpl(Object target) {<br />this.target = target;<br />}<br /><br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 反射执行方法<br />Object invoke = method.invoke(target, args);<br />return invoke;<br />}<br />public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException,<br />IllegalAccessException, IllegalArgumentException, InvocationTargetException {<br />// 被代理对象<br />IUserDao userDao = new UserDao();<br />InvocationHandlerImpl invocationHandlerImpl = new InvocationHandlerImpl(userDao);<br />ClassLoader loader = userDao.getClass().getClassLoader();<br />Class&lt;?&gt;[] interfaces = userDao.getClass().getInterfaces();<br />// 主要装载器、一组接口及调用处理动态代理实例<br />IUserDao newProxyInstance = (IUserDao) Proxy.newProxyInstance(loader, interfaces, invocationHandlerImpl);<br />newProxyInstance.save();<br />}<br />}<br /><br />Cglib动态代理<br />原理：利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。&nbsp;</p>
<p>使用cglib[Code Generation Library]实现动态代理，并不要求委托类必须实现接口，底层采用asm字节码生成框架生成代理类的字节码</p>
<p>引入依赖：</p>
<p>&lt;dependencies&gt;<br />&lt;dependency&gt;<br />&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br />&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br />&lt;version&gt;3.8.1&lt;/version&gt;<br />&lt;/dependency&gt;<br />&lt;dependency&gt;<br />&lt;groupId&gt;cglib&lt;/groupId&gt;<br />&lt;artifactId&gt;cglib&lt;/artifactId&gt;<br />&lt;version&gt;3.1&lt;/version&gt;<br />&lt;/dependency&gt;<br />&lt;/dependencies&gt;<br />创建代理：</p>
<p>public class CglibProxy implements MethodInterceptor {<br /><br />/** 代理对象 */<br />private Object target;<br /><br />public Object getInstance(Object target) {<br />// 固定代码，创建访问对象<br />this.target = target;<br />Enhancer enhancer = new Enhancer();<br />enhancer.setSuperclass(target.getClass());<br />enhancer.setCallback(this);<br />return enhancer.create();<br />}<br /><br />public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {<br />Object invoke = methodProxy.invoke(target, args);<br />return invoke;<br />}<br /><br />public static void main(String[] args) {<br />CglibProxy cglibProxy = new CglibProxy();<br />UserDao userDao = (UserDao) cglibProxy.getInstance(new UserDao());<br />userDao.save();<br />}<br />}<br />Cglib和jdk动态代理的区别<br />java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</p>
<p>而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p>
<p>Spring中。</p>
<p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p>
<p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p>
<p>3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p>
<p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。</p>
<p>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。</p>
<p>因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/102690118</p>(String), 8(Integer), null, null
2020-05-23 20:03:41.018 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:03:41.092 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:03:41.094 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=代理设计模式, blogImage=null, blogContent=<p>概念<br />通过代理控制对象的访问,可以详细访问某个对象的方法，在这个方法调用处理，或调用后处理（类似于AOP）。</p>
<p>代理设计模式应用场景：AOP、权限控制、事务</p>
<p>常见代理的分类有：静态代理，动态代理（JDK动态代理，Cglib等）</p>
<p>注意：本文所指的&ldquo;代理&rdquo;为设计模式中的&ldquo;代理设计模式&rdquo;，跟正向、反向代理并非一个概念，不要混淆。</p>
<p>静态代理<br />由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</p>
<p>public interface IUserDao {<br />void save();<br />}<br /><br />public class UserDao implements IUserDao {<br />public void save() {<br />System.out.println("已经保存数据...");<br />}<br />}<br /><br />/**<br />* 代理类<br />*/<br />public class UserDaoProxy implements IUserDao {<br />private IUserDao target;<br /><br />public UserDaoProxy(IUserDao iuserDao) {<br />this.target = iuserDao;<br />}<br /><br />public void save() {<br />System.out.println("开启事物...");<br />target.save();<br />System.out.println("关闭事物...");<br />}<br /><br />}<br />静态代理需要每个被代理类都有一个代理类，因此代码量较多，实际开发中非必须情况尽量少用。</p>
<p>动态代理<br />JDK动态代理<br />1)原理：是根据类加载器和接口创建代理类（此代理类是接口的实现类，所以必须使用接口 面向接口生成代理，位于java.lang.reflect包下）</p>
<p>2)实现方式：</p>
<p>1. 通过实现InvocationHandler接口创建自己的调用处理器 IvocationHandler handler = new InvocationHandlerImpl(&hellip;);</p>
<p>2. 通过为Proxy类指定ClassLoader对象和一组interface创建动态代理类Class clazz = Proxy.getProxyClass(classLoader,new Class[]{&hellip;});</p>
<p>3. 通过反射机制获取动态代理类的构造函数，其参数类型是调用处理器接口类型Constructor constructor = clazz.getConstructor(new Class[]{InvocationHandler.class});</p>
<p>4. 通过构造函数创建代理类实例，此时需将调用处理器对象作为参数被传入Interface Proxy = (Interface)constructor.newInstance(new Object[] (handler));</p>
<p>缺点：jdk动态代理，必须是面向接口，目标业务类必须实现接口</p>
<p>public class InvocationHandlerImpl implements InvocationHandler {<br /><br />/** 目标代理对象 */<br />private Object target;<br /><br />public InvocationHandlerImpl(Object target) {<br />this.target = target;<br />}<br /><br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 反射执行方法<br />Object invoke = method.invoke(target, args);<br />return invoke;<br />}<br />public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException,<br />IllegalAccessException, IllegalArgumentException, InvocationTargetException {<br />// 被代理对象<br />IUserDao userDao = new UserDao();<br />InvocationHandlerImpl invocationHandlerImpl = new InvocationHandlerImpl(userDao);<br />ClassLoader loader = userDao.getClass().getClassLoader();<br />Class&lt;?&gt;[] interfaces = userDao.getClass().getInterfaces();<br />// 主要装载器、一组接口及调用处理动态代理实例<br />IUserDao newProxyInstance = (IUserDao) Proxy.newProxyInstance(loader, interfaces, invocationHandlerImpl);<br />newProxyInstance.save();<br />}<br />}<br /><br />Cglib动态代理<br />原理：利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。&nbsp;</p>
<p>使用cglib[Code Generation Library]实现动态代理，并不要求委托类必须实现接口，底层采用asm字节码生成框架生成代理类的字节码</p>
<p>引入依赖：</p>
<p>&lt;dependencies&gt;<br />&lt;dependency&gt;<br />&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br />&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;<br />&lt;version&gt;3.8.1&lt;/version&gt;<br />&lt;/dependency&gt;<br />&lt;dependency&gt;<br />&lt;groupId&gt;cglib&lt;/groupId&gt;<br />&lt;artifactId&gt;cglib&lt;/artifactId&gt;<br />&lt;version&gt;3.1&lt;/version&gt;<br />&lt;/dependency&gt;<br />&lt;/dependencies&gt;<br />创建代理：</p>
<p>public class CglibProxy implements MethodInterceptor {<br /><br />/** 代理对象 */<br />private Object target;<br /><br />public Object getInstance(Object target) {<br />// 固定代码，创建访问对象<br />this.target = target;<br />Enhancer enhancer = new Enhancer();<br />enhancer.setSuperclass(target.getClass());<br />enhancer.setCallback(this);<br />return enhancer.create();<br />}<br /><br />public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {<br />Object invoke = methodProxy.invoke(target, args);<br />return invoke;<br />}<br /><br />public static void main(String[] args) {<br />CglibProxy cglibProxy = new CglibProxy();<br />UserDao userDao = (UserDao) cglibProxy.getInstance(new UserDao());<br />userDao.save();<br />}<br />}<br />Cglib和jdk动态代理的区别<br />java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</p>
<p>而cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p>
<p>Spring中。</p>
<p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p>
<p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p>
<p>3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p>
<p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。</p>
<p>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。</p>
<p>因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/102690118</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=8, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 187(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 20:03:41.189 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:03:41.349 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:03:41.350 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:03:41.402 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:03:41.404 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:03:41.405 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:03:41.450 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:03:41.600 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:03:41.601 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=2, totalCount=11, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31), BlogVo(blogId=1264164196127027200, blogTitle=注解版poi操作工具, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:06, updateTime=2020-05-23 12:00:06), BlogVo(blogId=1264164411613589504, blogTitle=JVM内存调优参数, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:58, updateTime=2020-05-23 12:00:58)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 305(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":12,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:03:41.699 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:04:55.922 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:04:55.923 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.save.debug:159 -==> Parameters: 1264165411250450432(String), 多线程中ThreadLocal的使用(String), null, <p>前言<br />多线程是Java的一个重要特性，多线程从某方面可以等价于多任务，当你有多个任务要处理时，多个任务一起做所消耗的时间肯定比任务串行起来做，所消耗的时间短。而对于多线程不熟悉的新手则容易踩到很多坑，最典型的则是变量问题。</p>
<p>概念介绍<br />下面先用简单粗俗的语言解释一下几个基本概念</p>
<p>线程安全：多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。典型的例子为StringBuffer类。</p>
<p>线程不安全：不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。典型的例子为StringBuilder类。Servlet和SpringMVC采用的是单例设计模式，因此也是线程不安全的。而aop中如果定义了成员变量，也是线程不安全的。</p>
<p>Java内存模型<br />参考我之前的文章Java内存模型介绍</p>
<p>结合Java内存模型的介绍可知，在单例模式下，多个线程操作同一个变量，会发生线程安全性问题简单来说就是一个变量name在线程A中命名为&ldquo;李铁蛋&rdquo;，而线程B将其命名为&ldquo;李蛋&rdquo;，此时线程A输出变量name，极有可能输出的是&ldquo;李蛋&rdquo;。因此，就需要使用ThreadLocal来给每个线程提供局部变量，解决线程安全问题。</p>
<p>示例<br />首先我们来看一下关于线程不安全的情况</p>
<p>public class test003 implements Runnable {<br /><br />private Res res;<br /><br />public test003(Res res) {<br />this.res = res;<br />}<br /><br />public void run() {<br />for (int i = 0; i &lt; 10; i++) {<br />System.out.println(Thread.currentThread().getName() + "," + res.getNumber());<br />try {<br />Thread.sleep(500);<br />} catch (InterruptedException e) {<br />e.printStackTrace();<br />}<br />}<br />}<br /><br />public static void main(String[] args) {<br />Res res = new Res();<br />for (int i = 0; i &lt; 4; i++) {<br />new Thread(new test003(res)).start();<br />}<br />}<br /><br />}<br /><br />class Res {<br />public Integer count = 0;<br /><br />public Integer getNumber() {<br />return ++count;<br />}<br /><br />}<br />程序中的res变量则为主内存中的变量，每个线程都会操作同一个res，获取到的也是同一个count，因此其中一次运行打印出来的结果如下</p>
<p>Thread-0,1<br />Thread-1,2<br />Thread-2,3<br />Thread-3,4<br />Thread-0,5<br />Thread-1,6<br />Thread-2,7<br />Thread-3,8<br />Thread-0,9<br />Thread-1,10<br />Thread-2,11<br />。。。。。<br />程序的本意为打印每个线程从1开始增长，而运行结果中，比如线程0，第一次为1，第二次为5，很明显不符合要求，我们将程序部分代码如下改造：</p>
<p>class Res {<br />public static ThreadLocal&lt;Integer&gt; threadLocal = new ThreadLocal&lt;Integer&gt;() {<br />@Override<br />protected Integer initialValue() {<br />return 0;<br />}<br />};<br /><br />// 这里其实可以使用JDK8的Lambda表达式简化代码<br />// public static ThreadLocal&lt;Integer&gt; threadLocal = ThreadLocal.withInitial(() -&gt; 0);<br /><br />public Integer getNumber() {<br />int count = threadLocal.get() + 1;<br />threadLocal.set(count);<br />return count;<br />}<br /><br />}<br />改造后的代码，使用ThreadLocal创建一个成员变量，泛型为Integer，表示这个成员变量为int类型。在getNumber方法中，执行的则是count++操作。threadLocal.get()方法的作用是获取当前线程threadLocal中的值，+1之后获取本次的count，并set回去。我们看一下输出结果。</p>
<p>Thread-0,1<br />Thread-2,1<br />Thread-3,1<br />Thread-1,1<br />Thread-0,2<br />Thread-2,2<br />Thread-3,2<br />Thread-1,2<br />Thread-1,3<br />Thread-0,3<br />Thread-2,3<br />Thread-3,3<br />。。。。<br />每个线程的结果都是从1开始增长。</p>
<p>总结<br />ThreadLocal的作用是给每个线程提供局部变量，而这个局部变量就是存储到工作内存中的。线程之间的局部变量互不影响，达到线程安全的目的。ThreadLocal的应用相当广泛，如SpringCloud在网关中获取当前的request，就是使用的ThreadLocal</p>
<p>部分代码如下：</p>
<p>public class RequestContext extends ConcurrentHashMap&lt;String, Object&gt; {<br /><br />// ThreadLocal存储RequestContext<br />protected static final ThreadLocal&lt;? extends RequestContext&gt; threadLocal = new ThreadLocal&lt;RequestContext&gt;() {<br />protected RequestContext initialValue() {<br />try {<br />return (RequestContext)RequestContext.contextClass.newInstance();<br />} catch (Throwable var2) {<br />throw new RuntimeException(var2);<br />}<br />}<br />};<br /><br />// 获取Request上下文<br />public static RequestContext getCurrentContext() {<br />if (testContext != null) {<br />return testContext;<br />} else {<br />RequestContext context = (RequestContext)threadLocal.get();<br />return context;<br />}<br />}<br /><br />// 获取当前线程的request<br />public HttpServletRequest getRequest() {<br />return (HttpServletRequest)this.get("request");<br />}<br /><br />}<br />SpringCloud的源码我还没开始看（这玩意源码太多了估计啃不动），现在在啃Mybatis源码，因此下面对此的分析只是推测，还希望大佬们不要打我。</p>
<p>Zuul在请求进入后，首先会获取到request，并将其存储在RequestContext中，使用threadLocal存储，可以保证每个线程获取到的request都是属于自己的。后续在程序的任意处，都可以使用 RequestContext.getCurrentContext().getRequest() 来获取当前请求的request对象。</p>
<p>错误使用<br />在web应用中，经常会有人把ThreadLocal作为每个线程的全局变量使用，这种用法是错误的。SpringBoot底层有线程池，对于每一个请求，都会从线程池中随机取出一个线程，因此即使是同一个登录的用户，每一次请求都有可能不是同一个线程，而从ThreadLocal中获取到的值自然也不一样。关于每次请求都不是同一线程的问题，可以自行打印请求的线程id进行证明，这里就不贴代码了。</p>
<p>ThreadLocal在web应用中的使用场景为，为每次请求提供一个全局的值，在这一次请求中，可以在任何地方取出来这个值进行操作。如：在aop中解析token获取登录中的用户信息，存放到ThreadLocal，本次请求需要用到登录用户的信息，就可以取出来。再如：开发者在aop中记录日志，代码全部写到环绕通知中就显得冗余，因此获取ip、参数等内容会写到前置通知中。而对于要存表的日志，参数在前置通知，返回值在后置通知，报错信息在环绕通知中，可能会想到把变量定义到最上面，这种写法也是错误的。在上面说过，aop是单例模式，因此这种写法存在线程安全性问题，在这里就也可以使用ThreadLocal存储日志信息，最后在后置通知中存表。<br /><br /></p>(String), 8(Integer), null, null
2020-05-23 20:04:56.163 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:04:56.217 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:04:56.218 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/save(String), [Blog(blogId=, blogTitle=多线程中ThreadLocal的使用, blogImage=null, blogContent=<p>前言<br />多线程是Java的一个重要特性，多线程从某方面可以等价于多任务，当你有多个任务要处理时，多个任务一起做所消耗的时间肯定比任务串行起来做，所消耗的时间短。而对于多线程不熟悉的新手则容易踩到很多坑，最典型的则是变量问题。</p>
<p>概念介绍<br />下面先用简单粗俗的语言解释一下几个基本概念</p>
<p>线程安全：多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。典型的例子为StringBuffer类。</p>
<p>线程不安全：不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。典型的例子为StringBuilder类。Servlet和SpringMVC采用的是单例设计模式，因此也是线程不安全的。而aop中如果定义了成员变量，也是线程不安全的。</p>
<p>Java内存模型<br />参考我之前的文章Java内存模型介绍</p>
<p>结合Java内存模型的介绍可知，在单例模式下，多个线程操作同一个变量，会发生线程安全性问题简单来说就是一个变量name在线程A中命名为&ldquo;李铁蛋&rdquo;，而线程B将其命名为&ldquo;李蛋&rdquo;，此时线程A输出变量name，极有可能输出的是&ldquo;李蛋&rdquo;。因此，就需要使用ThreadLocal来给每个线程提供局部变量，解决线程安全问题。</p>
<p>示例<br />首先我们来看一下关于线程不安全的情况</p>
<p>public class test003 implements Runnable {<br /><br />private Res res;<br /><br />public test003(Res res) {<br />this.res = res;<br />}<br /><br />public void run() {<br />for (int i = 0; i &lt; 10; i++) {<br />System.out.println(Thread.currentThread().getName() + "," + res.getNumber());<br />try {<br />Thread.sleep(500);<br />} catch (InterruptedException e) {<br />e.printStackTrace();<br />}<br />}<br />}<br /><br />public static void main(String[] args) {<br />Res res = new Res();<br />for (int i = 0; i &lt; 4; i++) {<br />new Thread(new test003(res)).start();<br />}<br />}<br /><br />}<br /><br />class Res {<br />public Integer count = 0;<br /><br />public Integer getNumber() {<br />return ++count;<br />}<br /><br />}<br />程序中的res变量则为主内存中的变量，每个线程都会操作同一个res，获取到的也是同一个count，因此其中一次运行打印出来的结果如下</p>
<p>Thread-0,1<br />Thread-1,2<br />Thread-2,3<br />Thread-3,4<br />Thread-0,5<br />Thread-1,6<br />Thread-2,7<br />Thread-3,8<br />Thread-0,9<br />Thread-1,10<br />Thread-2,11<br />。。。。。<br />程序的本意为打印每个线程从1开始增长，而运行结果中，比如线程0，第一次为1，第二次为5，很明显不符合要求，我们将程序部分代码如下改造：</p>
<p>class Res {<br />public static ThreadLocal&lt;Integer&gt; threadLocal = new ThreadLocal&lt;Integer&gt;() {<br />@Override<br />protected Integer initialValue() {<br />return 0;<br />}<br />};<br /><br />// 这里其实可以使用JDK8的Lambda表达式简化代码<br />// public static ThreadLocal&lt;Integer&gt; threadLocal = ThreadLocal.withInitial(() -&gt; 0);<br /><br />public Integer getNumber() {<br />int count = threadLocal.get() + 1;<br />threadLocal.set(count);<br />return count;<br />}<br /><br />}<br />改造后的代码，使用ThreadLocal创建一个成员变量，泛型为Integer，表示这个成员变量为int类型。在getNumber方法中，执行的则是count++操作。threadLocal.get()方法的作用是获取当前线程threadLocal中的值，+1之后获取本次的count，并set回去。我们看一下输出结果。</p>
<p>Thread-0,1<br />Thread-2,1<br />Thread-3,1<br />Thread-1,1<br />Thread-0,2<br />Thread-2,2<br />Thread-3,2<br />Thread-1,2<br />Thread-1,3<br />Thread-0,3<br />Thread-2,3<br />Thread-3,3<br />。。。。<br />每个线程的结果都是从1开始增长。</p>
<p>总结<br />ThreadLocal的作用是给每个线程提供局部变量，而这个局部变量就是存储到工作内存中的。线程之间的局部变量互不影响，达到线程安全的目的。ThreadLocal的应用相当广泛，如SpringCloud在网关中获取当前的request，就是使用的ThreadLocal</p>
<p>部分代码如下：</p>
<p>public class RequestContext extends ConcurrentHashMap&lt;String, Object&gt; {<br /><br />// ThreadLocal存储RequestContext<br />protected static final ThreadLocal&lt;? extends RequestContext&gt; threadLocal = new ThreadLocal&lt;RequestContext&gt;() {<br />protected RequestContext initialValue() {<br />try {<br />return (RequestContext)RequestContext.contextClass.newInstance();<br />} catch (Throwable var2) {<br />throw new RuntimeException(var2);<br />}<br />}<br />};<br /><br />// 获取Request上下文<br />public static RequestContext getCurrentContext() {<br />if (testContext != null) {<br />return testContext;<br />} else {<br />RequestContext context = (RequestContext)threadLocal.get();<br />return context;<br />}<br />}<br /><br />// 获取当前线程的request<br />public HttpServletRequest getRequest() {<br />return (HttpServletRequest)this.get("request");<br />}<br /><br />}<br />SpringCloud的源码我还没开始看（这玩意源码太多了估计啃不动），现在在啃Mybatis源码，因此下面对此的分析只是推测，还希望大佬们不要打我。</p>
<p>Zuul在请求进入后，首先会获取到request，并将其存储在RequestContext中，使用threadLocal存储，可以保证每个线程获取到的request都是属于自己的。后续在程序的任意处，都可以使用 RequestContext.getCurrentContext().getRequest() 来获取当前请求的request对象。</p>
<p>错误使用<br />在web应用中，经常会有人把ThreadLocal作为每个线程的全局变量使用，这种用法是错误的。SpringBoot底层有线程池，对于每一个请求，都会从线程池中随机取出一个线程，因此即使是同一个登录的用户，每一次请求都有可能不是同一个线程，而从ThreadLocal中获取到的值自然也不一样。关于每次请求都不是同一线程的问题，可以自行打印请求的线程id进行证明，这里就不贴代码了。</p>
<p>ThreadLocal在web应用中的使用场景为，为每次请求提供一个全局的值，在这一次请求中，可以在任何地方取出来这个值进行操作。如：在aop中解析token获取登录中的用户信息，存放到ThreadLocal，本次请求需要用到登录用户的信息，就可以取出来。再如：开发者在aop中记录日志，代码全部写到环绕通知中就显得冗余，因此获取ip、参数等内容会写到前置通知中。而对于要存表的日志，参数在前置通知，返回值在后置通知，报错信息在环绕通知中，可能会想到把变量定义到最上面，这种写法也是错误的。在上面说过，aop是单例模式，因此这种写法存在线程安全性问题，在这里就也可以使用ThreadLocal存储日志信息，最后在后置通知中存表。<br /><br /></p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=8, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)](String), 1(Integer), null, POST(String), 413(Long), {"code":20000,"msg":"添加成功"}(String), 127.0.0.1(String)
2020-05-23 20:04:56.314 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:04:56.446 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:04:56.447 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:04:56.497 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:04:56.498 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:04:56.499 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:04:56.545 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:04:56.715 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:04:56.716 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=2, totalCount=12, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31), BlogVo(blogId=1264164196127027200, blogTitle=注解版poi操作工具, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:06, updateTime=2020-05-23 12:00:06), BlogVo(blogId=1264164411613589504, blogTitle=JVM内存调优参数, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:58, updateTime=2020-05-23 12:00:58)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 322(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:04:56.813 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:06:28.631 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:06:28.639 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:06:28.699 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:06:28.703 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:06:28.704 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:06:28.754 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:06:28.929 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:06:28.934 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 397(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:06:29.032 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:12:34.088 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:12:34.097 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 6(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:12:34.430 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:12:35.573 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 20:12:35.574 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 20:12:35.616 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:12:35.617 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:12:35.625 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 20:12:35.689 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:12:35.699 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:12:35.700 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:12:35.728 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:12:35.729 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 198(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:12:35.785 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:12:35.868 DEBUG [http-nio-1001-exec-3]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:12:35.979 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:12:35.981 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 460(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:12:36.076 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:14:26.183 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:14:26.187 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 12(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:14:26.661 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:14:27.309 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 20:14:27.310 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 20:14:27.360 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 20:14:27.361 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:14:27.363 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:14:27.415 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:14:27.417 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:14:27.418 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:14:27.419 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:14:27.420 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 111(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:14:27.466 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:14:27.636 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:14:27.914 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:14:27.916 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 599(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:14:28.022 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:15:24.172 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:15:24.180 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 45(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:15:24.278 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:15:24.856 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:15:24.857 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:15:24.913 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:15:24.915 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:15:24.916 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:15:24.967 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:15:25.115 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:15:25.117 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 318(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:15:25.147 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 20:15:25.148 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 20:15:25.194 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 20:15:25.210 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:15:25.250 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:15:25.251 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 138(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:15:25.344 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:15:59.573 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:15:59.575 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 5(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:15:59.765 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:16:00.692 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:16:00.693 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:16:00.784 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:16:01.460 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 20:16:01.460 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 20:16:01.521 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:16:01.523 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:16:01.532 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 20:16:01.645 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:16:01.646 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:16:01.647 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:16:01.666 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:16:01.667 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 198(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:16:01.722 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:16:01.785 DEBUG [http-nio-1001-exec-2]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:16:01.936 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:16:01.938 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 484(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:16:02.044 DEBUG [http-nio-1001-exec-6]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:16:08.572 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:16:08.574 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 10(Integer), 10(Integer)
2020-05-23 20:16:08.619 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 3
2020-05-23 20:16:08.620 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:16:08.620 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:16:08.665 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:16:08.856 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:16:08.858 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=2, pageSize=10, totalPage=2, totalCount=13, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31), BlogVo(blogId=1264164196127027200, blogTitle=注解版poi操作工具, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:06, updateTime=2020-05-23 12:00:06), BlogVo(blogId=1264164411613589504, blogTitle=JVM内存调优参数, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:58, updateTime=2020-05-23 12:00:58)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 446(Long), {"code":20000,"data":{"currentPage":2,"index":10,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164597538697216","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-23 12:01:42","typeName":"docker","updateTime":"2020-05-23 12:01:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264165097050943488","blogRead":0,"blogTitle":"代理设计模式","createdTime":"2020-05-23 12:03:41","typeName":"docker","updateTime":"2020-05-23 12:03:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264165411250450432","blogRead":0,"blogTitle":"多线程中ThreadLocal的使用","createdTime":"2020-05-23 12:04:56","typeName":"docker","updateTime":"2020-05-23 12:04:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:16:08.956 DEBUG [http-nio-1001-exec-5]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:16:15.544 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:16:15.548 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:16:15.657 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:16:15.691 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:16:15.692 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:16:15.737 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:16:15.889 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:16:15.892 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=2, totalCount=13, list=[BlogVo(blogId=1264164597538697216, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:01:42, updateTime=2020-05-23 12:01:42), BlogVo(blogId=1264165097050943488, blogTitle=代理设计模式, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:03:41, updateTime=2020-05-23 12:03:41), BlogVo(blogId=1264165411250450432, blogTitle=多线程中ThreadLocal的使用, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:04:56, updateTime=2020-05-23 12:04:56)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
### The error may involve com.jg.blog.mapper.LogMapper.save-Inline
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
	at com.jg.blog.service.impl.LogServiceImpl.save(LogServiceImpl.java:36)
	at com.jg.blog.service.impl.LogServiceImpl$$FastClassBySpringCGLIB$$d24891de.invoke(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$EnhancerBySpringCGLIB$$28666633.save(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$FastClassBySpringCGLIB$$d24891de.invoke(<generated>)
	at com.jg.blog.service.impl.LogServiceImpl$$EnhancerBySpringCGLIB$$bbd9df25.save(<generated>)
	at com.jg.blog.aspect.RequestAspect.doAfterReturning(RequestAspect.java:85)
	at com.jg.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8aee03a7.save(<generated>)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'log_params' at row 1
(String), POST(String), 403(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:16:16.003 DEBUG [http-nio-1001-exec-7]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:16:21.827 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:16:21.827 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 10(Integer), 10(Integer)
2020-05-23 20:16:21.884 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 3
2020-05-23 20:16:21.886 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:16:21.886 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:16:21.931 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:16:22.070 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:16:22.073 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=2, pageSize=10, totalPage=2, totalCount=13, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31), BlogVo(blogId=1264164196127027200, blogTitle=注解版poi操作工具, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:06, updateTime=2020-05-23 12:00:06), BlogVo(blogId=1264164411613589504, blogTitle=JVM内存调优参数, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:58, updateTime=2020-05-23 12:00:58)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 560(Long), {"code":20000,"data":{"currentPage":2,"index":10,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164597538697216","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-23 12:01:42","typeName":"docker","updateTime":"2020-05-23 12:01:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264165097050943488","blogRead":0,"blogTitle":"代理设计模式","createdTime":"2020-05-23 12:03:41","typeName":"docker","updateTime":"2020-05-23 12:03:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264165411250450432","blogRead":0,"blogTitle":"多线程中ThreadLocal的使用","createdTime":"2020-05-23 12:04:56","typeName":"docker","updateTime":"2020-05-23 12:04:56"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:16:22.180 DEBUG [http-nio-1001-exec-10]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:18:01.194 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:18:01.198 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /admin/info(String), [](String), 1(Integer), null, GET(String), 7(Long), {"code":20000,"data":{"name":"稽哥","password":"","signature":"1213343","username":"admin"},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:18:01.297 DEBUG [http-nio-1001-exec-4]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:18:02.435 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==>  Preparing: select type_id, type_name, type_blog_count from bl_type where deleted = 0 and enable = 1 
2020-05-23 20:18:02.436 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -==> Parameters: 
2020-05-23 20:18:02.485 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.TypeMapper.getTypeList.debug:159 -<==      Total: 4
2020-05-23 20:18:02.501 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:18:02.504 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-05-23 20:18:02.583 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:18:02.586 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 524(Long), {"code":20000,"data":[{"typeBlogCount":0,"typeId":7,"typeName":"lINUX"},{"typeBlogCount":0,"typeId":8,"typeName":"docker"},{"typeBlogCount":0,"typeId":10,"typeName":"python"},{"typeBlogCount":0,"typeId":11,"typeName":"redis"}],"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:18:02.719 DEBUG [http-nio-1001-exec-9]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:18:02.745 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 10
2020-05-23 20:18:02.747 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:18:02.748 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:18:02.795 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:18:02.949 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:18:02.951 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 917(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":2},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:18:03.049 DEBUG [http-nio-1001-exec-1]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
2020-05-23 20:18:19.645 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image,blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-05-23 20:18:19.647 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 20(Integer)
2020-05-23 20:18:19.698 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getByPage.debug:159 -<==      Total: 13
2020-05-23 20:18:19.699 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-05-23 20:18:19.700 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-05-23 20:18:19.749 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.BlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-05-23 20:18:19.898 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-05-23 20:18:19.900 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=20, totalPage=1, totalCount=13, list=[BlogVo(blogId=1264158016633778176, blogTitle=程序员到底要不要重复造轮子？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:35:33, updateTime=2020-05-23 11:35:33), BlogVo(blogId=1264158572613939200, blogTitle=Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=python, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:37:45, updateTime=2020-05-23 11:37:45), BlogVo(blogId=1264161428926574592, blogTitle=varchar字段长度最好是2的n次方-1, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:49:06, updateTime=2020-05-23 11:49:06), BlogVo(blogId=1264161956096061440, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:51:12, updateTime=2020-05-23 11:51:12), BlogVo(blogId=1264162449455263744, blogTitle=Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:53:10, updateTime=2020-05-23 11:53:10), BlogVo(blogId=1264162763432472576, blogTitle=String s = new String("123")究竟创建了几个对象, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:54:25, updateTime=2020-05-23 11:54:25), BlogVo(blogId=1264162982769405952, blogTitle=count(1)，count(*)，count(主键) 性能对比及辟谣, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=lINUX, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:55:17, updateTime=2020-05-23 11:55:17), BlogVo(blogId=1264163293454086144, blogTitle=Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 11:56:31, updateTime=2020-05-23 11:56:31), BlogVo(blogId=1264164196127027200, blogTitle=注解版poi操作工具, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:06, updateTime=2020-05-23 12:00:06), BlogVo(blogId=1264164411613589504, blogTitle=JVM内存调优参数, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=docker, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-23 12:00:58, updateTime=2020-05-23 12:00:58)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 321(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158016633778176","blogRead":0,"blogTitle":"程序员到底要不要重复造轮子？","createdTime":"2020-05-23 11:35:33","typeName":"python","updateTime":"2020-05-23 11:35:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264158572613939200","blogRead":0,"blogTitle":"Mybatis源码阅读（三）：结果集映射3.1 —— ResultSetBuilder与简单映射","createdTime":"2020-05-23 11:37:45","typeName":"python","updateTime":"2020-05-23 11:37:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161428926574592","blogRead":0,"blogTitle":"varchar字段长度最好是2的n次方-1","createdTime":"2020-05-23 11:49:06","typeName":"lINUX","updateTime":"2020-05-23 11:49:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264161956096061440","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:51:12","typeName":"lINUX","updateTime":"2020-05-23 11:51:12"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162449455263744","blogRead":0,"blogTitle":"Mybatis源码阅读（二）：动态节点解析2.2 —— SqlSourceBuilder与三种SqlSource","createdTime":"2020-05-23 11:53:10","typeName":"lINUX","updateTime":"2020-05-23 11:53:10"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162763432472576","blogRead":0,"blogTitle":"String s = new String(\"123\")究竟创建了几个对象","createdTime":"2020-05-23 11:54:25","typeName":"lINUX","updateTime":"2020-05-23 11:54:25"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264162982769405952","blogRead":0,"blogTitle":"count(1)，count(*)，count(主键) 性能对比及辟谣","createdTime":"2020-05-23 11:55:17","typeName":"lINUX","updateTime":"2020-05-23 11:55:17"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264163293454086144","blogRead":0,"blogTitle":"Mybatis源码阅读（一）：Mybatis初始化1.3 —— 解析sql片段和sql节点","createdTime":"2020-05-23 11:56:31","typeName":"docker","updateTime":"2020-05-23 11:56:31"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164196127027200","blogRead":0,"blogTitle":"注解版poi操作工具","createdTime":"2020-05-23 12:00:06","typeName":"docker","updateTime":"2020-05-23 12:00:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164411613589504","blogRead":0,"blogTitle":"JVM内存调优参数","createdTime":"2020-05-23 12:00:58","typeName":"docker","updateTime":"2020-05-23 12:00:58"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264164597538697216","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-23 12:01:42","typeName":"docker","updateTime":"2020-05-23 12:01:42"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264165097050943488","blogRead":0,"blogTitle":"代理设计模式","createdTime":"2020-05-23 12:03:41","typeName":"docker","updateTime":"2020-05-23 12:03:41"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264165411250450432","blogRead":0,"blogTitle":"多线程中ThreadLocal的使用","createdTime":"2020-05-23 12:04:56","typeName":"docker","updateTime":"2020-05-23 12:04:56"}],"pageSize":20,"params":{},"sortMethod":"asc","totalCount":13,"totalPage":1},"msg":"操作成功！"}(String), 127.0.0.1(String)
2020-05-23 20:18:20.052 DEBUG [http-nio-1001-exec-8]com.jg.blog.mapper.LogMapper.save.debug:159 -<==    Updates: 1
