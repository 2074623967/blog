2020-06-13 15:49:16.556 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 17532 (started by adminstrator in E:\Idea代码\blog)
2020-06-13 15:49:16.571 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-13 15:49:22.205 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-13 15:49:22.634 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 383ms. Found 4 MongoDB repository interfaces.
2020-06-13 15:49:23.810 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:24.210 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$393c310] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:24.338 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:24.354 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e9e7018c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:24.359 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$d0bea5ce] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:24.365 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-13 15:49:24.570 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:24.597 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:24.632 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:29.290 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-13 15:49:29.293 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:29.491 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.611 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.660 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.696 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.708 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy88] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.712 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.720 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.723 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy90] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.789 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2f1d0bbc' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.793 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2f1d0bbc' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.864 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#77774571' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.886 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#70887727' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.892 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#70887727' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.940 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.942 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.945 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:30.948 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:31.273 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-06-13 15:49:31.274 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-06-13 15:49:31.342 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:31.374 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:31.389 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:31.537 INFO  [cluster-ClusterId{value='5ee4850b2ef4b473c3a906b4', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:300}] to 39.97.183.122:27017
2020-06-13 15:49:31.587 INFO  [cluster-ClusterId{value='5ee4850b2ef4b473c3a906b4', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=38839927}
2020-06-13 15:49:31.619 INFO  [cluster-ClusterId{value='5ee4850b2ef4b473c3a906b4', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-06-13 15:49:32.564 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:32.776 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:33.039 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:33.562 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.501 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.528 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy104] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.573 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2a7d9b41' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.574 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#2a7d9b41' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.575 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#6bbab114' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.577 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5d1b1c2a' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.578 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5d1b1c2a' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.593 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.594 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy105] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.621 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.624 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.832 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:34.910 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 15:49:35.859 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-06-13 15:49:35.913 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-13 15:49:35.915 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-13 15:49:35.916 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-06-13 15:49:36.360 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-13 15:49:36.361 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 19447 ms
2020-06-13 15:49:38.936 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-13 15:49:38.982 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-13 15:49:38.984 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 26.433 seconds (JVM running for 31.949)
2020-06-13 15:54:32.003 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-13 15:54:32.004 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-13 15:54:32.035 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 31 ms
2020-06-13 15:54:32.552 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-06-13 15:54:32.553 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:54:32.555 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:32.559 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-06-13 15:54:32.560 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-06-13 15:54:33.118 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 566
2020-06-13 15:54:33.483 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"37F2DFF8C28A007742A696A82D048894"},"msg":"操作成功！"}
2020-06-13 15:54:33.944 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-06-13 15:54:33.945 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:54:33.946 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:33.947 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-06-13 15:54:33.948 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:54:33.950 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-06-13 15:54:33.963 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-06-13 15:54:34.730 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-13 15:54:34.731 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:54:34.732 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:34.733 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-13 15:54:34.734 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:54:34.811 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 81
2020-06-13 15:54:34.818 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-13 15:54:51.891 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-13 15:54:51.895 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:54:51.896 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:51.898 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-13 15:54:51.899 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-13 15:54:51.899 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:54:51.899 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:54:51.900 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:51.900 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-13 15:54:51.902 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:54:51.978 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 80
2020-06-13 15:54:51.979 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-13 15:54:51.980 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-13 15:54:51.982 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:54:51.982 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:51.982 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-13 15:54:51.983 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-13 15:54:52.045 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 154
2020-06-13 15:54:52.057 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-13 15:54:52.058 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:54:52.059 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:52.059 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-13 15:54:52.060 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:54:52.073 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":29,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-06-13 15:54:52.109 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-13 15:54:52.109 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:54:52.111 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:54:52.111 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-13 15:54:52.111 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:54:52.182 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 73
2020-06-13 15:54:52.183 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-06-13 15:54:52.347 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 367
2020-06-13 15:54:52.357 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-10 11:31:50"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-10 03:13:53"},{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":29,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-10 06:48:39"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux","updateTime":"2020-06-10 03:13:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":2,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-04-24 01:12:57","typeName":"java","updateTime":"2020-06-09 13:21:36"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java","updateTime":"2020-06-10 03:12:22"},{"blogCollection":0,"blogComment":1,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:27","typeName":"linux","updateTime":"2020-06-10 03:10:30"},{"blogCollection":0,"blogComment":1,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-02-24 00:49:00","typeName":"java","updateTime":"2020-06-10 03:10:48"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-13 15:54:52.392 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 335
2020-06-13 15:54:52.400 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7iMOaACqYhAAAOurxSY9A577.jpg","id":1,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\n[00:01.62]作词：Ming.明\n[00:02.33]作曲：Pig小优\n[00:03.08]编曲：Pig小优\n[00:03.84]后期：Pig小优\n[00:04.54]美工：张小喵\n[00:09.15]踏红船繁华似人间\n[00:12.03]灯火熙攘祈愿\n[00:14.00]手中红线姻缘何时现\n[00:17.57]薄雾小雨润如烟\n[00:19.94]灯中画舫烟中浅\n[00:24.93]这尘缘如惊鸿一面\n[00:27.85]谁家翩翩少年\n[00:29.85]桥边白衣如纤印心间\n[00:33.34]这世间情话誓言\n[00:35.81]不抵这柔情一眼\n[00:40.79]步儿缓红绳缠\n[00:42.70]石桥边灯火染\n[00:44.72]杯中仙促长谈\n[00:46.79]舷外雨声人言难断\n[00:49.71]已成烟已消散\n[00:51.62]化作春意满\n[00:55.75]晚来风寒心却暖\n[00:57.57]三两杯酒后情又添\n[01:00.08]暮鼓丝弦声声慢\n[01:02.36]有佳人舞芊芊\n[01:04.32]研磨提笔在画卷眉目间流转\n[01:08.49]细雨婵娟\n[01:12.25]醉卧画舫听雨眠一场梦无言\n[01:15.93]窗外依旧喧怎转眼桥上人不见\n[01:20.46]回眸深处看细雨茫茫如烟\n[01:24.10]苦了思念\n[01:44.22]步儿缓红绳缠\n[01:46.18]石桥边灯火染\n[01:48.20]杯中仙促长谈\n[01:50.21]舷外雨声人言难断\n[01:53.18]已成烟已消散\n[01:55.15]化作春意满\n[01:59.25]晚来风寒心却暖\n[02:01.16]三两杯酒后情又添\n[02:03.53]暮鼓丝弦声声慢\n[02:05.74]有佳人舞芊芊\n[02:07.80]研磨提笔在画卷眉目间流转\n[02:12.03]细雨婵娟\n[02:15.69]醉卧画舫听雨眠一场梦无言\n[02:19.42]窗外依旧喧怎转眼桥上人不见\n[02:23.95]回眸深处看细雨茫茫如烟\n[02:27.58]苦了思念\n[02:43.49]青山乌蓬伴流年繁华多阑珊\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\n[02:51.46]满纸柔情过指尖笔墨笑意染\n[02:55.64]长袖翩翩\n[02:59.52]醉卧画舫听雨眠一场梦无言\n[03:03.10]窗外依旧喧怎转眼桥上人不见\n[03:07.48]回眸深处看水中喜字红残\n[03:11.31]倒了人间\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7iMRKAckVMAInbwpYfM3A430.mp3"},{"artist":"匿名","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVAeADSvsAAAQjTIrrnM214.jpg","id":2,"lrc":"[00:01.87]Take Me Away -逃跑计划\n[00:18.66]编辑:水妈 QQ:331451919\n[00:23.99]I use to be myself\n[00:27.59]And use to play around\n[00:31.47]Sometime I don't want to think\n[00:34.33]Maybe cause I'm afraid\n[00:38.51]I do wanna sing my song\n[00:42.36]No matter what you say\n[00:46.12]With you I never think\n[00:48.95]along~\n[00:49.69]I lood into my soul\n[00:52.63]One day I hope somepoeple take to me\n[00:57.68]About life\n[01:00.85]But I can't take no more\n[01:04.71]Where where where where my Shangri-la\n[01:08.32]I do wanna sing my song\n[01:11.86]No matter what you say\n[01:15.64]With you I never think\n[01:18.48]I lood into my soul\n[01:22.10]One day I hope somepoeple take to me\n[01:26.89]About life\n[01:30.35]But I can't take no more\n[01:34.32]Where...where...where...where my Shangri-la\n[01:38.28]Many many time I want to go\n[01:41.64]So I hardly open my eyes\n[01:45.66]The truth even force me run...run...run...run away...run away\n[01:53.21]But now I'm same to you\n[01:56.47]But I feel nothing better for sure\n[02:00.16]The star...star...star would you take me away\n[02:24.36]Many many time I want to go\n[02:27.61]So I hardly open my eyes\n[02:31.71]The truth even force me run...run...run...run away...run away\n[02:39.14]But now I'm same to you\n[02:42.47]But I feel nothing better for sure\n[02:46.48]The star...star...star would you take me away\n[02:53.98]Many many time I want to go\n[02:57.33]So I hardly open my eyes\n[03:01.30]The truth even force me run...run...run...run away...run away\n[03:08.99]Now I'm same as you\n[03:11.90]But I feel nothing better for sure\n[03:15.93]The star...star...star would you take me away\n[03:22.09]The best for right now\n[03:24.10]-end-","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVFKARG1KAJ5SAlaB8pA938.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVLeAdth3AACJ_hvYA4w070.jpg","id":3,"lrc":"[00:01.997]作词 : 薛之谦\n[00:03.929]作曲 : 薛之谦\n[00:06.012]\n[00:17.154]听专情的古人 把美言留给最爱的人\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\n[00:33.070]你没读懂课本 可世人硬要捧\n[00:41.350]看感情里的人 用肉眼分出三六九等\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\n[01:11.813]\n[01:12.202]所以 当我们都变成木偶人\n[01:17.471]你何苦再做一个痴情人表忠贞\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\n[01:29.805]\n[01:30.107]让我们都变成木偶人\n[01:33.678]再缝几针爱几次后就不会疼\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\n[01:46.963]\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\n[01:58.724]现在相爱的人 能耍的方式五花八门\n[02:07.230]要一式要两份 把热吻当罪证\n[02:15.298]让动了情的人 还要去分辨好人坏人\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\n[02:46.341]\n[02:46.606]所以 当我们都变成木偶人\n[02:51.507]你何苦再做一个痴情人表忠贞\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\n[03:03.407]\n[03:03.825]让我们都变成木偶人\n[03:07.373]再缝几针爱几次后就不会疼\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\n[03:21.158]\n[03:36.779]没有人能变成木偶人\n[03:39.795]无非是在感情里的逃避过程\n[03:43.999]我们盛气凌人 掩饰无权过问\n[03:48.773]遇见谁要拆几针\n[03:52.354]\n[03:52.631]当我们都羡慕木偶人\n[03:55.899]学会他在场面上的玩弄过程\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\n[04:23.520]\n[04:24.454]制作人 : 陈迪@TalentUnion\n[04:25.387]编曲 : 陈迪\n[04:26.274]吉他 : 劳国贤\n[04:27.357]贝斯 : 崔文正\n[04:28.378]鼓 : 王鹏\n[04:29.346]弦乐团 : 中国爱乐乐团\n[04:30.319]人声监制 : 杨祎\n[04:31.323]缩混 : 杨祎@RaySound Studio\n[04:32.382]母带 : 鲍锐@录顶技","name":"木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVFKARG1KAJ5SAlaB8pA938.mp3"}],"msg":"操作成功！"}
2020-06-13 15:55:23.065 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-06-13 15:55:23.066 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:23.067 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:23.067 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-06-13 15:55:23.071 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:24.428 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-06-13 15:55:24.429 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:24.430 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:24.431 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-06-13 15:55:24.431 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:25.433 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getList
2020-06-13 15:55:25.433 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:25.437 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:25.439 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getList
2020-06-13 15:55:25.440 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:26.355 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-06-13 15:55:26.357 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:26.357 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:26.358 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-06-13 15:55:26.358 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:27.455 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-06-13 15:55:27.456 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:27.457 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:27.457 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-06-13 15:55:27.458 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:28.072 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-13 15:55:28.073 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:28.073 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:28.074 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-13 15:55:28.074 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:28.151 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 79
2020-06-13 15:55:28.153 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-13 15:55:29.207 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getTimeLine
2020-06-13 15:55:29.208 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:29.209 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:29.211 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getTimeLine
2020-06-13 15:55:29.212 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:29.320 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 113
2020-06-13 15:55:29.326 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1264726600279891968","blogMonth":"2020-05","blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56"},{"blogId":"1264526633971961856","blogMonth":"2020-05","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19"},{"blogId":"1264365258452664320","blogMonth":"2020-05","blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04"},{"blogId":"1264358511910559744","blogMonth":"2020-05","blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15"}],"month":"2020-05"},{"list":[{"blogId":"1264365631460507648","blogMonth":"2020-04","blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33"},{"blogId":"1264363719424188416","blogMonth":"2020-04","blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-04-24 01:12:57"}],"month":"2020-04"},{"list":[{"blogId":"1264358089300877312","blogMonth":"2020-02","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35"},{"blogId":"1264358056178458624","blogMonth":"2020-02","blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:27"},{"blogId":"1264357690636476416","blogMonth":"2020-02","blogTitle":"垃圾回收算法","createdTime":"2020-02-24 00:49:00"}],"month":"2020-02"}],"msg":"操作成功！"}
2020-06-13 15:55:29.839 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-13 15:55:29.839 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:29.839 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:29.840 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-13 15:55:29.841 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-13 15:55:30.063 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 225
2020-06-13 15:55:30.064 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-10 11:31:50"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-10 03:13:53"},{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":29,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-10 06:48:39"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux","updateTime":"2020-06-10 03:13:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":2,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-04-24 01:12:57","typeName":"java","updateTime":"2020-06-09 13:21:36"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java","updateTime":"2020-06-10 03:12:22"},{"blogCollection":0,"blogComment":1,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:27","typeName":"linux","updateTime":"2020-06-10 03:10:30"},{"blogCollection":0,"blogComment":1,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-02-24 00:49:00","typeName":"java","updateTime":"2020-06-10 03:10:48"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-13 15:55:31.445 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-06-13 15:55:31.446 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:31.447 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:31.447 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-06-13 15:55:31.448 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:33.003 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getList
2020-06-13 15:55:33.004 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:33.004 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:33.005 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getList
2020-06-13 15:55:33.005 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:35.025 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-06-13 15:55:35.026 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:35.028 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:35.029 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-06-13 15:55:35.031 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:35.422 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-06-13 15:55:35.422 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:35.423 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:35.423 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-06-13 15:55:35.424 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:50.824 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-06-13 15:55:50.825 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:50.826 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:50.827 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-06-13 15:55:50.827 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=tangtu22, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-06-13 15:55:50.898 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 74
2020-06-13 15:55:50.907 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","password":"","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22"},"token":"37F2DFF8C28A007742A696A82D048894"},"msg":"操作成功！"}
2020-06-13 15:55:51.709 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-13 15:55:51.710 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:51.711 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:51.711 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-13 15:55:51.712 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-13 15:55:51.873 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-13 15:55:51.874 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:51.874 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:51.875 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-13 15:55:51.876 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:51.892 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-13 15:55:51.892 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-13 15:55:51.893 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:51.894 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:51.894 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-13 15:55:51.893 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:51.895 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:51.896 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:51.897 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-13 15:55:51.900 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:51.919 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 210
2020-06-13 15:55:51.920 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-10 11:31:50"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-10 03:13:53"},{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":29,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-10 06:48:39"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux","updateTime":"2020-06-10 03:13:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":2,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-04-24 01:12:57","typeName":"java","updateTime":"2020-06-09 13:21:36"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java","updateTime":"2020-06-10 03:12:22"},{"blogCollection":0,"blogComment":1,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:27","typeName":"linux","updateTime":"2020-06-10 03:10:30"},{"blogCollection":0,"blogComment":1,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-02-24 00:49:00","typeName":"java","updateTime":"2020-06-10 03:10:48"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-13 15:55:51.921 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-13 15:55:51.922 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:51.922 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:51.923 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-13 15:55:51.923 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:51.948 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 75
2020-06-13 15:55:51.950 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":29,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-06-13 15:55:51.968 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 76
2020-06-13 15:55:51.975 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7iMOaACqYhAAAOurxSY9A577.jpg","id":1,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\n[00:01.62]作词：Ming.明\n[00:02.33]作曲：Pig小优\n[00:03.08]编曲：Pig小优\n[00:03.84]后期：Pig小优\n[00:04.54]美工：张小喵\n[00:09.15]踏红船繁华似人间\n[00:12.03]灯火熙攘祈愿\n[00:14.00]手中红线姻缘何时现\n[00:17.57]薄雾小雨润如烟\n[00:19.94]灯中画舫烟中浅\n[00:24.93]这尘缘如惊鸿一面\n[00:27.85]谁家翩翩少年\n[00:29.85]桥边白衣如纤印心间\n[00:33.34]这世间情话誓言\n[00:35.81]不抵这柔情一眼\n[00:40.79]步儿缓红绳缠\n[00:42.70]石桥边灯火染\n[00:44.72]杯中仙促长谈\n[00:46.79]舷外雨声人言难断\n[00:49.71]已成烟已消散\n[00:51.62]化作春意满\n[00:55.75]晚来风寒心却暖\n[00:57.57]三两杯酒后情又添\n[01:00.08]暮鼓丝弦声声慢\n[01:02.36]有佳人舞芊芊\n[01:04.32]研磨提笔在画卷眉目间流转\n[01:08.49]细雨婵娟\n[01:12.25]醉卧画舫听雨眠一场梦无言\n[01:15.93]窗外依旧喧怎转眼桥上人不见\n[01:20.46]回眸深处看细雨茫茫如烟\n[01:24.10]苦了思念\n[01:44.22]步儿缓红绳缠\n[01:46.18]石桥边灯火染\n[01:48.20]杯中仙促长谈\n[01:50.21]舷外雨声人言难断\n[01:53.18]已成烟已消散\n[01:55.15]化作春意满\n[01:59.25]晚来风寒心却暖\n[02:01.16]三两杯酒后情又添\n[02:03.53]暮鼓丝弦声声慢\n[02:05.74]有佳人舞芊芊\n[02:07.80]研磨提笔在画卷眉目间流转\n[02:12.03]细雨婵娟\n[02:15.69]醉卧画舫听雨眠一场梦无言\n[02:19.42]窗外依旧喧怎转眼桥上人不见\n[02:23.95]回眸深处看细雨茫茫如烟\n[02:27.58]苦了思念\n[02:43.49]青山乌蓬伴流年繁华多阑珊\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\n[02:51.46]满纸柔情过指尖笔墨笑意染\n[02:55.64]长袖翩翩\n[02:59.52]醉卧画舫听雨眠一场梦无言\n[03:03.10]窗外依旧喧怎转眼桥上人不见\n[03:07.48]回眸深处看水中喜字红残\n[03:11.31]倒了人间\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7iMRKAckVMAInbwpYfM3A430.mp3"},{"artist":"匿名","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVAeADSvsAAAQjTIrrnM214.jpg","id":2,"lrc":"[00:01.87]Take Me Away -逃跑计划\n[00:18.66]编辑:水妈 QQ:331451919\n[00:23.99]I use to be myself\n[00:27.59]And use to play around\n[00:31.47]Sometime I don't want to think\n[00:34.33]Maybe cause I'm afraid\n[00:38.51]I do wanna sing my song\n[00:42.36]No matter what you say\n[00:46.12]With you I never think\n[00:48.95]along~\n[00:49.69]I lood into my soul\n[00:52.63]One day I hope somepoeple take to me\n[00:57.68]About life\n[01:00.85]But I can't take no more\n[01:04.71]Where where where where my Shangri-la\n[01:08.32]I do wanna sing my song\n[01:11.86]No matter what you say\n[01:15.64]With you I never think\n[01:18.48]I lood into my soul\n[01:22.10]One day I hope somepoeple take to me\n[01:26.89]About life\n[01:30.35]But I can't take no more\n[01:34.32]Where...where...where...where my Shangri-la\n[01:38.28]Many many time I want to go\n[01:41.64]So I hardly open my eyes\n[01:45.66]The truth even force me run...run...run...run away...run away\n[01:53.21]But now I'm same to you\n[01:56.47]But I feel nothing better for sure\n[02:00.16]The star...star...star would you take me away\n[02:24.36]Many many time I want to go\n[02:27.61]So I hardly open my eyes\n[02:31.71]The truth even force me run...run...run...run away...run away\n[02:39.14]But now I'm same to you\n[02:42.47]But I feel nothing better for sure\n[02:46.48]The star...star...star would you take me away\n[02:53.98]Many many time I want to go\n[02:57.33]So I hardly open my eyes\n[03:01.30]The truth even force me run...run...run...run away...run away\n[03:08.99]Now I'm same as you\n[03:11.90]But I feel nothing better for sure\n[03:15.93]The star...star...star would you take me away\n[03:22.09]The best for right now\n[03:24.10]-end-","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVFKARG1KAJ5SAlaB8pA938.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVLeAdth3AACJ_hvYA4w070.jpg","id":3,"lrc":"[00:01.997]作词 : 薛之谦\n[00:03.929]作曲 : 薛之谦\n[00:06.012]\n[00:17.154]听专情的古人 把美言留给最爱的人\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\n[00:33.070]你没读懂课本 可世人硬要捧\n[00:41.350]看感情里的人 用肉眼分出三六九等\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\n[01:11.813]\n[01:12.202]所以 当我们都变成木偶人\n[01:17.471]你何苦再做一个痴情人表忠贞\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\n[01:29.805]\n[01:30.107]让我们都变成木偶人\n[01:33.678]再缝几针爱几次后就不会疼\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\n[01:46.963]\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\n[01:58.724]现在相爱的人 能耍的方式五花八门\n[02:07.230]要一式要两份 把热吻当罪证\n[02:15.298]让动了情的人 还要去分辨好人坏人\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\n[02:46.341]\n[02:46.606]所以 当我们都变成木偶人\n[02:51.507]你何苦再做一个痴情人表忠贞\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\n[03:03.407]\n[03:03.825]让我们都变成木偶人\n[03:07.373]再缝几针爱几次后就不会疼\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\n[03:21.158]\n[03:36.779]没有人能变成木偶人\n[03:39.795]无非是在感情里的逃避过程\n[03:43.999]我们盛气凌人 掩饰无权过问\n[03:48.773]遇见谁要拆几针\n[03:52.354]\n[03:52.631]当我们都羡慕木偶人\n[03:55.899]学会他在场面上的玩弄过程\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\n[04:23.520]\n[04:24.454]制作人 : 陈迪@TalentUnion\n[04:25.387]编曲 : 陈迪\n[04:26.274]吉他 : 劳国贤\n[04:27.357]贝斯 : 崔文正\n[04:28.378]鼓 : 王鹏\n[04:29.346]弦乐团 : 中国爱乐乐团\n[04:30.319]人声监制 : 杨祎\n[04:31.323]缩混 : 杨祎@RaySound Studio\n[04:32.382]母带 : 鲍锐@录顶技","name":"木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVFKARG1KAJ5SAlaB8pA938.mp3"}],"msg":"操作成功！"}
2020-06-13 15:55:51.972 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 80
2020-06-13 15:55:51.976 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-13 15:55:52.006 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 85
2020-06-13 15:55:52.007 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-06-13 15:55:53.968 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-06-13 15:55:53.969 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:53.969 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:53.970 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-06-13 15:55:53.971 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:54.316 INFO  [http-nio-1001-exec-4]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:301}] to 39.97.183.122:27017
2020-06-13 15:55:54.505 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 537
2020-06-13 15:55:54.506 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":0,"commentCount":0},"msg":"操作成功！"}
2020-06-13 15:55:55.291 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-06-13 15:55:55.292 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:55.292 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:55.293 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-06-13 15:55:55.293 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:55.573 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 282
2020-06-13 15:55:55.574 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-06-13 15:55:56.853 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getList
2020-06-13 15:55:56.854 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:56.854 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:56.855 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getList
2020-06-13 15:55:56.855 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:56.898 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 45
2020-06-13 15:55:56.899 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-06-13 15:55:57.738 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/commentAndCollectionCount
2020-06-13 15:55:57.739 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 15:55:57.739 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:57.739 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.commentAndCollectionCount
2020-06-13 15:55:57.739 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 15:55:57.804 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 66
2020-06-13 15:55:57.805 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"collectionCount":0,"commentCount":0},"msg":"操作成功！"}
2020-06-13 15:55:58.818 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollectionList
2020-06-13 15:55:58.819 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:58.819 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:58.819 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollectionList
2020-06-13 15:55:58.820 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 15:55:58.852 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 34
2020-06-13 15:55:58.852 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-06-13 15:55:59.953 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-13 15:55:59.954 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 15:55:59.955 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 15:55:59.955 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-13 15:55:59.956 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-13 15:56:00.138 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 185
2020-06-13 15:56:00.138 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-10 11:31:50"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-10 03:13:53"},{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":29,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-10 06:48:39"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux","updateTime":"2020-06-10 03:13:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":2,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-04-24 01:12:57","typeName":"java","updateTime":"2020-06-09 13:21:36"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java","updateTime":"2020-06-10 03:12:22"},{"blogCollection":0,"blogComment":1,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:27","typeName":"linux","updateTime":"2020-06-10 03:10:30"},{"blogCollection":0,"blogComment":1,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-02-24 00:49:00","typeName":"java","updateTime":"2020-06-10 03:10:48"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-13 19:01:07.898 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-06-13 19:01:08.180 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:01:08.202 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:01:08.204 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-06-13 19:01:08.228 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-06-13 19:01:09.438 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1541
2020-06-13 19:01:09.440 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"406D952B9E3A2DBA872F445E6E24712F"},"msg":"操作成功！"}
2020-06-13 19:01:10.066 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-06-13 19:01:10.067 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:01:10.067 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:01:10.068 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-06-13 19:01:10.068 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:01:10.068 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2
2020-06-13 19:01:10.068 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-06-13 19:01:10.372 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-13 19:01:10.374 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:01:10.375 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:01:10.376 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-13 19:01:10.376 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:01:10.546 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 174
2020-06-13 19:01:10.548 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-13 19:02:25.826 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 15600 (started by adminstrator in E:\Idea代码\blog)
2020-06-13 19:02:25.842 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-06-13 19:02:28.200 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-06-13 19:02:28.467 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 256ms. Found 4 MongoDB repository interfaces.
2020-06-13 19:02:29.156 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:29.312 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$8273a0d6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:29.377 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:29.406 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$68c6df52] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:29.425 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$4f9e8394] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:29.467 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-06-13 19:02:29.711 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:29.770 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:29.845 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.060 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-06-13 19:02:34.061 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.190 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.596 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.606 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.620 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.624 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.627 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.635 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.637 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.665 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#26cb5207' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.683 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#26cb5207' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.725 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#3dffc764' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.732 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#1cd3b138' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.737 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#1cd3b138' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.769 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.771 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.773 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.777 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.886 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-06-13 19:02:34.888 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-06-13 19:02:34.967 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:34.986 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:35.003 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:35.080 INFO  [cluster-ClusterId{value='5ee4b24aa6aeaa78176883dc', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:304}] to 39.97.183.122:27017
2020-06-13 19:02:35.120 INFO  [cluster-ClusterId{value='5ee4b24aa6aeaa78176883dc', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=35896350}
2020-06-13 19:02:35.122 INFO  [cluster-ClusterId{value='5ee4b24aa6aeaa78176883dc', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-06-13 19:02:35.192 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:35.239 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:35.321 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:35.415 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:35.922 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.018 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.139 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#234c5e41' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.140 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#234c5e41' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.142 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#38291795' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.144 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#36790bec' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.145 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#36790bec' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.165 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.166 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.237 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.244 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.368 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.421 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 19:02:36.903 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-06-13 19:02:36.913 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-06-13 19:02:36.914 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-06-13 19:02:36.914 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-06-13 19:02:37.103 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-06-13 19:02:37.103 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 10929 ms
2020-06-13 19:02:39.028 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-06-13 19:02:39.059 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-06-13 19:02:39.061 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 15.019 seconds (JVM running for 17.481)
2020-06-13 19:02:42.112 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-13 19:02:42.114 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-06-13 19:02:42.135 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 20 ms
2020-06-13 19:02:42.264 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-06-13 19:02:42.265 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:02:42.266 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:02:42.268 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-06-13 19:02:42.269 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-06-13 19:02:42.495 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 233
2020-06-13 19:02:42.618 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"4FF393D4CF0F21D7D59280A1F0C8F782"},"msg":"操作成功！"}
2020-06-13 19:02:42.818 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-06-13 19:02:42.819 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:02:42.819 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:02:42.820 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-06-13 19:02:42.821 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:02:42.822 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-06-13 19:02:42.837 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-06-13 19:02:43.838 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-13 19:02:43.839 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:02:43.840 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:02:43.840 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-13 19:02:43.841 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:02:43.865 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-06-13 19:02:43.865 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:02:43.866 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:02:43.867 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-06-13 19:02:43.868 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 19:02:43.931 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 93
2020-06-13 19:02:43.949 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-13 19:02:44.732 INFO  [http-nio-1001-exec-3]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:305}] to 39.97.183.122:27017
2020-06-13 19:02:44.800 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 935
2020-06-13 19:02:44.806 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-06-13 19:04:31.103 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-06-13 19:04:31.105 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:04:31.108 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:04:31.109 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-06-13 19:04:31.110 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:04:31.111 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 8
2020-06-13 19:04:31.112 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-06-13 19:04:31.491 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-13 19:04:31.492 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:04:31.493 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:04:31.493 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-13 19:04:31.494 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:04:31.572 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 81
2020-06-13 19:04:31.575 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-13 19:04:33.908 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-06-13 19:04:33.909 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:04:33.910 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:04:33.910 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-06-13 19:04:33.911 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 19:04:33.945 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 37
2020-06-13 19:04:33.946 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-06-13 19:06:04.671 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264358511910559744
2020-06-13 19:06:04.672 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:04.674 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264358511910559744
2020-06-13 19:06:04.674 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:04.675 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:04.675 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-06-13 19:06:04.675 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358511910559744]
2020-06-13 19:06:04.671 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264358511910559744
2020-06-13 19:06:04.678 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:04.683 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:04.675 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:04.683 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-06-13 19:06:04.684 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-06-13 19:06:04.684 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358511910559744]
2020-06-13 19:06:04.684 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358511910559744]
2020-06-13 19:06:04.688 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264358511910559744
2020-06-13 19:06:04.689 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:04.690 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:04.690 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-06-13 19:06:04.690 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358511910559744]
2020-06-13 19:06:04.802 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 131
2020-06-13 19:06:04.805 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-06-13 19:06:05.036 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 365
2020-06-13 19:06:05.046 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":19,"blogComment":0,"blogContent":"<p>前言<br />接前面一篇博客，这又是某个公司的奇葩面试题（都说了到底是哪家公司才会出这种没营养的面试题）。不过吐槽归吐槽，这个题目还是有点学问的，比前面那个&nbsp;不使用比较运算符如何比较两个数的大小 强多了（但是还是能看出面试官是在存心刁难人）。</p>\n<p>原题是&ldquo;只给加法，如何实现减乘除&rdquo;，我寻思着，既然减乘除都不给了，那就加大点难度，加法也别给了吧，今天就手动去实现加减乘除。这里只实现int类型的加减乘除。</p>\n<p>一说到这种&ldquo;不给xxx如何实现xxx的问题&rdquo;，那第一个想到的就是位运算，因此本篇博客的各种运算也是基于位运算的。关于位运算的知识点，请阅读本博客的看官们自行百度学习。。。。</p>\n<p>加法<br />我们先举个加法的例子：8+9=17，可以转换成10+7，即：二者相加不考虑进位的值，和二者相加只考虑进位的值相加。我们再通过二进制来直观的看一下。</p>\n<p>0000 1000 (8)<br />0000 1001 (9)<br />0001 0001 (17)<br />下面描述一下思路（可能有点绕）。</p>\n<p>首先我们看，直接二进制相加的结果，0+0=0,1+0=1,1+1=10。好像能看出点什么。前两个的运算规则复合&ldquo;异或运算&rdquo;，而后者则复合与运算并左移1位。</p>\n<p>到现在思路就清楚了：a^b的结果是不考虑进位的结果，而a&amp;b&lt;&lt;1是只考虑进位的结果。把二者相加即可。如果相加后，可能还存在进位，那就让这两个数字继续相加，一直到进位为0为止。这里使用递归去实现，感兴趣的可以用循环实现，性能比递归要高。</p>\n<p>public int add(int a, int b) {<br />// 得到原位和<br />int xor = a ^ b;<br />// 得到进位和<br />int forWoad = (a &amp; b) &lt;&lt; 1;<br />return forWoad == 0 ? xor : add(xor, forWoad);<br />}<br />到这里，加法就实现完毕了</p>\n<p>负数<br />计算机中的负数实现，是将正数按位取反获取反码，之后+1获得补码，这个结果就是某个正数所对应的负数。（这个在计算机组成原理、操作系统、计算机导论、离散数学等课本中都有，不记得的请翻一下大学课本。）。</p>\n<p>负数的实现其实还是比较简单的，按位取反之后+1即可。</p>\n<p>public int negative(int num) {<br />return add(~num, 1);<br />}<br />减法<br />实现了负数之后，我们第一步实现的加法就可以和负数进行运算了，而减法也就变得简单起来。</p>\n<p>减法的实现如4-2等价于4+(-2)，我们直接使用加法和负数就可以实现。</p>\n<p>public int minus(int a, int b) {<br />return add(a, negative(b));<br />}<br />绝对值<br />接下来要实现乘法和除法。乘法和除法可能会有正数和负数相互计算的情况，因此我们实现乘除之前，需要先实现绝对值计算的功能，将运算数字转换成绝对值进行乘除，之后判断是否需要加上负号即可。</p>\n<p>public int abs(int num) {<br />if (num &lt; 0) {<br />num = minus(0, num);<br />}<br />return num;<br />}<br />乘法<br />乘法的实现，如11*10，乘法的流程如下面所示。</p>\n<p>0000 1011 （11）<br />0000 1010 （10）<br />================<br />0001 0110 （1011&lt;&lt;1，相当于乘以0010）<br />0101 1000 （1011&lt;&lt;3，相当于乘以1000）<br />可以看到，二进制乘法的原理是：从乘数的低位到高位，遇到1并且这个1在乘数的右边起第i（i从0开始）位，那么就把被乘数左移i位得到temp_i，直到乘数中的1遍历完毕后，把根据各位1而得到的被乘数的左移值全部相加即得到乘法结果。</p>\n<p>而至于存在负数的运算，可以先获取负数的个数，再将两个数字转换成绝对值计算，最后判断当负数是1个时，计算结果就是负数，其他情况则是正数。</p>\n<p>public int multi(int a, int b) {<br />// 先获取负数的个数<br />int negativeCount = negativeCount(a, b);<br />// 负数转正数进行计算<br />a = abs(a);<br />b = abs(b);<br />int i = 0;<br />int res = 0;<br />// 乘数为0则结束<br />while (b != 0) {<br />// 处理乘数当前位<br />if ((b &amp; 1) == 1) {<br />res = add(res, a &lt;&lt; i);<br />}<br />b = b &gt;&gt; 1;<br />i = add(i, 1);<br />}<br />if (negativeCount == 1) {<br />// 转为负数<br />res = negative(res);<br />}<br />return res;<br />}<br />negativeCount方法</p>\n<p>public int negativeCount(int a, int b) {<br />int count = 0;<br />if (a &lt; 0) {<br />count = add(count, 1);<br />}<br />if (b &lt; 0) {<br />count = add(count, 1);<br />}<br />return count;<br />}<br />乘法事实上有个简单的实现。乘法就是个连加的过程，如5*4就是4个5相加，这个虽然性能比较低，但是操作起来简单，感兴趣的朋友可以自己去实现。</p>\n<p>除法<br />除法没有什么简单的二进制实现方案，实际计算机中的除法也是通过连减去计算的。a/b的意义就是求a可以由多少个b组成，因此除法可以求a能减去多少个b。至于负数的情况，和乘法相同，不再介绍。</p>\n<p>public int sub(int a, int b) {<br />// 先获取负数的个数<br />int negativeCount = negativeCount(a, b);<br />// 负数转正数进行计算<br />a = abs(a);<br />b = abs(b);<br />int res;<br />if (a &lt; b) {<br />return 0;<br />} else {<br />res = add(sub(minus(a, b), b), 1);<br />}<br />if (negativeCount == 1) {<br />// 转为负数<br />res = negative(res);<br />}<br />return res;<br />}<br />取模<br />取模运算的思路和除法一样，也是个连减的过程，一直减到我们减不了为止，剩下的值就是我们要的结果。</p>\n<p>public int mode(int a, int b) {<br />// 先获取负数的个数<br />int negativeCount = negativeCount(a, b);<br />// 负数转正数进行计算<br />a = abs(a);<br />b = abs(b);<br />int res;<br />if (a &lt; b) {<br />res = a;<br />} else {<br />res = sub(minus(a, b), b);<br />}<br />if (negativeCount == 1) {<br />// 转为负数<br />res = negative(res);<br />}<br />return res;<br />}<br />结语<br />总的来说，加减乘除的实现还是比较简单的，只是对于初学者来说比较难想。熟悉了这类&ldquo;不给xxx如何实现xxx&rdquo;的题目之后，就能第一时间想到位运算了，通过位运算去实现运算符规则，实现起来就没有什么难度了。</p>\n<p>最后还是需要点评一下这道题。这个问题相比上次的问题，稍微的有那么点水平，但是还是不难看出面试官在刁难人。程序员需要懂的原理，应该是开发中的各种框架原理，如HashMap、Spring、Mybatis等，理解了原理才能更好的优化、扩展，以便于提高性能。而所谓的加减乘除原理并没有这些重要，往往在上大学的时候也就了解过了。加减乘除原理的理解对性能优化帮助并不大，即使位运算性能比减法和除法高，但是这点性能损耗，在我们服务器动辄4g8g的情况下是没有任何区别的。所以说面试的时候别问这种刁难人的问题啊，你就是造造火箭问问Spring也好！</p>\n<p>如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":1,"blogId":"1264358511910559744","blogRead":30,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},"msg":"操作成功！"}
2020-06-13 19:06:11.902 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:11.903 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:11.904 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:11.904 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:11.905 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=66666666666666, commentUser=null, user=null, commentBlog=1264358511910559744, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:14.635 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:14.636 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:14.636 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:14.638 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:14.639 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=66666666666666, commentUser=null, user=null, commentBlog=1264358511910559744, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:16.017 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:16.018 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:16.018 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:16.019 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:16.019 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=66666666666666, commentUser=null, user=null, commentBlog=1264358511910559744, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:16.440 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:16.441 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:16.441 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:16.442 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:16.442 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=66666666666666, commentUser=null, user=null, commentBlog=1264358511910559744, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:16.575 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:16.576 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:16.576 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:16.576 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:16.577 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=66666666666666, commentUser=null, user=null, commentBlog=1264358511910559744, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:34.270 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /user/login
2020-06-13 19:06:34.270 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:34.271 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:34.271 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UserController.login
2020-06-13 19:06:34.272 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[User(userId=null, username=tangtu22, password=e807f1fcf82d132f9bb018ca6738a19f, name=null, sex=null, header=null, nickname=null, userEmail=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-06-13 19:06:34.423 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 153
2020-06-13 19:06:34.429 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"user":{"deleted":0,"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","password":"","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22"},"token":"4FF393D4CF0F21D7D59280A1F0C8F782"},"msg":"操作成功！"}
2020-06-13 19:06:35.251 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-06-13 19:06:35.252 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:35.253 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:35.254 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-06-13 19:06:35.254 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:06:35.257 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-06-13 19:06:35.257 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:35.258 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:35.258 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-06-13 19:06:35.259 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-06-13 19:06:35.332 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 81
2020-06-13 19:06:35.333 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","username":"admin"},"msg":"操作成功！"}
2020-06-13 19:06:35.351 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-06-13 19:06:35.355 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:35.356 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:35.357 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-06-13 19:06:35.358 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:06:35.434 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 83
2020-06-13 19:06:35.435 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":30,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java"}],"msg":"操作成功！"}
2020-06-13 19:06:35.485 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 228
2020-06-13 19:06:35.486 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":2,"blogGoods":2,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":13,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-06-10 11:31:50"},{"blogCollection":12,"blogComment":4,"blogGoods":3,"blogId":"1264365258452664320","blogRead":12,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-06-10 03:13:53"},{"blogCollection":19,"blogComment":0,"blogGoods":1,"blogId":"1264358511910559744","blogRead":30,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-06-13 11:06:06"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264365631460507648","blogRead":11,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-04-24 01:20:33","typeName":"linux","updateTime":"2020-06-10 03:13:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":2,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-04-24 01:12:57","typeName":"java","updateTime":"2020-06-09 13:21:36"},{"blogCollection":0,"blogComment":5,"blogGoods":1,"blogId":"1264358089300877312","blogRead":4,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:35","typeName":"java","updateTime":"2020-06-10 03:12:22"},{"blogCollection":0,"blogComment":1,"blogGoods":1,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":3,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-02-24 00:50:27","typeName":"linux","updateTime":"2020-06-10 03:10:30"},{"blogCollection":0,"blogComment":1,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-02-24 00:49:00","typeName":"java","updateTime":"2020-06-10 03:10:48"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-06-13 19:06:35.853 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-06-13 19:06:35.854 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:35.855 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:35.856 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-06-13 19:06:35.859 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:06:35.869 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-06-13 19:06:35.869 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:35.870 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:35.870 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-06-13 19:06:35.871 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:06:35.936 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 83
2020-06-13 19:06:35.936 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-06-13 19:06:35.951 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 82
2020-06-13 19:06:35.955 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"artist":"小优","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7iMOaACqYhAAAOurxSY9A577.jpg","id":1,"lrc":"[00:00.32]Pig小优 - 画舫烟中浅\n[00:01.62]作词：Ming.明\n[00:02.33]作曲：Pig小优\n[00:03.08]编曲：Pig小优\n[00:03.84]后期：Pig小优\n[00:04.54]美工：张小喵\n[00:09.15]踏红船繁华似人间\n[00:12.03]灯火熙攘祈愿\n[00:14.00]手中红线姻缘何时现\n[00:17.57]薄雾小雨润如烟\n[00:19.94]灯中画舫烟中浅\n[00:24.93]这尘缘如惊鸿一面\n[00:27.85]谁家翩翩少年\n[00:29.85]桥边白衣如纤印心间\n[00:33.34]这世间情话誓言\n[00:35.81]不抵这柔情一眼\n[00:40.79]步儿缓红绳缠\n[00:42.70]石桥边灯火染\n[00:44.72]杯中仙促长谈\n[00:46.79]舷外雨声人言难断\n[00:49.71]已成烟已消散\n[00:51.62]化作春意满\n[00:55.75]晚来风寒心却暖\n[00:57.57]三两杯酒后情又添\n[01:00.08]暮鼓丝弦声声慢\n[01:02.36]有佳人舞芊芊\n[01:04.32]研磨提笔在画卷眉目间流转\n[01:08.49]细雨婵娟\n[01:12.25]醉卧画舫听雨眠一场梦无言\n[01:15.93]窗外依旧喧怎转眼桥上人不见\n[01:20.46]回眸深处看细雨茫茫如烟\n[01:24.10]苦了思念\n[01:44.22]步儿缓红绳缠\n[01:46.18]石桥边灯火染\n[01:48.20]杯中仙促长谈\n[01:50.21]舷外雨声人言难断\n[01:53.18]已成烟已消散\n[01:55.15]化作春意满\n[01:59.25]晚来风寒心却暖\n[02:01.16]三两杯酒后情又添\n[02:03.53]暮鼓丝弦声声慢\n[02:05.74]有佳人舞芊芊\n[02:07.80]研磨提笔在画卷眉目间流转\n[02:12.03]细雨婵娟\n[02:15.69]醉卧画舫听雨眠一场梦无言\n[02:19.42]窗外依旧喧怎转眼桥上人不见\n[02:23.95]回眸深处看细雨茫茫如烟\n[02:27.58]苦了思念\n[02:43.49]青山乌蓬伴流年繁华多阑珊\n[02:47.26]刹那嫣然笑款款镌刻在画中仙\n[02:51.46]满纸柔情过指尖笔墨笑意染\n[02:55.64]长袖翩翩\n[02:59.52]醉卧画舫听雨眠一场梦无言\n[03:03.10]窗外依旧喧怎转眼桥上人不见\n[03:07.48]回眸深处看水中喜字红残\n[03:11.31]倒了人间\n画舫烟中浅相关歌词推荐","name":"Pig小优 - 画舫烟中浅","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7iMRKAckVMAInbwpYfM3A430.mp3"},{"artist":"匿名","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVAeADSvsAAAQjTIrrnM214.jpg","id":2,"lrc":"[00:01.87]Take Me Away -逃跑计划\n[00:18.66]编辑:水妈 QQ:331451919\n[00:23.99]I use to be myself\n[00:27.59]And use to play around\n[00:31.47]Sometime I don't want to think\n[00:34.33]Maybe cause I'm afraid\n[00:38.51]I do wanna sing my song\n[00:42.36]No matter what you say\n[00:46.12]With you I never think\n[00:48.95]along~\n[00:49.69]I lood into my soul\n[00:52.63]One day I hope somepoeple take to me\n[00:57.68]About life\n[01:00.85]But I can't take no more\n[01:04.71]Where where where where my Shangri-la\n[01:08.32]I do wanna sing my song\n[01:11.86]No matter what you say\n[01:15.64]With you I never think\n[01:18.48]I lood into my soul\n[01:22.10]One day I hope somepoeple take to me\n[01:26.89]About life\n[01:30.35]But I can't take no more\n[01:34.32]Where...where...where...where my Shangri-la\n[01:38.28]Many many time I want to go\n[01:41.64]So I hardly open my eyes\n[01:45.66]The truth even force me run...run...run...run away...run away\n[01:53.21]But now I'm same to you\n[01:56.47]But I feel nothing better for sure\n[02:00.16]The star...star...star would you take me away\n[02:24.36]Many many time I want to go\n[02:27.61]So I hardly open my eyes\n[02:31.71]The truth even force me run...run...run...run away...run away\n[02:39.14]But now I'm same to you\n[02:42.47]But I feel nothing better for sure\n[02:46.48]The star...star...star would you take me away\n[02:53.98]Many many time I want to go\n[02:57.33]So I hardly open my eyes\n[03:01.30]The truth even force me run...run...run...run away...run away\n[03:08.99]Now I'm same as you\n[03:11.90]But I feel nothing better for sure\n[03:15.93]The star...star...star would you take me away\n[03:22.09]The best for right now\n[03:24.10]-end-","name":"逃跑计划 - 一万次悲伤","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVFKARG1KAJ5SAlaB8pA938.mp3"},{"artist":"薛之谦","cover":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVLeAdth3AACJ_hvYA4w070.jpg","id":3,"lrc":"[00:01.997]作词 : 薛之谦\n[00:03.929]作曲 : 薛之谦\n[00:06.012]\n[00:17.154]听专情的古人 把美言留给最爱的人\n[00:25.069]看裹小脚的人 为诗人的恶习在隐忍\n[00:33.070]你没读懂课本 可世人硬要捧\n[00:41.350]看感情里的人 用肉眼分出三六九等\n[00:49.820]再配合些掌声 看上去全都忠心耿耿\n[00:58.000]谁定的烂台本 可当代都在跟 气氛已麻木不仁\n[01:11.813]\n[01:12.202]所以 当我们都变成木偶人\n[01:17.471]你何苦再做一个痴情人表忠贞\n[01:21.797]文字叙述工整 配上廉价伤痕 你还会哭多感人\n[01:29.805]\n[01:30.107]让我们都变成木偶人\n[01:33.678]再缝几针爱几次后就不会疼\n[01:37.965]去除惦记功能 再遇到你时像个陌生人\n[01:46.963]\n[01:50.846]以前爱过的人 偷偷的藏起红绿两本\n[01:58.724]现在相爱的人 能耍的方式五花八门\n[02:07.230]要一式要两份 把热吻当罪证\n[02:15.298]让动了情的人 还要去分辨好人坏人\n[02:23.458]别在雨里对阵 用可乐拉环陪你的人\n[02:31.606]已变成俗剧本 你何必太当真 不要提那辛路历程\n[02:46.341]\n[02:46.606]所以 当我们都变成木偶人\n[02:51.507]你何苦再做一个痴情人表忠贞\n[02:55.511]文字叙述工整 重复廉价伤痕 你还会哭多感人\n[03:03.407]\n[03:03.825]让我们都变成木偶人\n[03:07.373]再缝几针爱几次后就不会疼\n[03:11.594]去除惦记功能 再遇到你时像个陌生人\n[03:21.158]\n[03:36.779]没有人能变成木偶人\n[03:39.795]无非是在感情里的逃避过程\n[03:43.999]我们盛气凌人 掩饰无权过问\n[03:48.773]遇见谁要拆几针\n[03:52.354]\n[03:52.631]当我们都羡慕木偶人\n[03:55.899]学会他在场面上的玩弄过程\n[04:00.004]美化措辞追捧 似拟人的掌声是我爱人\n[04:12.490]防备厚厚一本 是我献出自己的后遗症\n[04:23.520]\n[04:24.454]制作人 : 陈迪@TalentUnion\n[04:25.387]编曲 : 陈迪\n[04:26.274]吉他 : 劳国贤\n[04:27.357]贝斯 : 崔文正\n[04:28.378]鼓 : 王鹏\n[04:29.346]弦乐团 : 中国爱乐乐团\n[04:30.319]人声监制 : 杨祎\n[04:31.323]缩混 : 杨祎@RaySound Studio\n[04:32.382]母带 : 鲍锐@录顶技","name":"木偶人","url":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVFKARG1KAJ5SAlaB8pA938.mp3"}],"msg":"操作成功！"}
2020-06-13 19:06:38.622 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/read/1264365258452664320
2020-06-13 19:06:38.622 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:38.623 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:38.623 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.read
2020-06-13 19:06:38.624 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:38.630 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365258452664320
2020-06-13 19:06:38.630 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:38.631 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:38.631 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264365258452664320
2020-06-13 19:06:38.631 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-06-13 19:06:38.631 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:38.632 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:38.632 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-06-13 19:06:38.634 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:38.637 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getCollection/1264365258452664320
2020-06-13 19:06:38.639 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:38.639 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:38.640 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getCollection
2020-06-13 19:06:38.632 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:38.640 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:38.703 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 73
2020-06-13 19:06:38.704 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-06-13 19:06:38.733 INFO  [http-nio-1001-exec-5]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:3, serverValue:306}] to 39.97.183.122:27017
2020-06-13 19:06:38.736 INFO  [http-nio-1001-exec-6]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:4, serverValue:307}] to 39.97.183.122:27017
2020-06-13 19:06:38.766 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 135
2020-06-13 19:06:38.766 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 129
2020-06-13 19:06:38.767 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-06-13 19:06:38.767 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":0,"msg":"操作成功！"}
2020-06-13 19:06:38.911 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 289
2020-06-13 19:06:38.914 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":12,"blogComment":4,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":3,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},"msg":"操作成功！"}
2020-06-13 19:06:41.566 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/good
2020-06-13 19:06:41.567 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:41.568 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:41.569 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.good
2020-06-13 19:06:41.570 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[BlogGoods(id=null, userId=null, blogId=1264365258452664320)]
2020-06-13 19:06:41.840 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 274
2020-06-13 19:06:41.840 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"点赞成功"}
2020-06-13 19:06:42.276 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getGood/1264365258452664320
2020-06-13 19:06:42.277 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:42.279 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:42.280 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getGood
2020-06-13 19:06:42.280 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:42.315 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 39
2020-06-13 19:06:42.316 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":1,"msg":"操作成功！"}
2020-06-13 19:06:46.964 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:46.964 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:46.965 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:46.965 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:46.966 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=66666666666666, commentUser=null, user=null, commentBlog=1264365258452664320, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:47.298 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 334
2020-06-13 19:06:47.300 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"评论成功"}
2020-06-13 19:06:47.756 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365258452664320
2020-06-13 19:06:47.758 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:47.759 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:47.760 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-06-13 19:06:47.761 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:47.848 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 92
2020-06-13 19:06:47.862 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":12,"blogComment":5,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":30},"commentBlog":"1264365258452664320","commentContent":"66666666666666","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:47","id":"1271760924174921728","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}}],"msg":"操作成功！"}
2020-06-13 19:06:52.248 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:52.249 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:52.249 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:52.250 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:52.250 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=很秀, commentUser=null, user=null, commentBlog=1264365258452664320, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:52.587 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 339
2020-06-13 19:06:52.588 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"评论成功"}
2020-06-13 19:06:53.014 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365258452664320
2020-06-13 19:06:53.015 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:53.015 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:53.015 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-06-13 19:06:53.015 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:53.079 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 65
2020-06-13 19:06:53.080 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":12,"blogComment":6,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":31},"commentBlog":"1264365258452664320","commentContent":"很秀","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:52","id":"1271760946526367744","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":5,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":30},"commentBlog":"1264365258452664320","commentContent":"66666666666666","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:47","id":"1271760924174921728","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}}],"msg":"操作成功！"}
2020-06-13 19:06:55.864 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/save
2020-06-13 19:06:55.865 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:06:55.866 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:55.866 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.save
2020-06-13 19:06:55.867 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Comment(id=null, commentContent=很强, commentUser=null, user=null, commentBlog=1264365258452664320, blog=null, commentGood=null, createdTime=null, commentFlag=false)]
2020-06-13 19:06:56.169 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 305
2020-06-13 19:06:56.170 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"评论成功"}
2020-06-13 19:06:56.612 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByBlog/1264365258452664320
2020-06-13 19:06:56.613 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:06:56.614 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:06:56.615 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByBlog
2020-06-13 19:06:56.615 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264365258452664320]
2020-06-13 19:06:56.680 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 68
2020-06-13 19:06:56.681 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blog":{"blogCollection":12,"blogComment":7,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":32},"commentBlog":"1264365258452664320","commentContent":"很强","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:56","id":"1271760961437118464","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":6,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":31},"commentBlog":"1264365258452664320","commentContent":"很秀","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:52","id":"1271760946526367744","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":5,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":30},"commentBlog":"1264365258452664320","commentContent":"66666666666666","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:47","id":"1271760924174921728","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}}],"msg":"操作成功！"}
2020-06-13 19:07:00.582 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-06-13 19:07:00.583 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:07:00.583 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:07:00.584 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-06-13 19:07:00.584 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:07:09.247 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-06-13 19:07:09.248 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:07:09.250 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:07:09.251 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-06-13 19:07:09.251 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-06-13 19:07:09.378 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 131
2020-06-13 19:07:09.379 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"4FF393D4CF0F21D7D59280A1F0C8F782"},"msg":"操作成功！"}
2020-06-13 19:07:09.863 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-06-13 19:07:09.865 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:07:09.865 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:07:09.866 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-06-13 19:07:09.868 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:07:09.868 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-06-13 19:07:09.869 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-06-13 19:07:10.291 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-13 19:07:10.292 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:07:10.294 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:07:10.295 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-13 19:07:10.296 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:07:10.370 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 79
2020-06-13 19:07:10.371 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-13 19:07:10.596 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-06-13 19:07:10.596 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:07:10.597 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:07:10.597 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-06-13 19:07:10.598 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 19:07:10.634 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 38
2020-06-13 19:07:10.635 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":12,"blogComment":5,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":30},"commentBlog":"1264365258452664320","commentContent":"66666666666666","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:47","id":"1271760924174921728","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":6,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":31},"commentBlog":"1264365258452664320","commentContent":"很秀","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:52","id":"1271760946526367744","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":7,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":32},"commentBlog":"1264365258452664320","commentContent":"很强","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:56","id":"1271760961437118464","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-06-13 19:12:04.359 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-06-13 19:12:04.369 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:12:04.370 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:12:04.370 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-06-13 19:12:04.373 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 19:12:04.436 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 77
2020-06-13 19:12:04.438 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":12,"blogComment":5,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":30},"commentBlog":"1264365258452664320","commentContent":"66666666666666","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:47","id":"1271760924174921728","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":6,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":31},"commentBlog":"1264365258452664320","commentContent":"很秀","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:52","id":"1271760946526367744","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":7,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":32},"commentBlog":"1264365258452664320","commentContent":"很强","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:56","id":"1271760961437118464","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-06-13 19:13:18.259 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-06-13 19:13:18.260 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:13:18.261 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:13:18.262 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-06-13 19:13:18.262 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 19:13:18.306 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 47
2020-06-13 19:13:18.307 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":12,"blogComment":5,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":30},"commentBlog":"1264365258452664320","commentContent":"66666666666666","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:47","id":"1271760924174921728","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":6,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":31},"commentBlog":"1264365258452664320","commentContent":"很秀","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:52","id":"1271760946526367744","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":7,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":32},"commentBlog":"1264365258452664320","commentContent":"很强","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:56","id":"1271760961437118464","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-06-13 19:13:37.303 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-06-13 19:13:37.307 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:13:37.308 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:13:37.309 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-06-13 19:13:37.310 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:13:37.311 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 8
2020-06-13 19:13:37.313 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","username":"admin"},"msg":"操作成功！"}
2020-06-13 19:13:37.878 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /comment/getByPage
2020-06-13 19:13:37.879 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-06-13 19:13:37.880 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:13:37.882 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.CommentController.getByPage
2020-06-13 19:13:37.883 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-06-13 19:13:37.886 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-06-13 19:13:37.886 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-06-13 19:13:37.887 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-06-13 19:13:37.887 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-06-13 19:13:37.888 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-06-13 19:13:37.934 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 56
2020-06-13 19:13:37.936 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blog":{"blogCollection":12,"blogComment":5,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":30},"commentBlog":"1264365258452664320","commentContent":"66666666666666","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:47","id":"1271760924174921728","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":6,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":31},"commentBlog":"1264365258452664320","commentContent":"很秀","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:52","id":"1271760946526367744","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}},{"blog":{"blogCollection":12,"blogComment":7,"blogContent":"<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>\n<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>\n<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>\n<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>\n<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>\n<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>\n<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>\n<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>","blogGoods":4,"blogId":"1264365258452664320","blogRead":13,"blogTitle":"不使用比较运算符如何比较两个数的大小","blogType":1,"createdTime":"2020-05-24 01:19:04","version":32},"commentBlog":"1264365258452664320","commentContent":"很强","commentFlag":false,"commentGood":0,"commentUser":4,"createdTime":"20-06-13 19:06:56","id":"1271760961437118464","user":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7jVgWAMrZmAACJ_hvYA4w442.jpg","nickname":"老王11222222","sex":1,"userEmail":"2074623967@qq.com","userId":4,"username":"tangtu22","version":2}}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-06-13 19:13:37.965 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 79
2020-06-13 19:13:37.966 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":6,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-06-13 23:21:02.121 INFO  [cluster-ClusterId{value='5ee4b24aa6aeaa78176883dc', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server 39.97.183.122:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:128)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:131)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:64)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
