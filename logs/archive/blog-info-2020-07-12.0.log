2020-07-12 09:39:46.352 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 3760 (started by adminstrator in E:\Idea代码\blog)
2020-07-12 09:39:46.493 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-07-12 09:40:03.976 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-07-12 09:40:04.522 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 509ms. Found 4 MongoDB repository interfaces.
2020-07-12 09:40:06.617 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:07.641 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$a9a34301] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:08.171 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:08.230 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$8ff6817d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:08.241 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$76ce25bf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:08.250 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-07-12 09:40:08.549 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:08.575 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:08.622 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:15.415 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-07-12 09:40:15.417 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:15.572 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.668 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.729 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.784 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.794 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.799 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.808 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.810 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userMapper' of type [com.sun.proxy.$Proxy91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.888 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#77b919a3' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:17.910 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#77b919a3' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:18.036 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#44536de4' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:18.074 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4e1a46fb' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:18.081 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4e1a46fb' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:18.292 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties' of type [org.springframework.boot.autoconfigure.mongo.MongoProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:18.296 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryDependentConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:18.305 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDbFactoryConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:18.311 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration' of type [org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:20.189 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[39.97.183.122:27017], mode=MULTIPLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms', maxWaitQueueSize=500}
2020-07-12 09:40:20.191 INFO  [main]org.mongodb.driver.cluster.info:71 -Adding discovered server 39.97.183.122:27017 to client view of cluster
2020-07-12 09:40:20.598 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongo' of type [com.mongodb.MongoClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:20.704 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoDbFactory' of type [org.springframework.data.mongodb.core.SimpleMongoDbFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:20.735 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration' of type [org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:20.813 INFO  [cluster-ClusterId{value='5f0a6a0366a3b975029a18d9', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:1, serverValue:501}] to 39.97.183.122:27017
2020-07-12 09:40:20.853 INFO  [cluster-ClusterId{value='5f0a6a0366a3b975029a18d9', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Monitor thread successfully connected to server with description ServerDescription{address=39.97.183.122:27017, type=STANDALONE, state=CONNECTED, ok=true, version=ServerVersion{versionList=[4, 2, 7]}, minWireVersion=0, maxWireVersion=8, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=34313358}
2020-07-12 09:40:20.855 INFO  [cluster-ClusterId{value='5f0a6a0366a3b975029a18d9', description='null'}-39.97.183.122:27017]org.mongodb.driver.cluster.info:71 -Discovered cluster type of STANDALONE
2020-07-12 09:40:22.023 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoCustomConversions' of type [org.springframework.data.mongodb.core.convert.MongoCustomConversions] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:22.223 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoMappingContext' of type [org.springframework.data.mongodb.core.mapping.MongoMappingContext] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:22.600 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mappingMongoConverter' of type [org.springframework.data.mongodb.core.convert.MappingMongoConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:23.354 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mongoTemplate' of type [org.springframework.data.mongodb.core.MongoTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.630 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.657 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'commentDao' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.719 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4751e8b9' of type [org.springframework.beans.factory.config.PropertiesFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.720 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#4751e8b9' of type [java.util.Properties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.723 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#5b000fe6' of type [org.springframework.data.repository.core.support.PropertiesBasedNamedQueries] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.725 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7b25ab31' of type [org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.726 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean '(inner bean)#7b25ab31' of type [org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.744 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [org.springframework.data.mongodb.repository.support.MongoRepositoryFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.746 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'collectionDao' of type [com.sun.proxy.$Proxy109] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.789 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'userServiceImpl' of type [com.jg.blog.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.796 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:24.960 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:25.049 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-07-12 09:40:27.010 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 1001 (http)
2020-07-12 09:40:27.097 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-07-12 09:40:27.099 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-07-12 09:40:27.099 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.30]
2020-07-12 09:40:27.808 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-07-12 09:40:27.808 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 37609 ms
2020-07-12 09:40:32.566 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-07-12 09:40:32.636 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 1001 (http) with context path ''
2020-07-12 09:40:32.640 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 56.863 seconds (JVM running for 68.765)
2020-07-12 09:42:28.508 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-07-12 09:42:28.512 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-07-12 09:42:28.603 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 89 ms
2020-07-12 09:42:29.276 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-07-12 09:42:29.278 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-12 09:42:29.281 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:42:29.292 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-07-12 09:42:29.294 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e807f1fcf82d132f9bb018ca6738a19f)]
2020-07-12 09:42:30.234 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 958
2020-07-12 09:42:30.651 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"AF43B17DE629BADE760C84AA410EBDAC"},"msg":"操作成功！"}
2020-07-12 09:42:31.493 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-07-12 09:42:31.495 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-12 09:42:31.496 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:42:31.498 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-07-12 09:42:31.500 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:42:31.503 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 10
2020-07-12 09:42:31.532 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","name":"稽哥66","password":"","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-12 09:42:32.052 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-07-12 09:42:32.056 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-12 09:42:32.057 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:42:32.058 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-07-12 09:42:32.059 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:42:32.189 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 137
2020-07-12 09:42:32.229 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":13,"typeId":1,"typeName":"java"},{"typeBlogCount":3,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-07-12 09:43:03.365 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /log/getByPage
2020-07-12 09:43:03.367 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-12 09:43:03.376 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:43:03.379 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LogController.getByPage
2020-07-12 09:43:03.382 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-07-12 09:43:04.013 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 648
2020-07-12 09:43:04.100 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"createdTime":"2020-05-24 00:45:37","logId":1,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]","logResult":"{\"code\":20000,\"data\":{\"token\":\"A95D452AB74A0BC94870C812EACF9BAE\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":658,"logUrl":"/admin/login"},{"createdTime":"2020-05-24 00:45:37","logId":2,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":4,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:45:38","logId":3,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":123,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:45:44","logId":4,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"enable\":1,\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"enable\":1,\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":100,"logUrl":"/type/listBack"},{"createdTime":"2020-05-24 00:45:48","logId":5,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":540,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:46:47","logId":6,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":311,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:48:15","logId":7,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":{\"name\":\"稽哥\",\"password\":\"\",\"username\":\"admin\"},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":89,"logUrl":"/admin/info"},{"createdTime":"2020-05-24 00:48:16","logId":8,"logIp":"127.0.0.1","logMethod":"GET","logParams":"[]","logResult":"{\"code\":20000,\"data\":[{\"typeBlogCount\":0,\"typeId\":1,\"typeName\":\"java\"},{\"typeBlogCount\":0,\"typeId\":2,\"typeName\":\"linux\"},{\"typeBlogCount\":0,\"typeId\":3,\"typeName\":\"docker\"},{\"typeBlogCount\":0,\"typeId\":4,\"typeName\":\"springboot\"},{\"typeBlogCount\":0,\"typeId\":5,\"typeName\":\"nginx\"},{\"typeBlogCount\":0,\"typeId\":6,\"typeName\":\"mybatis\"}],\"msg\":\"操作成功！\"}","logStatus":1,"logTime":120,"logUrl":"/type/getList"},{"createdTime":"2020-05-24 00:48:17","logId":9,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]","logResult":"{\"code\":20000,\"data\":{\"currentPage\":1,\"index\":0,\"list\":[],\"pageSize\":10,\"params\":{},\"sortMethod\":\"asc\",\"totalCount\":0,\"totalPage\":0},\"msg\":\"操作成功！\"}","logStatus":1,"logTime":323,"logUrl":"/blog/getByPage"},{"createdTime":"2020-05-24 00:49:00","logId":10,"logIp":"127.0.0.1","logMethod":"POST","logParams":"[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]","logResult":"{\"code\":20000,\"msg\":\"添加成功\"}","logStatus":1,"logTime":178,"logUrl":"/blog/save"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1475,"totalPage":148},"msg":"操作成功！"}
2020-07-12 09:47:54.408 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/getAdmin
2020-07-12 09:47:54.411 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-12 09:47:54.412 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:47:54.416 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getAdmin
2020-07-12 09:47:54.419 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:47:54.437 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-12 09:47:54.440 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-12 09:47:54.444 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:47:54.446 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-12 09:47:54.450 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:47:54.467 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-12 09:47:54.468 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-12 09:47:54.470 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:47:54.471 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-12 09:47:54.472 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-12 09:47:54.543 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-12 09:47:54.544 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-12 09:47:54.544 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:47:54.545 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-12 09:47:54.546 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:47:54.612 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-12 09:47:54.612 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-12 09:47:54.614 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:47:54.615 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-12 09:47:54.616 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:47:54.708 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 300
2020-07-12 09:47:54.709 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"header":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LcYyAZb8TAAf2zQ1Ix3Y328.gif","id":1,"name":"稽哥66","signature":"","username":"admin"},"msg":"操作成功！"}
2020-07-12 09:47:54.718 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 281
2020-07-12 09:47:54.733 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-12 09:47:54.758 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 147
2020-07-12 09:47:54.759 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-12 09:47:54.933 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 466
2020-07-12 09:47:54.934 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:49:12"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-12 09:48:21.506 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-07-12 09:48:21.507 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-12 09:48:21.508 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:48:21.514 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-07-12 09:48:21.515 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/recomRead
2020-07-12 09:48:21.518 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-07-12 09:48:21.517 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=created_time, sortMethod=desc)]
2020-07-12 09:48:21.519 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:48:21.519 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.recomRead
2020-07-12 09:48:21.520 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:48:21.647 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 132
2020-07-12 09:48:21.647 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux"}],"msg":"操作成功！"}
2020-07-12 09:48:21.720 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /music/getList
2020-07-12 09:48:21.720 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /link/list
2020-07-12 09:48:21.721 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-12 09:48:21.721 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-07-12 09:48:21.722 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:48:21.723 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.MusicController.getList
2020-07-12 09:48:21.723 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:48:21.722 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-07-12 09:48:21.729 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.LinkController.list
2020-07-12 09:48:21.730 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-07-12 09:48:22.009 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 503
2020-07-12 09:48:22.010 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":1,"blogComment":3,"blogGoods":5,"blogId":"1264726600279891968","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7LHAuAP_m_AAAzoN3Frv0553.jpg","blogRead":14,"blogTitle":"新生代与老年代","createdTime":"2020-05-25 01:14:56","typeName":"java","updateTime":"2020-07-11 07:49:12"},{"blogCollection":0,"blogComment":0,"blogGoods":4,"blogId":"1264365631460507648","blogRead":3,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-07-11 00:44:08"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":1,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-07-11 00:53:51"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"linux","updateTime":"2020-05-25 02:28:09"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":2,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-07-11 00:28:37"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-07-12 09:48:22.012 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 292
2020-07-12 09:48:22.013 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[],"msg":"操作成功！"}
2020-07-12 11:15:36.780 INFO  [cluster-ClusterId{value='5f0a6a0366a3b975029a18d9', description='null'}-39.97.183.122:27017]org.mongodb.driver.connection.info:71 -Opened connection [connectionId{localValue:2, serverValue:502}] to 39.97.183.122:27017
