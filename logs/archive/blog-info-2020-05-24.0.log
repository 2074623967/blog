2020-05-24 07:44:34.280 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 24896 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 07:44:34.562 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 07:44:40.200 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 07:44:40.297 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 87ms. Found 0 MongoDB repository interfaces.
2020-05-24 07:44:41.524 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$f41e0138] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:44:41.658 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:44:41.684 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$da713fb4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:44:41.691 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$c148e3f6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:44:41.700 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 07:44:41.980 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:44:42.007 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:44:42.074 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:45:03.852 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 07:45:03.878 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 07:46:16.509 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 14928 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 07:46:16.526 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 07:46:18.673 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 07:46:18.746 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 63ms. Found 0 MongoDB repository interfaces.
2020-05-24 07:46:19.912 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$b17b4019] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:46:20.071 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:46:20.211 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$97ce7e95] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:46:20.252 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$7ea622d7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:46:20.267 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 07:46:20.464 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:46:20.497 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:46:20.569 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:46:42.575 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 07:46:42.597 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 07:48:02.944 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 32 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 07:48:02.955 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 07:48:05.954 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 07:48:06.021 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 57ms. Found 0 MongoDB repository interfaces.
2020-05-24 07:48:07.241 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$6a02a21] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:48:07.351 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:48:07.373 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$ecf3689d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:48:07.384 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$d3cb0cdf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:48:07.392 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 07:48:07.515 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:48:07.543 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:48:07.594 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:48:29.632 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 07:48:29.658 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 07:49:58.527 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 10500 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 07:49:58.534 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 07:50:00.841 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 07:50:00.890 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 40ms. Found 0 MongoDB repository interfaces.
2020-05-24 07:50:01.545 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$98140d9c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:50:01.625 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:50:01.646 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$7e674c18] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:50:01.651 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$653ef05a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:50:01.658 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 07:50:01.746 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:50:01.772 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:50:01.816 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:50:23.365 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 07:50:23.383 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 07:54:42.041 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 23440 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 07:54:42.059 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 07:54:44.769 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 07:54:44.853 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 73ms. Found 0 MongoDB repository interfaces.
2020-05-24 07:54:45.606 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$41a93ba9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:54:45.725 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:54:45.746 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$27fc7a25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:54:45.755 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$ed41e67] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:54:45.762 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 07:54:45.894 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:54:45.930 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:54:45.972 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 07:55:07.387 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 07:55:07.407 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 08:00:19.459 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 24120 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 08:00:19.512 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 08:00:21.319 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 08:00:21.368 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 41ms. Found 0 MongoDB repository interfaces.
2020-05-24 08:00:21.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$6eafd287] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:00:22.033 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:00:22.056 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$55031103] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:00:22.070 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$3bdab545] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:00:22.075 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 08:00:22.189 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:00:22.228 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:00:22.260 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:00:44.202 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 08:00:44.225 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 08:04:55.843 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 22356 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 08:04:55.850 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 08:04:57.886 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 08:04:57.932 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 39ms. Found 0 MongoDB repository interfaces.
2020-05-24 08:04:58.602 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$b31ebed2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:04:58.701 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:04:58.727 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$9971fd4e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:04:58.735 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$8049a190] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:04:58.745 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 08:04:58.857 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:04:58.915 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:04:58.959 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:05:20.483 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 08:05:20.503 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 08:05:45.906 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 24772 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 08:05:45.913 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 08:05:47.957 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 08:05:48.012 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 46ms. Found 0 MongoDB repository interfaces.
2020-05-24 08:05:48.726 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$8c42dc50] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:05:48.813 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:05:48.838 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$72961acc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:05:48.845 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$596dbf0e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:05:48.853 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 08:05:48.976 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:05:49.009 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:05:49.058 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:06:10.678 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 08:06:10.699 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 08:08:27.995 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 16412 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 08:08:28.014 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 08:08:29.741 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 08:08:29.799 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 50ms. Found 0 MongoDB repository interfaces.
2020-05-24 08:08:30.480 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$2b778ede] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:08:30.569 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:08:30.593 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$11cacd5a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:08:30.600 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$f8a2719c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:08:30.608 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 08:08:30.716 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:08:30.749 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:08:30.794 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:08:52.304 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 08:08:52.321 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 08:31:35.431 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 8228 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 08:31:35.523 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 08:31:38.339 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 08:31:38.418 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 67ms. Found 0 MongoDB repository interfaces.
2020-05-24 08:31:39.253 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$964e7cc3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:31:39.347 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:31:39.371 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$7ca1bb3f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:31:39.382 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$63795f81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:31:39.386 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 08:31:39.488 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:31:39.512 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:31:39.544 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:31:42.302 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 08:31:42.327 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 08:32:23.263 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 15476 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 08:32:23.282 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 08:32:25.514 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 08:32:25.594 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 67ms. Found 0 MongoDB repository interfaces.
2020-05-24 08:32:26.330 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$6d64d250] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:32:26.440 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:32:26.466 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$53b810cc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:32:26.481 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$3a8fb50e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:32:26.498 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 08:32:26.709 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:32:26.755 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:32:26.818 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:32:29.886 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 08:32:29.911 INFO  [main]o.s.b.a.logging.ConditionEvaluationReportLoggingListener.logMessage:136 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-05-24 08:45:08.060 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 12956 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 08:45:08.070 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 08:45:11.646 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 08:45:11.779 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 102ms. Found 0 MongoDB repository interfaces.
2020-05-24 08:45:13.122 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$ff93f2c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:13.252 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:13.279 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$e5e73144] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:13.292 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$ccbed586] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:13.301 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 08:45:13.479 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:13.533 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:13.591 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:19.103 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 08:45:19.104 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:19.270 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.139 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.181 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.199 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.208 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.211 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.215 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.404 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:20.462 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 08:45:21.943 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-05-24 08:45:22.061 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-05-24 08:45:22.068 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-05-24 08:45:22.070 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-24 08:45:22.526 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-05-24 08:45:22.527 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 14292 ms
2020-05-24 08:45:25.690 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-24 08:45:26.976 INFO  [cluster-ClusterId{value='5ec9c3a569ebb313d4e77d96', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-05-24 08:45:28.860 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-05-24 08:45:28.903 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-05-24 08:45:28.917 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 22.672 seconds (JVM running for 26.104)
2020-05-24 08:45:34.971 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-24 08:45:34.972 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-05-24 08:45:35.025 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 52 ms
2020-05-24 08:45:35.334 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-05-24 08:45:35.335 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:45:35.335 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:45:35.338 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-05-24 08:45:35.339 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-05-24 08:45:35.992 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 658
2020-05-24 08:45:36.168 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"A95D452AB74A0BC94870C812EACF9BAE"},"msg":"操作成功！"}
2020-05-24 08:45:36.570 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 08:45:36.571 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:45:36.571 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:45:36.572 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 08:45:36.574 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:45:36.574 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 08:45:36.586 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 08:45:37.200 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 08:45:37.202 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:45:37.204 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:45:37.205 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 08:45:37.206 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:45:37.323 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 123
2020-05-24 08:45:37.328 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 08:45:42.674 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-05-24 08:45:42.675 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:45:42.675 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:45:42.676 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-05-24 08:45:42.677 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:45:42.774 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 100
2020-05-24 08:45:42.774 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 08:45:46.740 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 08:45:46.741 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:45:46.741 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:45:46.742 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 08:45:46.742 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 08:45:47.280 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 540
2020-05-24 08:45:47.291 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-05-24 08:46:45.784 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 08:46:45.785 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:46:45.787 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:46:45.788 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 08:46:45.788 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 08:46:46.095 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 311
2020-05-24 08:46:46.096 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-05-24 08:48:14.416 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 08:48:14.479 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:48:14.480 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:48:14.481 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 08:48:14.482 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:48:14.493 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 89
2020-05-24 08:48:14.499 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 08:48:15.366 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 08:48:15.367 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:48:15.369 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:48:15.371 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 08:48:15.372 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 08:48:15.388 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 08:48:15.389 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:48:15.389 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:48:15.390 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 08:48:15.390 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:48:15.508 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 120
2020-05-24 08:48:15.509 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 08:48:15.689 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 323
2020-05-24 08:48:15.691 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}
2020-05-24 08:48:58.728 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 08:48:58.729 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:48:58.729 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:48:58.730 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 08:48:58.731 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=垃圾回收算法, blogImage=null, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>
<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>
<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>
<p>缺点：会产生碎片，不够连贯</p>
<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>
<p>优缺点<br />标记清除算法的优点和缺点</p>
<p>1. 优点</p>
<p>- 是可以解决循环引用的问题</p>
<p>- 必要时才回收(内存不足时)</p>
<p>2. 缺点：</p>
<p>- 回收时，应用需要挂起，也就是stop the world。</p>
<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>
<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>
<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>
<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>
<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>
<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>
<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>
<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>
<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>
<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>
<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>
<p>概念</p>
<p><br />&nbsp;</p>
<p>压缩算法简单介绍</p>
<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>
<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>
<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>
<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>
<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>
<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>
<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>
<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>
<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>
<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 08:48:58.906 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 178
2020-05-24 08:48:58.907 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 08:48:59.103 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 08:48:59.104 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:48:59.104 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:48:59.105 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 08:48:59.106 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 08:48:59.441 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 338
2020-05-24 08:48:59.456 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}
2020-05-24 08:50:25.873 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 08:50:25.874 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:50:25.875 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:50:25.879 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 08:50:25.881 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>
<p>SqlSession的代码如下</p>
<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>
<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>
<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>
<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error updating database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error committing transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error rolling back transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error flushing statements. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>
<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>
<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>
<p>SQLSessionManager核心字段如下</p>
<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>
<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>
<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>
<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>
<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 08:50:26.065 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 193
2020-05-24 08:50:26.067 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 08:50:33.774 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 08:50:33.775 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:50:33.776 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:50:33.776 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 08:50:33.778 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>
<p>SqlSession的代码如下</p>
<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>
<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>
<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>
<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error updating database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error committing transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error rolling back transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error flushing statements. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>
<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>
<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>
<p>SQLSessionManager核心字段如下</p>
<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>
<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>
<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>
<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>
<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 08:50:34.140 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 366
2020-05-24 08:50:34.141 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 08:51:00.188 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 08:51:00.192 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:51:00.193 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:51:00.193 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 08:51:00.194 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:51:00.194 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 08:51:00.195 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 08:51:00.796 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 08:51:00.797 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:51:00.798 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:51:00.798 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 08:51:00.799 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 08:51:01.097 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 301
2020-05-24 08:51:01.099 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-05-24 08:51:01.126 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 08:51:01.127 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:51:01.128 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:51:01.128 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 08:51:01.128 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:51:01.233 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 107
2020-05-24 08:51:01.234 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 08:52:14.533 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 08:52:14.536 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:52:14.537 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:52:14.538 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 08:52:14.539 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=<p>前言<br />接前面一篇博客，这又是某个公司的奇葩面试题（都说了到底是哪家公司才会出这种没营养的面试题）。不过吐槽归吐槽，这个题目还是有点学问的，比前面那个&nbsp;不使用比较运算符如何比较两个数的大小 强多了（但是还是能看出面试官是在存心刁难人）。</p>
<p>原题是&ldquo;只给加法，如何实现减乘除&rdquo;，我寻思着，既然减乘除都不给了，那就加大点难度，加法也别给了吧，今天就手动去实现加减乘除。这里只实现int类型的加减乘除。</p>
<p>一说到这种&ldquo;不给xxx如何实现xxx的问题&rdquo;，那第一个想到的就是位运算，因此本篇博客的各种运算也是基于位运算的。关于位运算的知识点，请阅读本博客的看官们自行百度学习。。。。</p>
<p>加法<br />我们先举个加法的例子：8+9=17，可以转换成10+7，即：二者相加不考虑进位的值，和二者相加只考虑进位的值相加。我们再通过二进制来直观的看一下。</p>
<p>0000 1000 (8)<br />0000 1001 (9)<br />0001 0001 (17)<br />下面描述一下思路（可能有点绕）。</p>
<p>首先我们看，直接二进制相加的结果，0+0=0,1+0=1,1+1=10。好像能看出点什么。前两个的运算规则复合&ldquo;异或运算&rdquo;，而后者则复合与运算并左移1位。</p>
<p>到现在思路就清楚了：a^b的结果是不考虑进位的结果，而a&amp;b&lt;&lt;1是只考虑进位的结果。把二者相加即可。如果相加后，可能还存在进位，那就让这两个数字继续相加，一直到进位为0为止。这里使用递归去实现，感兴趣的可以用循环实现，性能比递归要高。</p>
<p>public int add(int a, int b) {<br />// 得到原位和<br />int xor = a ^ b;<br />// 得到进位和<br />int forWoad = (a &amp; b) &lt;&lt; 1;<br />return forWoad == 0 ? xor : add(xor, forWoad);<br />}<br />到这里，加法就实现完毕了</p>
<p>负数<br />计算机中的负数实现，是将正数按位取反获取反码，之后+1获得补码，这个结果就是某个正数所对应的负数。（这个在计算机组成原理、操作系统、计算机导论、离散数学等课本中都有，不记得的请翻一下大学课本。）。</p>
<p>负数的实现其实还是比较简单的，按位取反之后+1即可。</p>
<p>public int negative(int num) {<br />return add(~num, 1);<br />}<br />减法<br />实现了负数之后，我们第一步实现的加法就可以和负数进行运算了，而减法也就变得简单起来。</p>
<p>减法的实现如4-2等价于4+(-2)，我们直接使用加法和负数就可以实现。</p>
<p>public int minus(int a, int b) {<br />return add(a, negative(b));<br />}<br />绝对值<br />接下来要实现乘法和除法。乘法和除法可能会有正数和负数相互计算的情况，因此我们实现乘除之前，需要先实现绝对值计算的功能，将运算数字转换成绝对值进行乘除，之后判断是否需要加上负号即可。</p>
<p>public int abs(int num) {<br />if (num &lt; 0) {<br />num = minus(0, num);<br />}<br />return num;<br />}<br />乘法<br />乘法的实现，如11*10，乘法的流程如下面所示。</p>
<p>0000 1011 （11）<br />0000 1010 （10）<br />================<br />0001 0110 （1011&lt;&lt;1，相当于乘以0010）<br />0101 1000 （1011&lt;&lt;3，相当于乘以1000）<br />可以看到，二进制乘法的原理是：从乘数的低位到高位，遇到1并且这个1在乘数的右边起第i（i从0开始）位，那么就把被乘数左移i位得到temp_i，直到乘数中的1遍历完毕后，把根据各位1而得到的被乘数的左移值全部相加即得到乘法结果。</p>
<p>而至于存在负数的运算，可以先获取负数的个数，再将两个数字转换成绝对值计算，最后判断当负数是1个时，计算结果就是负数，其他情况则是正数。</p>
<p>public int multi(int a, int b) {<br />// 先获取负数的个数<br />int negativeCount = negativeCount(a, b);<br />// 负数转正数进行计算<br />a = abs(a);<br />b = abs(b);<br />int i = 0;<br />int res = 0;<br />// 乘数为0则结束<br />while (b != 0) {<br />// 处理乘数当前位<br />if ((b &amp; 1) == 1) {<br />res = add(res, a &lt;&lt; i);<br />}<br />b = b &gt;&gt; 1;<br />i = add(i, 1);<br />}<br />if (negativeCount == 1) {<br />// 转为负数<br />res = negative(res);<br />}<br />return res;<br />}<br />negativeCount方法</p>
<p>public int negativeCount(int a, int b) {<br />int count = 0;<br />if (a &lt; 0) {<br />count = add(count, 1);<br />}<br />if (b &lt; 0) {<br />count = add(count, 1);<br />}<br />return count;<br />}<br />乘法事实上有个简单的实现。乘法就是个连加的过程，如5*4就是4个5相加，这个虽然性能比较低，但是操作起来简单，感兴趣的朋友可以自己去实现。</p>
<p>除法<br />除法没有什么简单的二进制实现方案，实际计算机中的除法也是通过连减去计算的。a/b的意义就是求a可以由多少个b组成，因此除法可以求a能减去多少个b。至于负数的情况，和乘法相同，不再介绍。</p>
<p>public int sub(int a, int b) {<br />// 先获取负数的个数<br />int negativeCount = negativeCount(a, b);<br />// 负数转正数进行计算<br />a = abs(a);<br />b = abs(b);<br />int res;<br />if (a &lt; b) {<br />return 0;<br />} else {<br />res = add(sub(minus(a, b), b), 1);<br />}<br />if (negativeCount == 1) {<br />// 转为负数<br />res = negative(res);<br />}<br />return res;<br />}<br />取模<br />取模运算的思路和除法一样，也是个连减的过程，一直减到我们减不了为止，剩下的值就是我们要的结果。</p>
<p>public int mode(int a, int b) {<br />// 先获取负数的个数<br />int negativeCount = negativeCount(a, b);<br />// 负数转正数进行计算<br />a = abs(a);<br />b = abs(b);<br />int res;<br />if (a &lt; b) {<br />res = a;<br />} else {<br />res = sub(minus(a, b), b);<br />}<br />if (negativeCount == 1) {<br />// 转为负数<br />res = negative(res);<br />}<br />return res;<br />}<br />结语<br />总的来说，加减乘除的实现还是比较简单的，只是对于初学者来说比较难想。熟悉了这类&ldquo;不给xxx如何实现xxx&rdquo;的题目之后，就能第一时间想到位运算了，通过位运算去实现运算符规则，实现起来就没有什么难度了。</p>
<p>最后还是需要点评一下这道题。这个问题相比上次的问题，稍微的有那么点水平，但是还是不难看出面试官在刁难人。程序员需要懂的原理，应该是开发中的各种框架原理，如HashMap、Spring、Mybatis等，理解了原理才能更好的优化、扩展，以便于提高性能。而所谓的加减乘除原理并没有这些重要，往往在上大学的时候也就了解过了。加减乘除原理的理解对性能优化帮助并不大，即使位运算性能比减法和除法高，但是这点性能损耗，在我们服务器动辄4g8g的情况下是没有任何区别的。所以说面试的时候别问这种刁难人的问题啊，你就是造造火箭问问Spring也好！</p>
<p>如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=2, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 08:52:14.709 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 176
2020-05-24 08:52:14.709 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 08:52:24.682 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 08:52:24.685 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:52:24.685 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:52:24.687 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 08:52:24.688 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:52:24.688 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 08:52:24.689 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 08:52:25.453 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 08:52:25.454 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 08:52:25.455 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:52:25.455 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 08:52:25.456 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 08:52:25.462 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 08:52:25.462 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 08:52:25.463 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 08:52:25.463 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 08:52:25.464 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 08:52:25.571 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 118
2020-05-24 08:52:25.573 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 08:52:25.774 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 312
2020-05-24 08:52:25.775 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":4,"totalPage":1},"msg":"操作成功！"}
2020-05-24 09:12:56.095 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:12:56.105 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:12:56.106 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:12:56.106 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:12:56.107 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=<p>首先明确原码、反码、补码的概念</p>
<p>计算机系统中，数值一律用补码来表示：因为补码可以使符号位和数值位统一处理，同时可以使减法按照加法来处理。</p>
<p>对补码做简单介绍：数值编码分为原码，反码，补码，符号位均为0正1负。</p>
<p>原码 -&gt; 补码： 数值位取反加1</p>
<p>补码 -&gt; 原码： 对该补码的数值位继续 取反加1</p>
<p>补码 的绝对值（称为真值）：正数的真值就是本身，负数的真值是各位（包括符号位）取反加1（即变成原码并把符号位取反）.</p>
<p>&nbsp;</p>
<p>加法：<br />将一个整数用二进制表示，其加法运算就是：相异或（^）时，本位为1，进位为0；同为1时本位为0，进位为1；同为0时，本位进位均为0.</p>
<p>所以，不计进位的和为sum = a^b，进位就是c&nbsp;= a&amp;b,(与sum相加时先左移一位，因为这是进位）。完成加法直到进位为0.</p>
<p>public static void main(String[] args) {<br />add(11, 12);<br />}<br /><br />private static int add(Integer a, Integer b) {<br /><br />Integer sum = 0;<br />while (b != 0) {<br />//a与b无进位相加<br />sum = a ^ b;<br />b = (a &amp; b) &lt;&lt; 1;<br />a = sum;<br />}<br />return sum;<br />}<br /><br />运算过程<br />a = 11 = 1011<br />b = 12 = 1100<br /><br />1. sum = a ^ b = 1011 ^ 1100 = 00111<br />2. b = (a &amp; b) &lt;&lt; 1 = ( 1011 &amp; 1100 ) &lt;&lt; 1 = 10000<br />3. a = sum = 00111<br />4. b != 0<br />5. sum = a ^ b = 00111 ^ 10000 = 10111<br />6. b = (a &amp; b) &lt;&lt; 1 = ( 00111 &amp; 10000 ) &lt;&lt; 1 = 000000<br />7. a = sum = 10111<br />8. b == 0 break;<br />9. sum = 10111 = 23<br />sum = a ^ b 应该很好理解，1 + 1 =0 ； 1 + 0 = 1 ； 0 + 0 = 0;</p>
<p>比较难理解的是 b = (a &amp; b) &lt;&lt; 1 ； a&amp;b之后得到的就是进位情况，1011 &amp; 1100 =》 1000 即 a+b 在最高为产生了进位，由于是进位给前一位，所以还需要左移一位。（看不懂就自己写两道题）</p>
<p>&nbsp;</p>
<p>减法：<br />a-b&nbsp; = a+(-b) ，所以我们要先对b取相反数，再相加。求相反数就需要先将各位取反后+1；</p>
<p>5 -&gt;&nbsp;0....0101&nbsp; -取反-&gt;&nbsp;1.....1010 -+1-&gt;&nbsp;1....1011 -&gt;-5</p>
<p>取反后再用加法加起来即可。</p>
<p>/**<br />* 求相反数：将各位取反加一<br />*/<br />private static int negative(int num) <br />{<br />return add(~num, 1);<br />}<br />/**<br />* 减法<br />*/<br />private static int Minus(int a, int b) {<br />return add(a, negative(b));<br />}<br />&nbsp;</p>
<p>乘法：<br />乘法：原理上还是通过加法计算。将b个a相加，注意下面实际的代码。</p>
<p>//乘法<br />private static int multi(int a, int b) {<br />//将乘数和被乘数都取绝对值　<br />int multiplicand = a &lt; 0 ? add(~a, 1) : a;<br />int multiplier = b &lt; 0 ? add(~b, 1) : b;<br /><br />int res = 0;<br />// 判断multiplier 任何数*0=0<br />while (multiplier != 0) {<br />//判断 multiplier 是不是 奇数<br />if ((multiplier &amp; 1) != 0) {<br />// 如果是奇数 则加上一次multiplicand本身<br />res = add(res, multiplicand);<br />}<br />// multiplicand * 2<br />multiplicand &lt;&lt;= 1;<br />// multiplier / 2<br />multiplier &gt;&gt;&gt;= 1;<br />}<br />//计算乘积的符号　　<br />if ((a ^ b) &lt; 0) {<br />res = add(~res, 1);<br />}<br />return res;<br />}<br />debug跑两遍就能理解精髓，就是当 multiplier 是偶数时，则每次让 multiplicand * 2 直到 multiplier / 2 = 0时。当b时奇数是，先加上单独的那个 multiplicand，再重复 multiplier 为偶数的步骤。</p>
<p>我们举个例子</p>
<p>&nbsp;</p>
<p>multiplicand=10， multiplier = 5 答案自然是50 。</p>
<p>我们来看看核心步骤</p>
<p>&nbsp;multiplier 是奇数&nbsp;则先加上当前的 multiplicand，res = 10；<br />&nbsp;multiplicand &lt;&lt; 1 = 20;&nbsp;multiplier &gt;&gt;&gt; 1 = 2; (这里应该看出了一些感觉了)<br />&nbsp;multiplier 是偶数 if为false，则 multiplicand &lt;&lt; 1&nbsp;= 40;&nbsp; multiplier&gt;&gt;&gt;1 = 1;&nbsp;<br />&nbsp;multiplier 是奇数 res + multiplicand&nbsp; = 50; multiplicand &lt;&lt; 1 = 80 ;&nbsp;multiplier&gt;&gt;&gt;1 = 0;<br />&nbsp;循环结束 res = 50；<br />&nbsp;</p>
<p>正数除法：<br />计算机是一个二元的世界，所有的int型数据都可以用[2^0, 2^1,...,2^31]这样一组基来表示（int型最高31位）。</p>
<p>不难想到用除数的2^31,2^30,...,2^2,2^1,2^0倍尝试去减被除数，如果减得动，则把相应的倍数加到商中；如果减不动，则依次尝试更小的倍数。这样就可以快速逼近最终的结果。</p>
<p>private static int divide(int a,int b) {<br />// 先取被除数和除数的绝对值<br />int dividend = a &gt; 0 ? a : add(~a, 1);<br />int divisor = b &gt; 0 ? a : add(~b, 1);<br />int quotient = 0;// 商<br />int remainder = 0;// 余数<br />for(int i = 31; i &gt;= 0; i--) {<br />// 比较dividend是否大于divisor的(1&lt;&lt;i)次方，不要将dividend与(divisor&lt;&lt;i)比较，<br />// 而是用(dividend&gt;&gt;i)与divisor比较，<br />// 效果一样，但是可以避免因(divisor&lt;&lt;i)操作可能导致的溢出，<br />// 如果溢出则会可能dividend本身小于divisor，但是溢出导致dividend大于divisor<br />if((dividend &gt;&gt; i) &gt;= divisor) {<br />quotient = add(quotient, 1 &lt;&lt; i);<br />dividend = minus(dividend, divisor &lt;&lt; i);<br />}<br />}<br />// 确定商的符号<br />if((a ^ b) &lt; 0){<br />// 如果除数和被除数异号，则商为负数<br />quotient = add(~quotient, 1);<br />}<br />// 确定余数符号<br />remainder = b &gt; 0 ? dividend : add(~dividend, 1);<br />System.out.println("余数："+ remainder);<br />// 返回商<br />return quotient;<br />}<br />这个应该很好理解。</p>
<p>&nbsp;<br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「大誌」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/weixin_42236404/article/details/100590592</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:12:56.489 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 394
2020-05-24 09:12:56.490 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 09:12:56.788 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 09:12:56.788 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:12:56.789 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:12:56.789 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 09:12:56.809 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=4, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 09:12:57.150 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 362
2020-05-24 09:12:57.151 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-05-24 09:13:02.863 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 09:13:02.865 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 09:13:02.865 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:13:02.866 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 09:13:02.867 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 09:13:02.867 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 09:13:02.868 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 09:13:03.533 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 09:13:03.534 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:13:03.535 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:13:03.536 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 09:13:03.537 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 09:13:03.857 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 09:13:03.857 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 09:13:03.857 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:13:03.858 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 09:13:03.858 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 09:13:03.866 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 333
2020-05-24 09:13:03.867 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-05-24 09:13:03.961 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 104
2020-05-24 09:13:03.961 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 09:14:22.730 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:14:22.730 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:14:22.731 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:14:22.731 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:14:22.732 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=不使用比较运算符如何比较两个数的大小 , blogImage=null, blogContent=<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>
<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>
<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>
<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>
<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>
<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>
<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>
<p>int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />这样，我们只需要判断index即可。</p>
<p>那么问题来了，题目要求是不允许判断，该怎么办呢？其实这里可以使用数组，下标为0的地方输出a&gt;=b，为1的地方输出a&lt;b。</p>
<p>完整代码：</p>
<p>public void test() {<br />int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />String[] arr = {"a&gt;=b", "a&lt;b"};<br />System.out.println(arr[index]);<br />}<br />至此，已经基本可以判断a和b的大小了。但是到这里可以发现，a=b和a&gt;b的情况无法分离，这里我们可以继续思考。</p>
<p>当a=b时，a-b=0，那么数组0下标位置是否可以直接放a=b？接着，我们把上面的index+1，结果就变成了：1下标位置是大于等于，2下标位置是小于。其中，等于的情况已经在0下标位置，因此1下标位置的结果就是a&gt;b了。</p>
<p>String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />分析到这里，思路已经很清晰，首先我们计算a-b，直接作为下标取arr中的数据，如果报错了，说明不是0、1、2的情况，那么就继续按照上面的思路进行位运算，取出1和2下标的值 。</p>
<p>public void test() {<br />int a = 13;<br />int b = 12;<br />int diff = a - b;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />到了这里，程序还存在一个bug，当a-b=2时，该程序的判断结果是有问题的，因此，我们需要把计算结果为2的情况给排除，做法很简单，把diff这个变量进行有符号左移2位的操作即可（如果只移1位，当diff为1时，计算结果是2，不符合题意）。左移2位之后的结果绝对值肯定比2要大，因此也就杜绝了出现下标为2的情况。</p>
<p>最终代码。</p>
<p>public void test() {<br />int a = 14;<br />int b = 12;<br />int diff = (a - b) &lt;&lt; 2;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />最后还是要吐槽一句，没事别出这种没营养的面试题刁难人家啦！<br />&nbsp;</p>
<p>如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br /><br /></p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:14:29.327 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:14:29.328 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:14:29.328 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:14:29.328 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:14:29.329 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=不使用比较运算符如何比较两个数的大小 , blogImage=null, blogContent=<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>
<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>
<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>
<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>
<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>
<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>
<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>
<p>int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />这样，我们只需要判断index即可。</p>
<p>那么问题来了，题目要求是不允许判断，该怎么办呢？其实这里可以使用数组，下标为0的地方输出a&gt;=b，为1的地方输出a&lt;b。</p>
<p>完整代码：</p>
<p>public void test() {<br />int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />String[] arr = {"a&gt;=b", "a&lt;b"};<br />System.out.println(arr[index]);<br />}<br />至此，已经基本可以判断a和b的大小了。但是到这里可以发现，a=b和a&gt;b的情况无法分离，这里我们可以继续思考。</p>
<p>当a=b时，a-b=0，那么数组0下标位置是否可以直接放a=b？接着，我们把上面的index+1，结果就变成了：1下标位置是大于等于，2下标位置是小于。其中，等于的情况已经在0下标位置，因此1下标位置的结果就是a&gt;b了。</p>
<p>String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />分析到这里，思路已经很清晰，首先我们计算a-b，直接作为下标取arr中的数据，如果报错了，说明不是0、1、2的情况，那么就继续按照上面的思路进行位运算，取出1和2下标的值 。</p>
<p>public void test() {<br />int a = 13;<br />int b = 12;<br />int diff = a - b;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />到了这里，程序还存在一个bug，当a-b=2时，该程序的判断结果是有问题的，因此，我们需要把计算结果为2的情况给排除，做法很简单，把diff这个变量进行有符号左移2位的操作即可（如果只移1位，当diff为1时，计算结果是2，不符合题意）。左移2位之后的结果绝对值肯定比2要大，因此也就杜绝了出现下标为2的情况。</p>
<p>最终代码。</p>
<p>public void test() {<br />int a = 14;<br />int b = 12;<br />int diff = (a - b) &lt;&lt; 2;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />最后还是要吐槽一句，没事别出这种没营养的面试题刁难人家啦！<br />&nbsp;</p>
<p>如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br /><br /></p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:14:44.812 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 18284 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 09:14:44.818 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 09:14:46.758 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 09:14:46.809 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 44ms. Found 0 MongoDB repository interfaces.
2020-05-24 09:14:47.339 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$6876b854] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:47.408 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:47.424 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$4ec9f6d0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:47.430 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$35a19b12] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:47.434 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 09:14:47.643 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:47.691 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:47.750 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.389 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 09:14:52.390 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.479 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.865 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.877 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.893 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.901 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.905 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.907 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:52.965 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:53.016 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 09:14:53.575 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-05-24 09:14:53.587 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-05-24 09:14:53.588 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-05-24 09:14:53.589 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-24 09:14:53.781 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-05-24 09:14:53.781 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 8838 ms
2020-05-24 09:14:55.543 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-24 09:14:56.616 INFO  [cluster-ClusterId{value='5ec9ca8fe8f82940c75503f9', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-05-24 09:14:56.777 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-05-24 09:14:56.807 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-05-24 09:14:56.820 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 13.637 seconds (JVM running for 16.176)
2020-05-24 09:15:10.562 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-24 09:15:10.562 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-05-24 09:15:10.580 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 18 ms
2020-05-24 09:15:10.716 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-05-24 09:15:10.717 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:15:10.718 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:15:10.720 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-05-24 09:15:10.721 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-05-24 09:15:10.936 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 220
2020-05-24 09:15:11.018 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"79967AFDE522756E5274FE42EA3A7F56"},"msg":"操作成功！"}
2020-05-24 09:15:11.292 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 09:15:11.293 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 09:15:11.293 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:15:11.294 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 09:15:11.294 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 09:15:11.295 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 09:15:11.301 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 09:15:12.012 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 09:15:12.012 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 09:15:12.013 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:15:12.014 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 09:15:12.014 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 09:15:12.025 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 09:15:12.027 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:15:12.028 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:15:12.028 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 09:15:12.029 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 09:15:12.121 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 109
2020-05-24 09:15:12.127 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 09:15:12.367 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 342
2020-05-24 09:15:12.375 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-05-24 09:16:02.010 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:16:02.011 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:16:02.011 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:16:02.012 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:16:02.013 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>
<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>
<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>
<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>
<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>
<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>
<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>
<p>int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />这样，我们只需要判断index即可。</p>
<p>那么问题来了，题目要求是不允许判断，该怎么办呢？其实这里可以使用数组，下标为0的地方输出a&gt;=b，为1的地方输出a&lt;b。</p>
<p>完整代码：</p>
<p>public void test() {<br />int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />String[] arr = {"a&gt;=b", "a&lt;b"};<br />System.out.println(arr[index]);<br />}<br />至此，已经基本可以判断a和b的大小了。但是到这里可以发现，a=b和a&gt;b的情况无法分离，这里我们可以继续思考。</p>
<p>当a=b时，a-b=0，那么数组0下标位置是否可以直接放a=b？接着，我们把上面的index+1，结果就变成了：1下标位置是大于等于，2下标位置是小于。其中，等于的情况已经在0下标位置，因此1下标位置的结果就是a&gt;b了。</p>
<p>String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />分析到这里，思路已经很清晰，首先我们计算a-b，直接作为下标取arr中的数据，如果报错了，说明不是0、1、2的情况，那么就继续按照上面的思路进行位运算，取出1和2下标的值 。</p>
<p>public void test() {<br />int a = 13;<br />int b = 12;<br />int diff = a - b;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />到了这里，程序还存在一个bug，当a-b=2时，该程序的判断结果是有问题的，因此，我们需要把计算结果为2的情况给排除，做法很简单，把diff这个变量进行有符号左移2位的操作即可（如果只移1位，当diff为1时，计算结果是2，不符合题意）。左移2位之后的结果绝对值肯定比2要大，因此也就杜绝了出现下标为2的情况。</p>
<p>最终代码。</p>
<p>public void test() {<br />int a = 14;<br />int b = 12;<br />int diff = (a - b) &lt;&lt; 2;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />最后还是要吐槽一句，没事别出这种没营养的面试题刁难人家啦！<br />&nbsp;</p>
<p>如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:17:31.338 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:17:31.342 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:17:31.343 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:17:31.343 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:17:31.344 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>
<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>
<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>
<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>
<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>
<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>
<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>
<p>int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />这样，我们只需要判断index即可。</p>
<p>那么问题来了，题目要求是不允许判断，该怎么办呢？其实这里可以使用数组，下标为0的地方输出a&gt;=b，为1的地方输出a&lt;b。</p>
<p>完整代码：</p>
<p>public void test() {<br />int a = 10;<br />int b = 12;<br />int index = (a - b) &gt;&gt;&gt; 31;<br />String[] arr = {"a&gt;=b", "a&lt;b"};<br />System.out.println(arr[index]);<br />}<br />至此，已经基本可以判断a和b的大小了。但是到这里可以发现，a=b和a&gt;b的情况无法分离，这里我们可以继续思考。</p>
<p>当a=b时，a-b=0，那么数组0下标位置是否可以直接放a=b？接着，我们把上面的index+1，结果就变成了：1下标位置是大于等于，2下标位置是小于。其中，等于的情况已经在0下标位置，因此1下标位置的结果就是a&gt;b了。</p>
<p>String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />分析到这里，思路已经很清晰，首先我们计算a-b，直接作为下标取arr中的数据，如果报错了，说明不是0、1、2的情况，那么就继续按照上面的思路进行位运算，取出1和2下标的值 。</p>
<p>public void test() {<br />int a = 13;<br />int b = 12;<br />int diff = a - b;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />到了这里，程序还存在一个bug，当a-b=2时，该程序的判断结果是有问题的，因此，我们需要把计算结果为2的情况给排除，做法很简单，把diff这个变量进行有符号左移2位的操作即可（如果只移1位，当diff为1时，计算结果是2，不符合题意）。左移2位之后的结果绝对值肯定比2要大，因此也就杜绝了出现下标为2的情况。</p>
<p>最终代码。</p>
<p>public void test() {<br />int a = 14;<br />int b = 12;<br />int diff = (a - b) &lt;&lt; 2;<br />String[] arr = {"a=b", "a&gt;b", "a&lt;b"};<br />try {<br />System.out.println(arr[diff]);<br />} catch (ArrayIndexOutOfBoundsException e) {<br />int index = diff &gt;&gt;&gt; 31;<br />System.out.println(arr[index + 1]);<br />}<br />}<br />最后还是要吐槽一句，没事别出这种没营养的面试题刁难人家啦！<br />&nbsp;</p>
<p>如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:17:45.562 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 09:17:45.562 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 09:17:45.563 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:17:45.564 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 09:17:45.564 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 09:17:45.566 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 09:17:45.567 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 09:17:46.133 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 09:17:46.134 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:17:46.134 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:17:46.136 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 09:17:46.137 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 09:17:46.452 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 09:17:46.452 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 09:17:46.452 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:17:46.453 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 09:17:46.453 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 09:17:46.471 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 339
2020-05-24 09:17:46.473 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":5,"totalPage":1},"msg":"操作成功！"}
2020-05-24 09:17:46.705 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 253
2020-05-24 09:17:46.708 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 09:18:12.584 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:18:12.587 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:18:12.592 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:18:12.594 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:18:12.596 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>
<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>
<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>
<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>
<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>
<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>
<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:19:03.039 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:19:03.040 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:19:03.040 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:19:03.041 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:19:03.042 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=<p>前言<br />今天在水群的过程中看到有位群员谈论到这个话题，是他找工作过程中某家公司的面试题（到底是哪家公司才会出这种没营养的题目刁难别人），有点兴趣，就开始写了。</p>
<p>开搞<br />想了一下，其实就是题目怪了一点，难度其实并不高。这个题目让我想起了前两年看到的题目，只给你加法，怎么计算加减乘除（都说了到底是哪家公司才会出这种没营养的题目）。相比起来，这题好歹是考了计算机中的加法器，而本文主题中谈论的题目则真的是毫无营养。</p>
<p>思路其实很明显，位运算，这类题目一般都是要用位运算的。这里需要使用到无符号右移。</p>
<p>首先，既然不允许直接比较，那我就相减嘛，a-b结果是0就是相等，结果是负数就是a小，结果是正数那就是a大。</p>
<p>当然这里是不能直接比较结果的正负的， 这样依然不符合提议，怎么办呢。</p>
<p>一切的运算在计算机中都是二进制，数字也是用二进制表示的，而二进制表示数字的时候，最高位是代表符号位，1是负数，0是正数，传统的int最高32位。因此我们只需要判断第32位的结果是0还是1就能判断谁大谁小。直接判断第32位肯定不现实，这里就需要使用到无符号右移运算符&ldquo;&gt;&gt;&gt;&rdquo;。举个简单的例子，下面这串二进制只需要无符号右移31位，就可以得到最高位的值</p>
<p>1000 0010 1101 0100 1101 0001 0010 0011<br />无符号右移31位后<br />0000 0000 0000 0000 0000 0000 0000 0001<br />结果显而易见，最高位降到了最低位，其余位全部变成了0，因此，只要结果是负数，那么进行 &gt;&gt;&gt;31 之后的结果转为十进制就是1，否则为0。</p>
<p><br />&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<br />版权声明：本文为CSDN博主「齐天大头」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br />原文链接：https://blog.csdn.net/qq_36403693/article/details/105409625</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:19:03.437 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 398
2020-05-24 09:19:03.437 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 09:19:03.800 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 09:19:03.804 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:19:03.804 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:19:03.805 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 09:19:03.807 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=5, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 09:19:04.124 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 324
2020-05-24 09:19:04.125 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":6,"totalPage":1},"msg":"操作成功！"}
2020-05-24 09:20:31.967 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 09:20:31.968 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:20:31.969 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:20:31.970 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 09:20:31.972 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=<p>前言<br />最近对App开发比较感兴趣，因原生学习起来成本可能较大，就把目光转向了大前端的跨端开发技术。说到跨端开发，那么选择空间就是Flutter、RN、uniapp这几个了。</p>
<p>flutter最近比较热闹，毕竟是谷歌出品。但我们不是炒作热点的媒体，也不是忽悠你交学费的培训机构，我们作为实际的跨平台开发者，冷静的分析下这个东东。</p>
<p>flutter是Google为Fuchsia操作系统设计的应用开发方式。</p>
<p>Fuchsia OS要兼容廉价物联网设备，要求对硬件的消耗降低，并且为了避免与oracle的java打官司，Fuchsia 使用了dart语言+flutter界面库的方式。</p>
<p>从设计上来看，这套方案的性能确实够高。dart虽然属于大前端范畴，但dart是和java一样的强类型语言，这让dart虚拟机可以做很多优化，性能方面超出了js。</p>
<p>dart曾经与typescript竞争，谁才是更好的js？但不幸输给了typescript，chrome也放弃了内置dart虚拟机的计划。</p>
<p>不过dart团队没有解散，几年后，他们借助flutter，再次出现在公众面前。</p>
<p>性能分析和写法的对比<br />flutter作为界面库（注意它只是界面库，dart语言是另一个项目），它唯一要干的事情就是渲染界面。不像HTML5，flutter界面库连视频、定位等都没有，就是一个纯排版引擎，绘制文字、按钮、图片等常用界面控件。</p>
<p>这个排版引擎的特点是简单、高性能。</p>
<p>在3大主流渲染引擎里，webview、react native/weex、flutter，复杂度依次降低，渲染性能依次上升。（uni-app是双渲染引擎，webview和weex都内置了，随便开发者使用切换）</p>
<p>所以我们要清楚，提升性能是有代价的，你究竟想要灵活丰富的css3，还是想要固定flex模式排版，抑或是最简单但高性能的flutter排版？开发便利性和运行性能不可兼得。</p>
<p>同时我们要明白，性能的差别，并不是因为Google的chrome团队、Android团队的技术比同公司的flutter团队差。而是flutter提供的布局写法是被限制过的，解析快，所以渲染快。</p>
<p>但通过这种方式提升性能的代价，就是布局复杂的界面时，flutter的代码嵌套的让人崩溃。</p>
<p>我们先举个例子，同样的界面，用HTML和flutter如何实现：</p>
<p>&lt;div class="greybox"&gt; <br />&lt;div class=redbox&gt; <br />smaple text <br />&lt;/div&gt; <br />&lt;/div&gt; <br /><br />.greybox { <br />display: flex; <br />align-items: center; <br />justify-content: center; <br />background-color: #e0e0e0; /* grey 300 */ <br />width: 320px; <br />height: 240px; <br />font: 18px <br />} <br />.redbox { <br />background-color: #ef5350; /* red 400 */ <br />padding: 16px; <br />color: #ffffff <br />} <br />var container = new Container( // grey box <br />child: new Center( <br />child: new Container( // red box <br />child: new Text( <br />"smaple text", <br />style: new TextStyle( <br />color: Colors.white, <br />fontSize: 18.0, <br />), <br />), <br />decoration: new BoxDecoration( <br />color: Colors.red[400], <br />), <br />padding: new EdgeInsets.all(16.0), <br />), <br />), <br />width: 320.0, <br />height: 240.0, <br />color: Colors.grey[300], <br />); <br />可以看出，从代码的写法来说，flutter没有tag和样式的说法，更没有选择器，从头到尾只有dart语言，它的界面控件是用dart代码new出来的，每个控件的样式，是在new的时候设置的json参数。</p>
<p>如果我们要嵌套布局，就要不停的在dart里写child，同时在dart里给child们设样式参数。上面的代码，只是嵌套了1层，实际开发中，dom要嵌套好多层，想象那样的代码。。。所以大家都诟病dart是&ldquo;嵌套地狱&rdquo;。</p>
<p>或者，你可以这么理解，这是一个只有js，没有html和css的浏览器。你需要用js createElement来创建元素，用js的style方法给每个element设style，反正就是不能写html和css代码。前端都已经发展到各种mvc等视图逻辑分离的架构了，也有了vue组件这种组件化模式方便用各种轮子快速完成界面。你是否能适应dart这种低效的界面开发模式？从开发模式来讲，这确实是一种倒退。</p>
<p>浏览器的html提供了tag和样式分离的写法，还有各种各样的选择器，但其实这也是有代价的。它导致webview初始化时要同时先启动webkit排版引擎来解析这些编写随性的html、css，同时还要启动一个js引擎比如v8或jscore来解析里面的js。</p>
<p>而dart就很简单，只启动一个dart引擎，解析严格的dart语法，它不会去操心有些标签未闭合要如何容错，不会判断宽度320后面是px还是rem或者是动态计算百分比。</p>
<p>对比这2个引擎初始化时要干的事，差别简直太大了。</p>
<p>所以从解析效率上，flutter肯定比webview要高。但从编码灵活性上，flutter写的代码，嗯，难看而低效！</p>
<p>flutter使用的也是flex布局思想，这是一个强嵌套布局模型，比web常规排版引擎的嵌套更多。当界面复杂时，flutter的代码要嵌套几十层，每层的元素的json样式都和元素一起混写在dart代码里，让人崩溃。</p>
<p>有人提出是否可以通过一种预编译的dsl来简化写法，让flutter的开发不这么痛苦。</p>
<p>但这个难度太大了，从严格转换为松散是简单的，从松散转换为严格几乎是不可能的。</p>
<p>什么意思呢？比如flutter代码转换web代码，是很简单的，flutter已经自带了这个功能。但是想反过来，那可难了。</p>
<p>类似的还有，把typescript转为js是容易的，反之，不是绝对不可行，但会复杂到你宁愿去重写一套typescript代码。</p>
<p>flutter的性能高，除了简单严格，还有一个特点，就是逻辑层与视图层统一，运行在同一套dart虚拟机下。</p>
<p>我们知道rn和weex，也是原生渲染的，它们的性能高于webview。但同为原生渲染的，怎么会慢于flutter呢？其实不是原生渲染慢，而是js和原生通信慢。</p>
<p>rn和weex都采用了独立的js引擎（iOS是jscore，Android是v8，最新版rn开始在Android上搞自己的js引擎），从js与dart的比较上，性能稍逊一筹。但这不是主要问题，主要问题是，rn、weex的js引擎和原生渲染层是两个运行环境。</p>
<p>当js引擎联网获取到数据后，通知原生视图层更新界面时，有一个跨环境的通信折损。同样，当用户在屏幕上操作原生视图层时，要给js引擎发送通知，也会产生这个通信折损。</p>
<p>不过这种性能差别，在大多数场景中，用户是感受不到的。比较影响的场景，是跟手式的js响应操作绘制帧动画。</p>
<p>这方面，weex有个值得称赞的技术是BindingX，它可以预定义规则，让用户界面在原生层交互时通过预定义规则直接响应，而无需传递给js层。在需要短时间内来回通信的场景时，可以使用BindingX这类解决方案。它的性能和灵活性比rn更强了一些。</p>
<p>说回来flutter，它只有一个dart引擎，没有来回通信产生的性能问题。不过任何事情都是有利有弊的，flutter在普通的界面绘制上效率虽然高，但一旦涉及原生的界面，反而会遇到更多问题。</p>
<p>前面已经说过，flutter只是一个基础排版引擎，缺少很多能力，当我们需要在flutter界面上内嵌一个原生的视频播放扩展控件时（flutter没有视频播放能力），或者原生的高德地图sdk，那么在拖动视频进度时、拖动地图时，flutter一样会产生原生和dart之间的通信，造成性能损耗。</p>
<p>事实上，由于flutter是在一个类canvas环境绘制的，想把一个原生控件嵌入flutter的布局里某些元素之间去排版，还不是一件容易做到的事情，坑很多。</p>
<p>每个人都想要一个像css3那样灵活写法的布局引擎，他们给react native和weex提需求，给flutter提需求。殊不知，让这些产品团队实现了css3时，他们的性能优势已经不再了，他们相当于又实现了一遍webview。这种无意义的需求，他们是不会受理了。</p>
<p>性能好，有个度，客观地讲，rn/weex调用原生渲染的性能，和flutter的渲染性能，在用户体验上并没有明显区别，甚至在很多场景下，和webview渲染的小程序也没有明显区别。</p>
<p>也简单说说webview渲染小程序，为什么性能高，核心是预载。点击一个新页面时，webview是提前创建好的，不会走复杂的webkit、v8的初始化流程，连开发者的js代码，也是预载好的。所以点击新页面时，它的渲染速度和原生应用没什么差别。当然也有个坏处，就是启动慢。微信里启动小程序速度看着还行，其实是微信在启动小程序之前，就已经提前初始化了小程序运行环境。</p>
<p>即便是排版引擎，ui库好用吗？<br />不管是rn还是flutter，有一个设计，很不中国化。它们在iOS和Android平台上，使用2套ui库。</p>
<p>比如flutter，在iOS上写一个button，要用CupertinoButton，是iOS风格的控件，在Android上则要用RaisedButton，是Material风格的控件。</p>
<p>rn也是如此，它的官方说法是：learn once，write anywhere。它都不敢说：write once，run anywhere。因为它确实要求开发者写2套代码。</p>
<p>中国的开发者可没有这种习惯，中国的每个开发者，为了避免用户换手机后不会用自己的app，都会使用中性的设计。</p>
<p>就连微信Android版，底部的tab也是仿iOS而不是Material风格（Material风格是把底tab放在顶部的，并且左右滑动，微信曾经有这样一个临时版本，因为被用户吐槽，很快就下掉了）。</p>
<p>这种中外差异怎么造成的？</p>
<p>国外Android手机，其手机主界面就是强烈的Material风格。用户在Android主界面习惯的风格和使用方式，如果启动一个App后不是这样，会导致用户不会用了。</p>
<p>Google也一再给Android开发者强调，App必须使用Material风格。这其实也是一个防止用户切换脱离Android的策略设计。</p>
<p>所以国外开发者的App，Android上都会遵循Material风格，当然，这种Material风格的App是上不了Apple的Appstore的。</p>
<p>这就导致他们默认就是要写2套ui的，所以rn和flutter都是iOS、Android各自1套ui控件。</p>
<p>但在中国，我们的国产Android Rom，根本不是Material风格，很多rom以仿iOS体验为卖点。</p>
<p>所以中国的App，全都是贴近iOS的中性风格，中国的用户换了手机，不管是手机os本身，还是App的使用，都不会造成切换障碍。</p>
<p>rn和flutter这种&ldquo;跨平台&rdquo;排版引擎，其跨平台性，对于中国开发者而言，又打了折扣。</p>
<p>其实类似小程序那样的ui风格，是能够良好的跨iOS和Android的体验的，不管用什么手机，打开小程序都不会觉得有问题。</p>
<p>uni-app默认也是这种通用ui风格。uni-app的开发者只需要写一套界面ui，就可以适应不同手机的用户，真正的 write once，run anywhere。</p>
<p>动态性<br />webview、rn/weex，都有一个特点，可以远程动态载入js代码，可以更新本地的js代码。前端开发者认为动态性是天经地义的，但其实flutter并不支持。</p>
<p>flutter是有编译优化概念的，如果它提供动态性支持，会影响它的性能。</p>
<p>业内有些开发者，改造了flutter，用一个独立的v8/jscore来加载动态js代码，去操作flutter布局引擎的渲染。好像还有些人在追捧这样的方案，简直是闲得蛋疼。</p>
<p>flutter本来没有跨环境通信的问题，结果又弄了一个js引擎进来搞出了通信问题，造成性能下降，还把包体积增加了很大，还不如直接用rn/weex。</p>
<p>除了flutter，rn/weex/uni-app都可以动态热更新。</p>
<p>跨平台排版引擎和跨平台应用开发引擎的区别<br />有些人说他们的App用rn/weex、flutter。但是具体用它们做了什么呢？</p>
<p>是整个App用了它们，还是某个页面用了它们？</p>
<p>一个页面跨平台，和一个应用跨平台，是完全不同的2个概念。</p>
<p>webview、rn/weex、flutter全部是渲染引擎，webview因为HTML5的发展，还算是多了一些能力比如位置服务、多媒体等。而rn/weex、flutter真的只是一个纯粹的排版引擎，没有任何原生能力。</p>
<p>如果一个原生应用里，某个不涉及原生能力的界面想跨平台，那么这几个引擎都可以，并且flutter的性能最高。所以能看到一些公司尝试把App中的个别原生交互较少页面使用flutter实现。</p>
<p>但如果一个完整的应用，想用跨平台工具开发，那就不是排版引擎的范畴了，它需要应用开发引擎。</p>
<p>什么是跨平台应用开发引擎？不但排版部分要跨平台，开发API也要跨平台。</p>
<p>应用开发离不开os或三方sdk的能力调用，如果是单纯的排版引擎，一旦涉及os能力和sdk调用，就必须iOS、Android的工程师配合，编写不同的原生代码整合在一起。这就不跨平台了。</p>
<p>Airbnb曾是React Native 框架的倡导者和开发者代表。但他们于2019年正式发公告，弃用了react native。</p>
<p>原因是什么？</p>
<p>很简单，react native并不能提升Airbnb的开发效率，反而降低了他们的效率。</p>
<p>&ldquo;本来我们可以只维护Android和iOS两套代码，但现在我们要维护三套（指多了一套react native的js代码），这让我们很疲惫&rdquo; &ndash; aribnb</p>
<p>开发者选用跨平台开发引擎，本来是为了提高效率、降低成本。Airbnb正是在实践了几年后，发现rn根本无法实现他选用跨平台引擎的初衷时，无奈放弃了rn，用原生开发重写。</p>
<p>要想真的提升开发效率，降低开发成本，那么跨平台开发引擎，需要提供一个完整的应用开发平台，包含所有常用的应用开发能力的跨平台。在不常用的部分，提供插件市场以及免原生介入的插件使用方式。</p>
<p>在react native、flutter的社区，也有不少三方提供的原生插件，但是连Airbnb这样的国外开发者对此都不满意。更何况对于很多中国开发者常用的场景，其对应的插件的质量、跨端性都难以商用。</p>
<p>更麻烦的是如果你不会原生开发，就没法把这些插件与你的前端代码集成起来。</p>
<p>uni-app，它的设计目标不是跨平台排版引擎，而是跨平台应用开发引擎。</p>
<p>所以uni-app的排版部分，可以选择小程序强化webview引擎和weex引擎，可根据自己的需求切换。而能力层面，uni-app提供了htmlplus API、Native.js、插件市场，解决了原生能力js化的问题。</p>
<p>uni-app让开发者真的不用懂原生开发就能做出完整的跨平台应用。遇到极个别的需求，开发者也可以去插件市场找人订做一个原生插件，自己仍然使用js来集成，仍然可以云端直接打包。</p>
<p>技术学习成本和难度<br />rn，要求开发者学习react，要求精通flex布局，要求原生开发协作。</p>
<p>flutter，要求开发者学习dart，了解dart和flutter的API、要求精通flex布局，要求原生开发协作。</p>
<p>weex已经内嵌到uni-app中，就不单独提了。</p>
<p>uni-app，要求开发者学习vue，了解小程序。</p>
<p>很明显uni-app的学习成本太低了，它没有附加专有技术，全部使用公共技术。</p>
<p>学习成本和难度，直接意味着：开发成本、招聘成本、上线速度、上线风险。</p>
<p>另外，dart究竟值不值得学，是一个大问题。</p>
<p>Google的天才工程师也发明了go语言，它确实有很多理论优势，但实际上市场的主流，仍然是c和c++。</p>
<p>生态<br />任何开发引擎，都离不开生态。</p>
<p>对于国外的开发者，rn、flutter的生态肯定比uni-app好，比如facebook登陆分享、Google地图等。</p>
<p>但对于国内的开发者，那是反过来的，中国开发者需要的全端推送（UniPush集成了iOS、华为、小米、OPPO等众多原厂推送）、各种国内登陆、支付、分享SDK、各种国内地图、各种ui库、以及Echart图表等，都是在uni-app体系里，这方面生态可比rn、flutter丰富多了。</p>
<p>其他端的跨端性<br />flutter和rn，都是支持web技术的。但都是仅限于普通界面排版，涉及定位、摄像头、相册什么的，是要单独写代码的。</p>
<p>另外flutter的H5版，嗯，作为中国开发者，你不会想要一个如此浓郁的Material风格的H5版的。。。</p>
<p>更何况这个Material ui库大的很，编译出来的H5版要十几M的体积。</p>
<p>uni-app的H5端是包含完善的能力引擎的，丰富能力都可以直接跨端使用，风格也是跨端风格。uni-app的H5引擎体积只有1百K，gzip后只剩下30k（不含vue、vue rooter），比其他工具的引擎体积要小的多。</p>
<p>另外，中国离不开小程序，rn、flutter官方都不会支持小程序，由于架构差异太大，国内三方也做不到把rn代码良好的编译为小程序代码。uni-app则可以一套代码，同时编译为iOS、Android、H5、微信小程序、支付宝小程序、百度小程序、头条小程序、QQ小程序。</p>
<p>结论<br />每种技术的诞生，有其背后公司的目的。</p>
<p>但凡没有明确公司战略的技术，除非是特别简单的技术，否则很难商用，因为为了商用要投入公司非常多资源。</p>
<p>flutter诞生的目的，是为了Fuchsia OS，是为了在下一个互联网大潮，即万物互联的物联网年代，提供一个类似Android在移动互联网位置的垄断性操作系统。</p>
<p>因为Google已经很明确不会在下一个时代使用Android+java的路线了。</p>
<p>至于在Android上去java化，那是Kotlin的使命，与flutter无关。</p>
<p>跨iOS和Android平台开发，这不是Google的战略目标。</p>
<p>但万物互联何时到来？Fuchsia OS何时流行？这在现实中是一个问号，在Google内部，也只是战略储备项目。</p>
<p>一个语言的流行，不是一件简单的事情，不是有优点，就会流行，它需要天时地利人和。</p>
<p>6年前我们就知道dart比js更好，dart不应该消亡，但想成为主流技术，太难太难了。</p>
<p>同样我们也知道go比c++更好，但go还是起不来。</p>
<p>想靠flutter驱动dart流行是不现实的，甚至是反过来的。跨iOS、Android开发在国外不是主流市场，这点价值造就不出一个这么难建的生态。</p>
<p>所以dart能否流行，是要打一个大大的问号的，它可能会像go语言一样，叫好不叫座。</p>
<p>写了这么多，最后总结下flutter与uni-app的比较：</p>
<p>flutter的相对优势：<br />性能好一丢丢。比rn有优势，但比拥有bindingx的weex/uni-app，在实际开发中没有很明显的差距。<br />flutter的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />嵌套地狱，代码难看难维护<br />不支持热更新<br />目前质量和成熟度很低，github上的issue有5k+，很容易掉坑里<br />原生可视控件融合不好，比如webview、video、map<br />ui库不适合国情<br />学习成本高<br />dart未来扑朔迷离<br />再总结下rn和uni-app的比较</p>
<p>rn的相对优势：<br />rn的坑虽然比weex的少，但uni-app已经填了weex的很多坑。这方面差别不大。<br />rn的生态虽然比weex丰富。但uni-app是反过来的，uni-app的国内应用生态丰富度超过了rn。<br />rn的app冷启动比uni-app快。这个问题uni-app已经内部改进完毕，下个版本发布就能解决。<br />rn是纯单页的，嵌入原生App比较灵活。而uni-app是应用整体的概念，如果要内嵌入其他原生应用的话，要求原生应用内嵌uni-app应用整体进来<br />rn的相对劣势：<br />需要原生协作，维护3套代码，无法有效降低开发成本，提升开发效率<br />不支持小程序，发布到h5也无法直接发<br />ui库不适合国情，learn once，write anywhere<br />学习成本高，用人成本高，不利于开发商降低开发成本<br />rn是纯单页应用，如果一个应用的页面很多，用rn写会很崩溃，变量污染和干扰严重。而weex/uni-app支持多页面，页面之间上下文隔离，写页面较多的大型应用更合适<br />另外react在中国的市场占有率远不如vue。这也是中国与国外不同的特色情况。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=2, blogRemark=null, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 09:20:32.175 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 208
2020-05-24 09:20:32.176 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 09:20:32.424 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 09:20:32.425 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 09:20:32.425 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 09:20:32.426 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 09:20:32.428 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=6, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 09:20:33.142 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 718
2020-05-24 09:20:33.145 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 12:27:30.466 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 7772 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 12:27:30.473 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 12:27:37.140 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 12:27:37.356 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 179ms. Found 0 MongoDB repository interfaces.
2020-05-24 12:27:38.849 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$fe617b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:39.004 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:39.021 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$f6395635] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:39.028 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$dd10fa77] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:39.035 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 12:27:39.251 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:39.279 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:39.410 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:45.069 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 12:27:45.070 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:45.203 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.255 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.293 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.313 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.326 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.333 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.336 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.556 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:47.627 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 12:27:49.203 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-05-24 12:27:49.249 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-05-24 12:27:49.252 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-05-24 12:27:49.253 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-24 12:27:49.855 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-05-24 12:27:49.856 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 18712 ms
2020-05-24 12:27:52.702 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-24 12:27:53.968 INFO  [cluster-ClusterId{value='5ec9f7c857934a28cd07834a', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-05-24 12:27:56.603 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-05-24 12:27:56.677 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-05-24 12:27:56.731 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 34.885 seconds (JVM running for 42.94)
2020-05-24 16:26:16.854 INFO  [main]com.jg.blog.BlogApplication.logStarting:55 -Starting BlogApplication on DESKTOP-LD5PAQI with PID 19848 (E:\Idea代码\blog\target\classes started by adminstrator in E:\Idea代码\blog)
2020-05-24 16:26:16.862 INFO  [main]com.jg.blog.BlogApplication.logStartupProfileInfo:651 -No active profile set, falling back to default profiles: default
2020-05-24 16:26:28.986 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:127 -Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2020-05-24 16:26:29.376 INFO  [main]o.s.d.repository.config.RepositoryConfigurationDelegate.registerRepositoriesIn:187 -Finished Spring Data repository scanning in 299ms. Found 0 MongoDB repository interfaces.
2020-05-24 16:26:32.126 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'shiroConfig' of type [com.jg.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$16ce7574] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:32.446 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties' of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:32.465 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration' of type [org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$fd21b3f0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:32.472 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$e3f95832] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:32.479 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-05-24 16:26:32.789 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:32.814 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:32.933 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:41.499 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-05-24 16:26:41.500 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:41.721 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.238 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.260 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.270 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.277 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminMapper' of type [com.sun.proxy.$Proxy78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.280 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminServiceImpl' of type [com.jg.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.282 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'adminRealm' of type [com.jg.blog.Realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.405 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:43.455 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:335 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-24 16:26:44.715 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:108 -Tomcat initialized with port(s): 1001 (http)
2020-05-24 16:26:44.763 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-1001"]
2020-05-24 16:26:44.764 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-05-24 16:26:44.765 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.35]
2020-05-24 16:26:45.286 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-05-24 16:26:45.286 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 27837 ms
2020-05-24 16:26:47.725 INFO  [main]org.mongodb.driver.cluster.info:71 -Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='30000 ms'}
2020-05-24 16:26:49.335 INFO  [cluster-ClusterId{value='5eca2fc751c6482fdb8c2562', description='null'}-localhost:27017]org.mongodb.driver.cluster.info:76 -Exception in monitor thread while connecting to server localhost:27017
com.mongodb.MongoSocketOpenException: Exception opening socket
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:70)
	at com.mongodb.internal.connection.InternalStreamConnection.open(InternalStreamConnection.java:127)
	at com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.run(DefaultServerMonitor.java:117)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at com.mongodb.internal.connection.SocketStreamHelper.initialize(SocketStreamHelper.java:63)
	at com.mongodb.internal.connection.SocketStream.initializeSocket(SocketStream.java:79)
	at com.mongodb.internal.connection.SocketStream.open(SocketStream.java:65)
	... 3 common frames omitted
2020-05-24 16:26:51.090 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-1001"]
2020-05-24 16:26:51.119 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:220 -Tomcat started on port(s): 1001 (http) with context path ''
2020-05-24 16:26:51.133 INFO  [main]com.jg.blog.BlogApplication.logStarted:61 -Started BlogApplication in 41.665 seconds (JVM running for 61.597)
2020-05-24 16:41:05.207 INFO  [http-nio-1001-exec-1]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-24 16:41:05.214 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-05-24 16:41:05.352 INFO  [http-nio-1001-exec-1]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 137 ms
2020-05-24 16:41:05.813 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-05-24 16:41:05.814 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 16:41:05.815 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:41:05.818 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-05-24 16:41:05.819 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-05-24 16:41:06.429 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 615
2020-05-24 16:41:06.725 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"CDA035D31837E2EED639FBCF5B06AC13"},"msg":"操作成功！"}
2020-05-24 16:41:07.303 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 16:41:07.304 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 16:41:07.304 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:41:07.305 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 16:41:07.306 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 16:41:07.307 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 16:41:07.318 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 16:41:08.017 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 16:41:08.018 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 16:41:08.019 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:41:08.019 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 16:41:08.020 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 16:41:08.141 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 124
2020-05-24 16:41:08.152 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 16:41:13.258 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 16:41:13.260 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 16:41:13.261 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:41:13.262 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 16:41:13.263 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 16:41:13.787 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 529
2020-05-24 16:41:13.801 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 16:41:58.783 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 16:41:58.784 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 16:41:58.787 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:41:58.788 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 16:41:58.791 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 16:41:58.792 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 9
2020-05-24 16:41:58.794 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 16:41:59.718 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 16:41:59.719 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 16:41:59.720 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:41:59.721 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 16:41:59.722 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 16:41:59.760 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 16:41:59.761 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 16:41:59.762 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:41:59.763 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 16:41:59.763 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 16:41:59.878 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 118
2020-05-24 16:41:59.879 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 16:42:00.177 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 459
2020-05-24 16:42:00.179 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 16:44:13.833 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 16:44:13.835 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 16:44:13.836 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:44:13.837 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 16:44:13.838 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 16:44:13.839 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7
2020-05-24 16:44:13.840 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 16:44:14.591 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 16:44:14.591 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 16:44:14.592 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:44:14.593 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 16:44:14.593 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 16:44:14.932 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 341
2020-05-24 16:44:14.933 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 16:44:14.958 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 16:44:14.969 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 16:44:14.970 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 16:44:14.971 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 16:44:14.971 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 16:44:15.076 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 118
2020-05-24 16:44:15.077 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 17:31:19.741 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/login
2020-05-24 17:31:19.748 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 17:31:19.750 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:31:19.751 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.login
2020-05-24 17:31:19.752 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Admin(id=null, name=null, header=null, signature=null, comment=null, username=admin, password=e10adc3949ba59abbe56e057f20f883e)]
2020-05-24 17:31:20.211 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 470
2020-05-24 17:31:20.216 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"token":"7122DDCC92C77C10509F1735CFD37E4D"},"msg":"操作成功！"}
2020-05-24 17:31:20.563 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 17:31:20.564 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:31:20.565 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:31:20.566 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 17:31:20.566 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:31:20.567 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 17:31:20.568 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 17:31:22.059 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 17:31:22.061 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:31:22.061 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:31:22.062 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 17:31:22.063 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:31:22.305 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 246
2020-05-24 17:31:22.306 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 17:31:26.789 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 17:31:26.790 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 17:31:26.790 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:31:26.791 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 17:31:26.793 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 17:31:28.290 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1501
2020-05-24 17:31:28.293 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 17:33:48.776 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 17:33:48.856 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:33:48.858 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:33:48.859 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 17:33:48.860 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:33:48.864 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 106
2020-05-24 17:33:48.870 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 17:33:49.789 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 17:33:49.790 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 17:33:49.791 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:33:49.792 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 17:33:49.792 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 17:33:49.817 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 17:33:49.818 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:33:49.819 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:33:49.819 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 17:33:49.820 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:33:50.049 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 232
2020-05-24 17:33:50.052 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 17:33:50.506 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 721
2020-05-24 17:33:50.508 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 17:39:18.439 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 17:39:18.534 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:39:18.535 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:39:18.536 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 17:39:18.536 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:39:18.608 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 170
2020-05-24 17:39:18.655 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 17:39:20.953 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 17:39:20.954 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:39:20.955 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:39:20.956 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 17:39:20.960 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:39:21.086 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 17:39:21.086 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 17:39:21.088 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:39:21.088 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 17:39:21.088 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 17:39:21.315 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 362
2020-05-24 17:39:21.317 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 17:39:22.094 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1008
2020-05-24 17:39:22.095 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 17:48:33.373 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 17:48:33.419 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:48:33.420 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:48:33.422 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 17:48:33.424 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:48:33.425 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 52
2020-05-24 17:48:33.429 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 17:48:34.027 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 17:48:34.028 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 17:48:34.029 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:48:34.030 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 17:48:34.031 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 17:48:34.039 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 17:48:34.040 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:48:34.041 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:48:34.041 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 17:48:34.044 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:48:34.159 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 120
2020-05-24 17:48:34.160 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 17:48:34.357 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 330
2020-05-24 17:48:34.358 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 17:50:48.027 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 17:50:48.037 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:50:48.037 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:50:48.037 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 17:50:48.038 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:50:48.039 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 12
2020-05-24 17:50:48.041 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 17:50:48.565 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 17:50:48.567 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:50:48.567 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:50:48.568 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 17:50:48.570 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:50:48.570 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-05-24 17:50:48.571 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 17:50:49.036 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 17:50:49.037 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:50:49.038 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:50:49.039 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 17:50:49.039 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:50:49.164 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 128
2020-05-24 17:50:49.165 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 17:50:49.398 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 17:50:49.399 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:50:49.400 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:50:49.401 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 17:50:49.401 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:50:49.635 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 237
2020-05-24 17:50:49.635 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 17:52:14.815 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 17:52:14.816 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 17:52:14.820 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:52:14.821 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 17:52:14.823 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 17:52:15.446 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 631
2020-05-24 17:52:15.447 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 17:56:13.771 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 17:56:13.874 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:56:13.876 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:56:13.879 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 17:56:13.880 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:56:13.893 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 124
2020-05-24 17:56:13.908 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 17:56:14.393 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 17:56:14.394 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 17:56:14.396 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 17:56:14.399 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 17:56:14.401 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 17:56:14.541 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 148
2020-05-24 17:56:14.542 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:00:36.655 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:00:36.669 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:00:36.670 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:00:36.670 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:00:36.671 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:00:36.672 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 17
2020-05-24 18:00:36.674 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:00:37.175 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:00:37.176 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:00:37.177 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:00:37.177 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:00:37.178 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:00:37.294 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 119
2020-05-24 18:00:37.295 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:00:56.411 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:00:56.412 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:00:56.415 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:00:56.415 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:00:56.416 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:00:56.417 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 18:00:56.417 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:00:56.935 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:00:56.936 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:00:56.936 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:00:56.937 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:00:56.937 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:00:57.050 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 115
2020-05-24 18:00:57.051 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:00:57.254 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:00:57.255 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:00:57.255 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:00:57.256 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:00:57.257 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:00:57.258 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 18:00:57.258 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:00:57.773 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:00:57.776 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:00:57.776 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:00:57.777 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:00:57.777 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:00:57.885 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 112
2020-05-24 18:00:57.886 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:02:26.485 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:02:26.486 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:02:26.487 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:02:26.487 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:02:26.488 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:02:26.489 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 18:02:26.491 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:02:27.016 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:02:27.017 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:02:27.017 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:02:27.018 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:02:27.020 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:02:27.121 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 105
2020-05-24 18:02:27.122 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:02:32.094 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:02:32.096 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:02:32.097 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:02:32.100 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:02:32.101 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:02:32.514 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 420
2020-05-24 18:02:32.515 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:02:49.301 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:02:49.302 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:02:49.303 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:02:49.303 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:02:49.304 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:02:49.309 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 8
2020-05-24 18:02:49.310 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:02:49.869 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:02:49.870 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:02:49.870 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:02:49.872 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:02:49.873 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:02:50.030 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 161
2020-05-24 18:02:50.032 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:05:40.423 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:05:40.423 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:05:40.424 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:05:40.424 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:05:40.426 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:05:40.426 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 18:05:40.427 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:05:41.148 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:05:41.148 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:05:41.149 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:05:41.149 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:05:41.150 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:05:41.438 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 290
2020-05-24 18:05:41.439 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:05:41.477 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:05:41.478 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:05:41.479 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:05:41.479 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:05:41.481 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:05:41.581 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 104
2020-05-24 18:05:41.582 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:07:22.407 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:07:22.409 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:07:22.410 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:07:22.411 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:07:22.412 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:07:22.413 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 18:07:22.413 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:07:23.048 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:07:23.049 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:07:23.050 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:07:23.050 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:07:23.054 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:07:23.179 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 131
2020-05-24 18:07:23.180 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:09:47.736 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:09:47.739 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:09:47.739 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:09:47.740 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:09:47.740 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:09:49.014 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1278
2020-05-24 18:09:49.015 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:13:58.003 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:13:58.011 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:13:58.012 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:13:58.016 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:13:58.017 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:13:58.018 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 15
2020-05-24 18:13:58.019 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:13:58.507 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:13:58.508 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:13:58.508 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:13:58.509 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:13:58.510 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:13:58.620 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 113
2020-05-24 18:13:58.620 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:14:05.597 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/listBack
2020-05-24 18:14:05.598 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:14:05.598 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:14:05.598 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.list
2020-05-24 18:14:05.599 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:14:05.804 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 207
2020-05-24 18:14:05.805 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"enable":1,"typeBlogCount":0,"typeId":1,"typeName":"java"},{"enable":1,"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"enable":1,"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"enable":1,"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:14:11.278 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:14:11.279 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:14:11.280 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:14:11.280 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:14:11.281 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:14:11.599 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 321
2020-05-24 18:14:11.600 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:18:59.461 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:18:59.462 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:18:59.463 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:18:59.463 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:18:59.464 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:18:59.465 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 18:18:59.466 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:19:00.092 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:19:00.093 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:19:00.093 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:19:00.094 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:19:00.094 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:19:00.216 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:19:00.217 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:19:00.218 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:19:00.219 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:19:00.220 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:19:00.322 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 106
2020-05-24 18:19:00.323 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:19:00.724 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 632
2020-05-24 18:19:00.725 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:20:21.117 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:20:21.118 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:20:21.118 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:20:21.119 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:20:21.120 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:20:21.120 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 18:20:21.121 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:20:21.641 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:20:21.642 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:20:21.643 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:20:21.643 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:20:21.645 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:20:21.967 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:20:21.968 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:20:21.968 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:20:21.969 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:20:21.969 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:20:21.986 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 345
2020-05-24 18:20:21.987 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:20:22.067 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 100
2020-05-24 18:20:22.068 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:20:57.432 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:20:57.433 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:20:57.433 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:20:57.434 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:20:57.434 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:20:57.436 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 18:20:57.437 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:20:57.840 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:20:57.841 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:20:57.844 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:20:57.844 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:20:57.845 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:20:57.972 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 132
2020-05-24 18:20:57.973 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:21:24.111 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:21:24.115 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:21:24.116 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:21:24.116 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:21:24.117 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:21:24.117 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 18:21:24.118 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:21:24.486 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:21:24.487 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:21:24.487 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:21:24.488 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:21:24.488 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:21:24.605 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 119
2020-05-24 18:21:24.606 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:24:53.696 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:24:53.712 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:24:53.713 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:24:53.714 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:24:53.715 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:24:53.717 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 21
2020-05-24 18:24:53.721 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:24:54.457 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:24:54.458 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:24:54.462 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:24:54.462 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:24:54.462 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:24:54.463 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:24:54.463 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:24:54.463 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:24:54.463 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:24:54.464 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:24:54.464 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7
2020-05-24 18:24:54.468 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:24:54.574 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 116
2020-05-24 18:24:54.575 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:24:55.147 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:24:55.148 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:24:55.149 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:24:55.150 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:24:55.151 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:24:55.330 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 183
2020-05-24 18:24:55.330 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:25:32.293 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:25:32.294 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:25:32.294 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:25:32.295 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:25:32.295 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:25:32.296 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 18:25:32.296 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:25:33.055 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:25:33.059 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:25:33.059 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:25:33.059 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:25:33.060 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:25:33.082 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:25:33.085 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:25:33.085 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:25:33.086 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:25:33.087 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:25:33.193 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 111
2020-05-24 18:25:33.193 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:25:33.372 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 317
2020-05-24 18:25:33.373 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:25:53.686 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:25:53.686 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:25:53.689 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:25:53.691 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:25:53.692 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:25:53.693 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7
2020-05-24 18:25:53.693 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:25:54.173 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:25:54.175 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:25:54.177 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:25:54.178 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:25:54.179 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:25:54.299 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 126
2020-05-24 18:25:54.299 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:27:47.609 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:27:47.610 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:27:47.610 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:27:47.611 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:27:47.611 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:27:47.611 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2
2020-05-24 18:27:47.612 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:27:47.969 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:27:47.970 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:27:47.971 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:27:47.972 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:27:47.973 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:27:48.073 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 104
2020-05-24 18:27:48.074 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:31:34.783 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:31:34.786 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:31:34.787 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:31:34.788 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:31:34.788 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:31:34.789 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 18:31:34.790 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:31:35.287 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:31:35.288 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:31:35.289 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:31:35.289 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:31:35.290 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:31:35.370 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:31:35.372 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:31:35.373 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:31:35.373 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:31:35.374 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:31:35.375 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-05-24 18:31:35.375 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:31:35.393 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 106
2020-05-24 18:31:35.394 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:31:35.744 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:31:35.751 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:31:35.752 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:31:35.752 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:31:35.753 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:31:35.868 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 124
2020-05-24 18:31:35.869 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:31:45.742 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:31:45.743 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:31:45.744 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:31:45.745 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:31:45.746 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:31:46.102 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 360
2020-05-24 18:31:46.103 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:32:43.364 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:32:43.364 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:32:43.365 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:32:43.366 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:32:43.367 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:32:43.367 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 18:32:43.368 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:32:43.767 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:32:43.768 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:32:43.769 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:32:43.769 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:32:43.771 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:32:43.898 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 131
2020-05-24 18:32:43.900 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:33:36.524 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:33:36.525 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:33:36.525 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:33:36.525 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:33:36.526 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:33:36.526 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2
2020-05-24 18:33:36.527 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:33:36.812 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:33:36.812 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:33:36.812 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:33:36.813 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:33:36.813 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:33:36.910 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 99
2020-05-24 18:33:36.910 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:34:16.449 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:34:16.450 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:34:16.450 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:34:16.451 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:34:16.454 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:34:16.454 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-05-24 18:34:16.454 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:34:16.770 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:34:16.774 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:34:16.775 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:34:16.775 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:34:16.776 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:34:16.998 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 228
2020-05-24 18:34:16.999 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:34:28.107 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:34:28.107 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:34:28.108 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:34:28.109 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:34:28.109 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:34:28.110 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 18:34:28.110 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:34:28.680 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:34:28.681 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:34:28.682 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:34:28.682 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:34:28.683 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:34:28.847 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 167
2020-05-24 18:34:28.848 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:35:45.424 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:35:45.431 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:35:45.431 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:35:45.432 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:35:45.433 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:35:45.434 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 10
2020-05-24 18:35:45.435 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:35:45.819 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:35:45.820 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:35:45.821 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:35:45.821 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:35:45.822 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:35:45.936 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 117
2020-05-24 18:35:45.937 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:35:48.903 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:35:48.904 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:35:48.904 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:35:48.905 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:35:48.905 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:35:49.203 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 300
2020-05-24 18:35:49.204 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:39:04.260 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:39:04.291 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:39:04.292 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:39:04.293 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:39:04.294 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:39:04.295 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 35
2020-05-24 18:39:04.304 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:39:04.888 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:39:04.891 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:39:04.960 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:39:04.961 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:39:04.962 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:39:05.094 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 206
2020-05-24 18:39:05.095 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:39:08.139 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:39:08.140 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:39:08.140 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:39:08.141 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:39:08.141 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:39:08.452 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 313
2020-05-24 18:39:08.453 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:39:53.039 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:39:53.048 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:39:53.049 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:39:53.050 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:39:53.050 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:39:53.052 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 13
2020-05-24 18:39:53.053 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:39:53.790 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:39:53.790 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:39:53.791 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:39:53.792 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:39:53.796 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:39:54.042 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 252
2020-05-24 18:39:54.043 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:43:20.985 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:43:20.986 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:43:20.987 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:43:20.988 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:43:20.991 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:43:20.992 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7
2020-05-24 18:43:20.993 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:43:21.313 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:43:21.315 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:43:21.316 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:43:21.317 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:43:21.317 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:43:21.430 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 117
2020-05-24 18:43:21.430 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:45:38.313 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:45:38.326 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:45:38.327 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:45:38.328 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:45:38.328 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:45:38.329 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 16
2020-05-24 18:45:38.331 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:45:39.112 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:45:39.113 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:45:39.114 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:45:39.115 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:45:39.116 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:45:39.232 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 120
2020-05-24 18:45:39.232 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:45:42.343 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:45:42.344 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:45:42.344 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:45:42.345 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:45:42.345 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:45:42.659 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 316
2020-05-24 18:45:42.660 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:46:11.731 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:46:11.759 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:46:11.760 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:46:11.762 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:46:11.764 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:46:11.765 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 34
2020-05-24 18:46:11.779 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:46:12.235 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:46:12.236 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:46:12.236 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:46:12.237 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:46:12.237 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:46:12.347 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 112
2020-05-24 18:46:12.348 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:47:44.405 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:47:44.452 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:47:44.453 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:47:44.454 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:47:44.455 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:47:44.457 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 52
2020-05-24 18:47:44.463 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:47:45.136 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:47:45.136 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:47:45.137 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:47:45.137 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:47:45.138 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:47:45.449 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:47:45.450 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:47:45.450 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:47:45.451 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:47:45.451 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:47:45.482 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 346
2020-05-24 18:47:45.483 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:47:45.566 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 117
2020-05-24 18:47:45.567 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:47:47.134 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:47:47.135 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:47:47.136 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:47:47.137 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:47:47.137 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:47:47.138 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 18:47:47.138 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:47:47.629 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:47:47.631 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:47:47.632 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:47:47.633 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:47:47.633 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:47:47.633 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:47:47.633 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:47:47.634 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:47:47.634 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:47:47.635 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:47:47.764 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 131
2020-05-24 18:47:47.765 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:47:48.145 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 516
2020-05-24 18:47:48.145 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:48:12.247 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:48:12.248 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:48:12.248 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:48:12.249 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:48:12.249 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:48:12.250 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 18:48:12.251 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:48:12.580 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:48:12.580 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:48:12.581 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:48:12.581 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:48:12.582 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:48:12.685 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 106
2020-05-24 18:48:12.687 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:50:19.997 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:50:20.001 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:50:20.001 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:50:20.002 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:50:20.002 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:50:20.003 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7
2020-05-24 18:50:20.004 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:50:20.478 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:50:20.480 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:50:20.482 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:50:20.483 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:50:20.484 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:50:20.495 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:50:20.496 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:50:20.496 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:50:20.497 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:50:20.500 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:50:20.500 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-05-24 18:50:20.501 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:50:20.590 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 112
2020-05-24 18:50:20.590 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:50:20.874 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:50:20.875 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:50:20.876 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:50:20.877 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:50:20.877 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:50:20.988 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 114
2020-05-24 18:50:20.989 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:50:29.675 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 18:50:29.676 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 18:50:29.677 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:50:29.693 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 18:50:29.694 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 18:50:30.630 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 955
2020-05-24 18:50:30.632 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 18:51:13.219 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:51:13.221 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:51:13.221 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:51:13.222 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:51:13.222 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:51:13.223 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 18:51:13.225 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:51:13.594 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:51:13.594 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:51:13.596 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:51:13.596 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:51:13.597 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:51:13.707 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 113
2020-05-24 18:51:13.708 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 18:51:36.255 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 18:51:36.256 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:51:36.257 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:51:36.257 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 18:51:36.258 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:51:36.258 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 18:51:36.259 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 18:51:36.634 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 18:51:36.635 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 18:51:36.635 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 18:51:36.636 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 18:51:36.637 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 18:51:36.739 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 105
2020-05-24 18:51:36.741 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:09:16.876 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:09:16.877 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:09:16.878 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:09:16.878 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:09:16.878 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:09:17.254 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 378
2020-05-24 19:09:17.255 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:11:46.720 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:11:46.723 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:11:46.724 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:11:46.725 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:11:46.727 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:11:46.728 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 8
2020-05-24 19:11:46.729 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:11:47.268 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:11:47.268 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:11:47.269 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:11:47.270 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:11:47.270 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:11:47.301 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:11:47.302 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:11:47.302 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:11:47.303 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:11:47.303 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:11:47.414 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 113
2020-05-24 19:11:47.415 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:11:47.568 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 300
2020-05-24 19:11:47.569 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:18:56.869 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:18:56.881 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:18:56.882 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:18:56.882 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:18:56.883 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:18:56.884 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 15
2020-05-24 19:18:56.886 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:18:57.577 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:18:57.579 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:18:57.579 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:18:57.580 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:18:57.581 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:18:57.692 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 115
2020-05-24 19:18:57.693 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:19:00.712 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:19:00.713 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:19:00.713 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:19:00.714 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:19:00.715 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:19:01.008 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 296
2020-05-24 19:19:01.012 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:22:56.910 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:22:56.912 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:22:56.912 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:22:56.913 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:22:56.914 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:22:56.914 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 19:22:56.916 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:22:57.454 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:22:57.455 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:22:57.455 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:22:57.458 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:22:57.459 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:22:57.747 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:22:57.749 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:22:57.751 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:22:57.752 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:22:57.753 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 299
2020-05-24 19:22:57.754 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:22:57.753 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:22:57.880 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 133
2020-05-24 19:22:57.881 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:26:21.830 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:26:21.831 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:26:21.832 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:26:21.833 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:26:21.833 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:26:21.834 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 19:26:21.835 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:26:22.326 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:26:22.327 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:26:22.327 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:26:22.328 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:26:22.328 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:26:22.335 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:26:22.335 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:26:22.336 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:26:22.336 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:26:22.336 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:26:22.466 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 131
2020-05-24 19:26:22.466 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:26:22.678 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 352
2020-05-24 19:26:22.679 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:27:43.352 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:27:43.355 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:27:43.355 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:27:43.356 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:27:43.356 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:27:43.357 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-05-24 19:27:43.358 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:27:43.954 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:27:43.955 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:27:43.955 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:27:43.956 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:27:43.956 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:27:44.304 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:27:44.305 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:27:44.305 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:27:44.306 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:27:44.307 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:27:44.410 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 106
2020-05-24 19:27:44.411 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:27:44.557 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 603
2020-05-24 19:27:44.557 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:32:31.508 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:32:31.556 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:32:31.557 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:32:31.558 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:32:31.559 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:32:31.573 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 66
2020-05-24 19:32:31.577 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:32:32.267 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:32:32.268 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:32:32.269 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:32:32.270 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:32:32.270 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:32:32.288 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:32:32.289 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:32:32.289 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:32:32.290 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:32:32.291 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:32:32.393 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 126
2020-05-24 19:32:32.395 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:32:32.603 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 315
2020-05-24 19:32:32.604 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:47:05.670 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:47:05.736 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:47:05.737 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:47:05.738 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:47:05.738 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:47:05.739 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 69
2020-05-24 19:47:05.741 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:47:06.443 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:47:06.443 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:47:06.444 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:47:06.444 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:47:06.445 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:47:06.465 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:47:06.466 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:47:06.467 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:47:06.468 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:47:06.468 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:47:06.558 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 115
2020-05-24 19:47:06.559 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:47:06.791 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 326
2020-05-24 19:47:06.794 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:49:40.533 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:49:40.534 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:49:40.534 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:49:40.535 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:49:40.535 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:49:40.535 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 2
2020-05-24 19:49:40.535 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:49:40.876 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:49:40.876 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:49:40.877 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:49:40.877 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:49:40.879 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:49:40.996 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 120
2020-05-24 19:49:40.996 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:49:44.921 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:49:44.921 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:49:44.922 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:49:44.923 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:49:44.924 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:49:45.243 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 322
2020-05-24 19:49:45.244 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:49:53.885 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-05-24 19:49:53.885 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:49:53.886 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:49:53.886 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-05-24 19:49:53.886 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2ed5b8ea]
2020-05-24 19:49:55.238 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1353
2020-05-24 19:49:55.246 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KX2SACQivAABgjnKno8E114.jpg","msg":"上传成功"}
2020-05-24 19:55:34.472 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-05-24 19:55:34.490 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:55:34.491 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:55:34.492 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-05-24 19:55:34.493 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@36f74eb6]
2020-05-24 19:55:34.868 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 397
2020-05-24 19:55:34.871 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYLiABVTKAAKy29TJigg285.jpg","msg":"上传成功"}
2020-05-24 19:56:38.855 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 19:56:38.856 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:56:38.856 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:56:38.857 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 19:56:38.857 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:56:38.858 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 3
2020-05-24 19:56:38.858 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 19:56:39.530 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 19:56:39.531 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 19:56:39.531 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:56:39.532 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 19:56:39.532 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 19:56:39.663 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 133
2020-05-24 19:56:39.663 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 19:56:42.447 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 19:56:42.451 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:56:42.453 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:56:42.453 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 19:56:42.454 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 19:56:42.792 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 345
2020-05-24 19:56:42.793 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 19:56:50.547 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-05-24 19:56:50.548 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:56:50.548 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:56:50.549 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-05-24 19:56:50.549 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@55720ba]
2020-05-24 19:56:50.797 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 250
2020-05-24 19:56:50.798 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","msg":"上传成功"}
2020-05-24 19:58:22.797 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 19:58:22.799 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:58:22.799 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:58:22.800 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 19:58:22.800 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=<p>最近在搭公司新项目的架构，测试的过程中深感导出Excel极为不便，因此就产生了写一个通用导出工具类的想法。写完后经测试发现比较好用，因此将公司相关的代码移除，单独拿出来这个模块进行开源。</p>
<p>项目的GitHub地址：POI操作工具</p>
<p>如果您对本工具比较感兴趣，可以加入下面QQ群进行技术交流：781943947</p>
<p>使用方式：</p>
<p>创建数据库（这个操作就不贴代码了）</p>
<p>导入工程下db目录的数据库</p>
<p>创建类ApiLog（实际开发中换成自己的类），加上注解@Excel</p>
<p>@Data<br />public class ApiLog implements Serializable {<br /><br />private static final long serialVersionUID = -3286564461647015367L;<br /><br />/**<br />* 日志id<br />*/<br />@Excel(name = "编号")<br />private Integer logId;<br /><br />/**<br />* 请求路径<br />*/<br />@Excel(name = "请求地址")<br />private String logUrl;<br /><br />/**<br />* 参数<br />*/<br />@Excel(name = "请求参数")<br />private String logParams;<br /><br />/**<br />* 访问状态，1正常0异常<br />*/<br />@Excel(name = "访问状态")<br />private Integer logStatus;<br /><br />/**<br />* 异常信息<br />*/<br />@Excel(name = "异常信息")<br />private String logMessage;<br /><br />/**<br />* 浏览器UA标识<br />*/<br />@Excel(name = "浏览器标识", autoSize = true)<br />private String logUa;<br /><br />/**<br />* 访问controller<br />*/<br />@Excel(name = "控制层")<br />private String logController;<br /><br />/**<br />* 请求方式，get、post等<br />*/<br />@Excel(name = "请求方式")<br />private String logMethod;<br /><br />/**<br />* 响应时间，单位毫秒<br />*/<br />@Excel(name = "响应时间", isStatistics = true)<br />private Long logTime;<br /><br />/**<br />* 请求ip<br />*/<br />@Excel(name = "请求ip")<br />private String logIp;<br /><br />/**<br />* 设备MAC<br />*/<br />@Excel(name = "设备号")<br />private String logDevice;<br /><br />/**<br />* 创建时间<br />*/<br />@Excel(name = "请求时间")<br />private String createdDate;<br /><br />/**<br />* 创建人<br />*/<br />private String createdBy;<br /><br />/**<br />* 创建人姓名<br />*/<br />@Excel(name = "创建人", autoSize = true)<br />private String createdName;<br /><br />/**<br />* 返回值<br />*/<br />@Excel(name = "返回值")<br />private String logResult;<br /><br />/**<br />* 日志内容<br />*/<br />@Excel(name = "日志内容")<br />private String logContent;<br /><br />/**<br />* 日志类型 0:操作日志;1:登录日志;2:定时任务;<br />*/<br />private Integer logType;<br /><br />/**<br />* 操作类型 1查询，2添加，3修改，4删除，5导入，6导出<br />*/<br />private Integer logOperateType;<br /><br />@Override<br />public String toString() {<br />return "ApiLog{" +<br />"logId=" + logId +<br />", logUrl='" + logUrl + '\'' +<br />", logParams='" + logParams + '\'' +<br />", logStatus=" + logStatus +<br />", logMessage='" + logMessage + '\'' +<br />", logUa='" + logUa + '\'' +<br />", logController='" + logController + '\'' +<br />", logMethod='" + logMethod + '\'' +<br />", logTime=" + logTime +<br />", logIp='" + logIp + '\'' +<br />", logDevice='" + logDevice + '\'' +<br />", createdDate='" + createdDate + '\'' +<br />", createdBy='" + createdBy + '\'' +<br />", createdName='" + createdName + '\'' +<br />", logResult='" + logResult + '\'' +<br />", logContent='" + logContent + '\'' +<br />", logType=" + logType +<br />", logOperateType=" + logOperateType +<br />'}';<br />}<br />}<br />编写Mapper（Service就跳过了）</p>
<p>@Component<br />public interface ApiMapper {<br /><br />/**<br />* 查询所有<br />* @return<br />*/<br />List&lt;ApiLog&gt; findAll();<br /><br />}<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;<br />&lt;mapper namespace="com.gej.poi.mapper.ApiMapper"&gt;<br />&lt;!-- 注意：本内容仅限于风越云力内部传阅，禁止外泄以及用于其他的商业目 --&gt;<br />&lt;!-- 通用查询映射结果 --&gt;<br />&lt;resultMap id="BaseResultMap" type="com.gej.poi.pojo.ApiLog"&gt;<br />&lt;id column="log_id" property="logId"/&gt;<br />&lt;result column="log_url" property="logUrl"/&gt;<br />&lt;result column="log_params" property="logParams"/&gt;<br />&lt;result column="log_status" property="logStatus"/&gt;<br />&lt;result column="log_message" property="logMessage"/&gt;<br />&lt;result column="log_ua" property="logUa"/&gt;<br />&lt;result column="log_controller" property="logController"/&gt;<br />&lt;result column="log_method" property="logMethod"/&gt;<br />&lt;result column="log_time" property="logTime"/&gt;<br />&lt;result column="log_ip" property="logIp"/&gt;<br />&lt;result column="log_device" property="logDevice"/&gt;<br />&lt;result column="created_date" property="createdDate"/&gt;<br />&lt;result column="created_by" property="createdBy"/&gt;<br />&lt;result column="log_result" property="logResult"/&gt;<br />&lt;result column="created_name" property="createdName"/&gt;<br />&lt;/resultMap&gt;<br /><br />&lt;!-- 通用查询结果列 --&gt;<br />&lt;sql id="Base_Column_List"&gt;<br />log_id, log_url, log_params, log_status, log_message, log_ua, log_controller, log_method, log_time, log_ip, log_device, created_date, created_name, log_result<br />&lt;/sql&gt;<br /><br />&lt;select id="findAll" resultMap="BaseResultMap"&gt;<br />select * from sys_log_api<br />&lt;/select&gt;<br /><br />&lt;/mapper&gt;<br />编写测试类</p>
<p>@SpringBootTest<br />@RunWith(SpringRunner.class)<br />public class ExportTest {<br /><br />@Autowired<br />private ApiMapper apiMapper;<br /><br />/**<br />* 导出测试<br />* @throws Exception<br />*/<br />@Test<br />public void testExportLog() throws Exception {<br />List&lt;ApiLog&gt; list = apiMapper.findAll();<br />Workbook workbook = new ExcelExportHandler().createSheet(new ExportParams("测试导出", "最新日志"), ApiLog.class, list);<br />OutputStream outputStream = new FileOutputStream(new File("D:/测试.xlsx"));<br />workbook.write(outputStream);<br />}<br /><br />/**<br />* 导入测试<br />* @throws Exception<br />*/<br />@Test<br />public void testImportLog() throws Exception {<br />InputStream inputStream = new FileInputStream(new File("D:/测试.xlsx"));<br />List&lt;ApiLog&gt; apiLogs = new ExcelImportHandler().importExcel(inputStream, ApiLog.class, new ImportParams());<br />for (ApiLog apiLog : apiLogs) {<br />System.out.println(apiLog);<br />}<br />}<br /><br />}<br />最后附上Excel注解的代码</p>
<p>@Retention(RetentionPolicy.RUNTIME)<br />@Target({ElementType.FIELD})<br />public @interface Excel {<br /><br />/**<br />* 该列是否需要时间格式化<br />*/<br />boolean needFormat() default false;<br /><br />/**<br />* 时间格式化<br />*/<br />String format() default "";<br /><br />/**<br />* 导出时在excel中每个列的高度 单位为字符，一个汉字=2个字符<br />*/<br />double height() default 10;<br /><br />/**<br />* 导出时的列名。不可重复<br />*/<br />String name();<br /><br />/**<br />* 导出时在excel中每个列的宽 单位为字符，一个汉字=2个字符 如 以列名列内容中较合适的长度 例如姓名列6 【姓名一般三个字】<br />* 性别列4【男女占1，但是列标题两个汉字】 限制1-255<br />*/<br />double width() default 10;<br /><br />/**<br />* 是否自动统计数据,如果是统计,true的话在最后追加一行统计,把所有数据求和<br />*/<br />boolean isStatistics() default false;<br /><br />/**<br />* 是否设置列宽自适应<br />*/<br />boolean autoSize() default false;<br /><br />}<br />最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=鸡哥博客, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 19:58:25.375 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 19:58:25.376 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:58:25.377 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:58:25.378 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 19:58:25.379 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=<p>最近在搭公司新项目的架构，测试的过程中深感导出Excel极为不便，因此就产生了写一个通用导出工具类的想法。写完后经测试发现比较好用，因此将公司相关的代码移除，单独拿出来这个模块进行开源。</p>
<p>项目的GitHub地址：POI操作工具</p>
<p>如果您对本工具比较感兴趣，可以加入下面QQ群进行技术交流：781943947</p>
<p>使用方式：</p>
<p>创建数据库（这个操作就不贴代码了）</p>
<p>导入工程下db目录的数据库</p>
<p>创建类ApiLog（实际开发中换成自己的类），加上注解@Excel</p>
<p>@Data<br />public class ApiLog implements Serializable {<br /><br />private static final long serialVersionUID = -3286564461647015367L;<br /><br />/**<br />* 日志id<br />*/<br />@Excel(name = "编号")<br />private Integer logId;<br /><br />/**<br />* 请求路径<br />*/<br />@Excel(name = "请求地址")<br />private String logUrl;<br /><br />/**<br />* 参数<br />*/<br />@Excel(name = "请求参数")<br />private String logParams;<br /><br />/**<br />* 访问状态，1正常0异常<br />*/<br />@Excel(name = "访问状态")<br />private Integer logStatus;<br /><br />/**<br />* 异常信息<br />*/<br />@Excel(name = "异常信息")<br />private String logMessage;<br /><br />/**<br />* 浏览器UA标识<br />*/<br />@Excel(name = "浏览器标识", autoSize = true)<br />private String logUa;<br /><br />/**<br />* 访问controller<br />*/<br />@Excel(name = "控制层")<br />private String logController;<br /><br />/**<br />* 请求方式，get、post等<br />*/<br />@Excel(name = "请求方式")<br />private String logMethod;<br /><br />/**<br />* 响应时间，单位毫秒<br />*/<br />@Excel(name = "响应时间", isStatistics = true)<br />private Long logTime;<br /><br />/**<br />* 请求ip<br />*/<br />@Excel(name = "请求ip")<br />private String logIp;<br /><br />/**<br />* 设备MAC<br />*/<br />@Excel(name = "设备号")<br />private String logDevice;<br /><br />/**<br />* 创建时间<br />*/<br />@Excel(name = "请求时间")<br />private String createdDate;<br /><br />/**<br />* 创建人<br />*/<br />private String createdBy;<br /><br />/**<br />* 创建人姓名<br />*/<br />@Excel(name = "创建人", autoSize = true)<br />private String createdName;<br /><br />/**<br />* 返回值<br />*/<br />@Excel(name = "返回值")<br />private String logResult;<br /><br />/**<br />* 日志内容<br />*/<br />@Excel(name = "日志内容")<br />private String logContent;<br /><br />/**<br />* 日志类型 0:操作日志;1:登录日志;2:定时任务;<br />*/<br />private Integer logType;<br /><br />/**<br />* 操作类型 1查询，2添加，3修改，4删除，5导入，6导出<br />*/<br />private Integer logOperateType;<br /><br />@Override<br />public String toString() {<br />return "ApiLog{" +<br />"logId=" + logId +<br />", logUrl='" + logUrl + '\'' +<br />", logParams='" + logParams + '\'' +<br />", logStatus=" + logStatus +<br />", logMessage='" + logMessage + '\'' +<br />", logUa='" + logUa + '\'' +<br />", logController='" + logController + '\'' +<br />", logMethod='" + logMethod + '\'' +<br />", logTime=" + logTime +<br />", logIp='" + logIp + '\'' +<br />", logDevice='" + logDevice + '\'' +<br />", createdDate='" + createdDate + '\'' +<br />", createdBy='" + createdBy + '\'' +<br />", createdName='" + createdName + '\'' +<br />", logResult='" + logResult + '\'' +<br />", logContent='" + logContent + '\'' +<br />", logType=" + logType +<br />", logOperateType=" + logOperateType +<br />'}';<br />}<br />}<br />编写Mapper（Service就跳过了）</p>
<p>@Component<br />public interface ApiMapper {<br /><br />/**<br />* 查询所有<br />* @return<br />*/<br />List&lt;ApiLog&gt; findAll();<br /><br />}<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;<br />&lt;mapper namespace="com.gej.poi.mapper.ApiMapper"&gt;<br />&lt;!-- 注意：本内容仅限于风越云力内部传阅，禁止外泄以及用于其他的商业目 --&gt;<br />&lt;!-- 通用查询映射结果 --&gt;<br />&lt;resultMap id="BaseResultMap" type="com.gej.poi.pojo.ApiLog"&gt;<br />&lt;id column="log_id" property="logId"/&gt;<br />&lt;result column="log_url" property="logUrl"/&gt;<br />&lt;result column="log_params" property="logParams"/&gt;<br />&lt;result column="log_status" property="logStatus"/&gt;<br />&lt;result column="log_message" property="logMessage"/&gt;<br />&lt;result column="log_ua" property="logUa"/&gt;<br />&lt;result column="log_controller" property="logController"/&gt;<br />&lt;result column="log_method" property="logMethod"/&gt;<br />&lt;result column="log_time" property="logTime"/&gt;<br />&lt;result column="log_ip" property="logIp"/&gt;<br />&lt;result column="log_device" property="logDevice"/&gt;<br />&lt;result column="created_date" property="createdDate"/&gt;<br />&lt;result column="created_by" property="createdBy"/&gt;<br />&lt;result column="log_result" property="logResult"/&gt;<br />&lt;result column="created_name" property="createdName"/&gt;<br />&lt;/resultMap&gt;<br /><br />&lt;!-- 通用查询结果列 --&gt;<br />&lt;sql id="Base_Column_List"&gt;<br />log_id, log_url, log_params, log_status, log_message, log_ua, log_controller, log_method, log_time, log_ip, log_device, created_date, created_name, log_result<br />&lt;/sql&gt;<br /><br />&lt;select id="findAll" resultMap="BaseResultMap"&gt;<br />select * from sys_log_api<br />&lt;/select&gt;<br /><br />&lt;/mapper&gt;<br />编写测试类</p>
<p>@SpringBootTest<br />@RunWith(SpringRunner.class)<br />public class ExportTest {<br /><br />@Autowired<br />private ApiMapper apiMapper;<br /><br />/**<br />* 导出测试<br />* @throws Exception<br />*/<br />@Test<br />public void testExportLog() throws Exception {<br />List&lt;ApiLog&gt; list = apiMapper.findAll();<br />Workbook workbook = new ExcelExportHandler().createSheet(new ExportParams("测试导出", "最新日志"), ApiLog.class, list);<br />OutputStream outputStream = new FileOutputStream(new File("D:/测试.xlsx"));<br />workbook.write(outputStream);<br />}<br /><br />/**<br />* 导入测试<br />* @throws Exception<br />*/<br />@Test<br />public void testImportLog() throws Exception {<br />InputStream inputStream = new FileInputStream(new File("D:/测试.xlsx"));<br />List&lt;ApiLog&gt; apiLogs = new ExcelImportHandler().importExcel(inputStream, ApiLog.class, new ImportParams());<br />for (ApiLog apiLog : apiLogs) {<br />System.out.println(apiLog);<br />}<br />}<br /><br />}<br />最后附上Excel注解的代码</p>
<p>@Retention(RetentionPolicy.RUNTIME)<br />@Target({ElementType.FIELD})<br />public @interface Excel {<br /><br />/**<br />* 该列是否需要时间格式化<br />*/<br />boolean needFormat() default false;<br /><br />/**<br />* 时间格式化<br />*/<br />String format() default "";<br /><br />/**<br />* 导出时在excel中每个列的高度 单位为字符，一个汉字=2个字符<br />*/<br />double height() default 10;<br /><br />/**<br />* 导出时的列名。不可重复<br />*/<br />String name();<br /><br />/**<br />* 导出时在excel中每个列的宽 单位为字符，一个汉字=2个字符 如 以列名列内容中较合适的长度 例如姓名列6 【姓名一般三个字】<br />* 性别列4【男女占1，但是列标题两个汉字】 限制1-255<br />*/<br />double width() default 10;<br /><br />/**<br />* 是否自动统计数据,如果是统计,true的话在最后追加一行统计,把所有数据求和<br />*/<br />boolean isStatistics() default false;<br /><br />/**<br />* 是否设置列宽自适应<br />*/<br />boolean autoSize() default false;<br /><br />}<br />最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=鸡哥博客, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 19:58:31.966 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 19:58:31.966 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:58:31.967 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:58:31.967 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 19:58:31.969 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=<p>最近在搭公司新项目的架构，测试的过程中深感导出Excel极为不便，因此就产生了写一个通用导出工具类的想法。写完后经测试发现比较好用，因此将公司相关的代码移除，单独拿出来这个模块进行开源。</p>
<p>项目的GitHub地址：POI操作工具</p>
<p>如果您对本工具比较感兴趣，可以加入下面QQ群进行技术交流：781943947</p>
<p>使用方式：</p>
<p>创建数据库（这个操作就不贴代码了）</p>
<p>导入工程下db目录的数据库</p>
<p>创建类ApiLog（实际开发中换成自己的类），加上注解@Excel</p>
<p>@Data<br />public class ApiLog implements Serializable {<br /><br />private static final long serialVersionUID = -3286564461647015367L;<br /><br />/**<br />* 日志id<br />*/<br />@Excel(name = "编号")<br />private Integer logId;<br /><br />/**<br />* 请求路径<br />*/<br />@Excel(name = "请求地址")<br />private String logUrl;<br /><br />/**<br />* 参数<br />*/<br />@Excel(name = "请求参数")<br />private String logParams;<br /><br />/**<br />* 访问状态，1正常0异常<br />*/<br />@Excel(name = "访问状态")<br />private Integer logStatus;<br /><br />/**<br />* 异常信息<br />*/<br />@Excel(name = "异常信息")<br />private String logMessage;<br /><br />/**<br />* 浏览器UA标识<br />*/<br />@Excel(name = "浏览器标识", autoSize = true)<br />private String logUa;<br /><br />/**<br />* 访问controller<br />*/<br />@Excel(name = "控制层")<br />private String logController;<br /><br />/**<br />* 请求方式，get、post等<br />*/<br />@Excel(name = "请求方式")<br />private String logMethod;<br /><br />/**<br />* 响应时间，单位毫秒<br />*/<br />@Excel(name = "响应时间", isStatistics = true)<br />private Long logTime;<br /><br />/**<br />* 请求ip<br />*/<br />@Excel(name = "请求ip")<br />private String logIp;<br /><br />/**<br />* 设备MAC<br />*/<br />@Excel(name = "设备号")<br />private String logDevice;<br /><br />/**<br />* 创建时间<br />*/<br />@Excel(name = "请求时间")<br />private String createdDate;<br /><br />/**<br />* 创建人<br />*/<br />private String createdBy;<br /><br />/**<br />* 创建人姓名<br />*/<br />@Excel(name = "创建人", autoSize = true)<br />private String createdName;<br /><br />/**<br />* 返回值<br />*/<br />@Excel(name = "返回值")<br />private String logResult;<br /><br />/**<br />* 日志内容<br />*/<br />@Excel(name = "日志内容")<br />private String logContent;<br /><br />/**<br />* 日志类型 0:操作日志;1:登录日志;2:定时任务;<br />*/<br />private Integer logType;<br /><br />/**<br />* 操作类型 1查询，2添加，3修改，4删除，5导入，6导出<br />*/<br />private Integer logOperateType;<br /><br />@Override<br />public String toString() {<br />return "ApiLog{" +<br />"logId=" + logId +<br />", logUrl='" + logUrl + '\'' +<br />", logParams='" + logParams + '\'' +<br />", logStatus=" + logStatus +<br />", logMessage='" + logMessage + '\'' +<br />", logUa='" + logUa + '\'' +<br />", logController='" + logController + '\'' +<br />", logMethod='" + logMethod + '\'' +<br />", logTime=" + logTime +<br />", logIp='" + logIp + '\'' +<br />", logDevice='" + logDevice + '\'' +<br />", createdDate='" + createdDate + '\'' +<br />", createdBy='" + createdBy + '\'' +<br />", createdName='" + createdName + '\'' +<br />", logResult='" + logResult + '\'' +<br />", logContent='" + logContent + '\'' +<br />", logType=" + logType +<br />", logOperateType=" + logOperateType +<br />'}';<br />}<br />}<br />编写Mapper（Service就跳过了）</p>
<p>@Component<br />public interface ApiMapper {<br /><br />/**<br />* 查询所有<br />* @return<br />*/<br />List&lt;ApiLog&gt; findAll();<br /><br />}<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;<br />&lt;mapper namespace="com.gej.poi.mapper.ApiMapper"&gt;<br />&lt;!-- 注意：本内容仅限于风越云力内部传阅，禁止外泄以及用于其他的商业目 --&gt;<br />&lt;!-- 通用查询映射结果 --&gt;<br />&lt;resultMap id="BaseResultMap" type="com.gej.poi.pojo.ApiLog"&gt;<br />&lt;id column="log_id" property="logId"/&gt;<br />&lt;result column="log_url" property="logUrl"/&gt;<br />&lt;result column="log_params" property="logParams"/&gt;<br />&lt;result column="log_status" property="logStatus"/&gt;<br />&lt;result column="log_message" property="logMessage"/&gt;<br />&lt;result column="log_ua" property="logUa"/&gt;<br />&lt;result column="log_controller" property="logController"/&gt;<br />&lt;result column="log_method" property="logMethod"/&gt;<br />&lt;result column="log_time" property="logTime"/&gt;<br />&lt;result column="log_ip" property="logIp"/&gt;<br />&lt;result column="log_device" property="logDevice"/&gt;<br />&lt;result column="created_date" property="createdDate"/&gt;<br />&lt;result column="created_by" property="createdBy"/&gt;<br />&lt;result column="log_result" property="logResult"/&gt;<br />&lt;result column="created_name" property="createdName"/&gt;<br />&lt;/resultMap&gt;<br /><br />&lt;!-- 通用查询结果列 --&gt;<br />&lt;sql id="Base_Column_List"&gt;<br />log_id, log_url, log_params, log_status, log_message, log_ua, log_controller, log_method, log_time, log_ip, log_device, created_date, created_name, log_result<br />&lt;/sql&gt;<br /><br />&lt;select id="findAll" resultMap="BaseResultMap"&gt;<br />select * from sys_log_api<br />&lt;/select&gt;<br /><br />&lt;/mapper&gt;<br />编写测试类</p>
<p>@SpringBootTest<br />@RunWith(SpringRunner.class)<br />public class ExportTest {<br /><br />@Autowired<br />private ApiMapper apiMapper;<br /><br />/**<br />* 导出测试<br />* @throws Exception<br />*/<br />@Test<br />public void testExportLog() throws Exception {<br />List&lt;ApiLog&gt; list = apiMapper.findAll();<br />Workbook workbook = new ExcelExportHandler().createSheet(new ExportParams("测试导出", "最新日志"), ApiLog.class, list);<br />OutputStream outputStream = new FileOutputStream(new File("D:/测试.xlsx"));<br />workbook.write(outputStream);<br />}<br /><br />/**<br />* 导入测试<br />* @throws Exception<br />*/<br />@Test<br />public void testImportLog() throws Exception {<br />InputStream inputStream = new FileInputStream(new File("D:/测试.xlsx"));<br />List&lt;ApiLog&gt; apiLogs = new ExcelImportHandler().importExcel(inputStream, ApiLog.class, new ImportParams());<br />for (ApiLog apiLog : apiLogs) {<br />System.out.println(apiLog);<br />}<br />}<br /><br />}<br />最后附上Excel注解的代码</p>
<p>@Retention(RetentionPolicy.RUNTIME)<br />@Target({ElementType.FIELD})<br />public @interface Excel {<br /><br />/**<br />* 该列是否需要时间格式化<br />*/<br />boolean needFormat() default false;<br /><br />/**<br />* 时间格式化<br />*/<br />String format() default "";<br /><br />/**<br />* 导出时在excel中每个列的高度 单位为字符，一个汉字=2个字符<br />*/<br />double height() default 10;<br /><br />/**<br />* 导出时的列名。不可重复<br />*/<br />String name();<br /><br />/**<br />* 导出时在excel中每个列的宽 单位为字符，一个汉字=2个字符 如 以列名列内容中较合适的长度 例如姓名列6 【姓名一般三个字】<br />* 性别列4【男女占1，但是列标题两个汉字】 限制1-255<br />*/<br />double width() default 10;<br /><br />/**<br />* 是否自动统计数据,如果是统计,true的话在最后追加一行统计,把所有数据求和<br />*/<br />boolean isStatistics() default false;<br /><br />/**<br />* 是否设置列宽自适应<br />*/<br />boolean autoSize() default false;<br /><br />}<br />最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=鸡哥博客, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 19:59:52.370 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 19:59:52.372 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 19:59:52.373 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 19:59:52.373 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 19:59:52.374 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=<p>最近在搭公司新项目的架构，测试的过程中深感导出Excel极为不便，因此就产生了写一个通用导出工具类的想法。写完后经测试发现比较好用，因此将公司相关的代码移除，单独拿出来这个模块进行开源。</p>
<p>项目的GitHub地址：POI操作工具</p>
<p>如果您对本工具比较感兴趣，可以加入下面QQ群进行技术交流：781943947</p>
<p>使用方式：</p>
<p>创建数据库（这个操作就不贴代码了）</p>
<p>导入工程下db目录的数据库</p>
<p>创建类ApiLog（实际开发中换成自己的类），加上注解@Excel</p>
<p>@Data<br />public class ApiLog implements Serializable {<br /><br />private static final long serialVersionUID = -3286564461647015367L;<br /><br />/**<br />* 日志id<br />*/<br />@Excel(name = "编号")<br />private Integer logId;<br /><br />/**<br />* 请求路径<br />*/<br />@Excel(name = "请求地址")<br />private String logUrl;<br /><br />/**<br />* 参数<br />*/<br />@Excel(name = "请求参数")<br />private String logParams;<br /><br />/**<br />* 访问状态，1正常0异常<br />*/<br />@Excel(name = "访问状态")<br />private Integer logStatus;<br /><br />/**<br />* 异常信息<br />*/<br />@Excel(name = "异常信息")<br />private String logMessage;<br /><br />/**<br />* 浏览器UA标识<br />*/<br />@Excel(name = "浏览器标识", autoSize = true)<br />private String logUa;<br /><br />/**<br />* 访问controller<br />*/<br />@Excel(name = "控制层")<br />private String logController;<br /><br />/**<br />* 请求方式，get、post等<br />*/<br />@Excel(name = "请求方式")<br />private String logMethod;<br /><br />/**<br />* 响应时间，单位毫秒<br />*/<br />@Excel(name = "响应时间", isStatistics = true)<br />private Long logTime;<br /><br />/**<br />* 请求ip<br />*/<br />@Excel(name = "请求ip")<br />private String logIp;<br /><br />/**<br />* 设备MAC<br />*/<br />@Excel(name = "设备号")<br />private String logDevice;<br /><br />/**<br />* 创建时间<br />*/<br />@Excel(name = "请求时间")<br />private String createdDate;<br /><br />/**<br />* 创建人<br />*/<br />private String createdBy;<br /><br />/**<br />* 创建人姓名<br />*/<br />@Excel(name = "创建人", autoSize = true)<br />private String createdName;<br /><br />/**<br />* 返回值<br />*/<br />@Excel(name = "返回值")<br />private String logResult;<br /><br />/**<br />* 日志内容<br />*/<br />@Excel(name = "日志内容")<br />private String logContent;<br /><br />/**<br />* 日志类型 0:操作日志;1:登录日志;2:定时任务;<br />*/<br />private Integer logType;<br /><br />/**<br />* 操作类型 1查询，2添加，3修改，4删除，5导入，6导出<br />*/<br />private Integer logOperateType;<br /><br />@Override<br />public String toString() {<br />return "ApiLog{" +<br />"logId=" + logId +<br />", logUrl='" + logUrl + '\'' +<br />", logParams='" + logParams + '\'' +<br />", logStatus=" + logStatus +<br />", logMessage='" + logMessage + '\'' +<br />", logUa='" + logUa + '\'' +<br />", logController='" + logController + '\'' +<br />", logMethod='" + logMethod + '\'' +<br />", logTime=" + logTime +<br />", logIp='" + logIp + '\'' +<br />", logDevice='" + logDevice + '\'' +<br />", createdDate='" + createdDate + '\'' +<br />", createdBy='" + createdBy + '\'' +<br />", createdName='" + createdName + '\'' +<br />", logResult='" + logResult + '\'' +<br />", logContent='" + logContent + '\'' +<br />", logType=" + logType +<br />", logOperateType=" + logOperateType +<br />'}';<br />}<br />}<br />编写Mapper（Service就跳过了）</p>
<p>@Component<br />public interface ApiMapper {<br /><br />/**<br />* 查询所有<br />* @return<br />*/<br />List&lt;ApiLog&gt; findAll();<br /><br />}<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;<br />&lt;mapper namespace="com.gej.poi.mapper.ApiMapper"&gt;<br />&lt;!-- 注意：本内容仅限于风越云力内部传阅，禁止外泄以及用于其他的商业目 --&gt;<br />&lt;!-- 通用查询映射结果 --&gt;<br />&lt;resultMap id="BaseResultMap" type="com.gej.poi.pojo.ApiLog"&gt;<br />&lt;id column="log_id" property="logId"/&gt;<br />&lt;result column="log_url" property="logUrl"/&gt;<br />&lt;result column="log_params" property="logParams"/&gt;<br />&lt;result column="log_status" property="logStatus"/&gt;<br />&lt;result column="log_message" property="logMessage"/&gt;<br />&lt;result column="log_ua" property="logUa"/&gt;<br />&lt;result column="log_controller" property="logController"/&gt;<br />&lt;result column="log_method" property="logMethod"/&gt;<br />&lt;result column="log_time" property="logTime"/&gt;<br />&lt;result column="log_ip" property="logIp"/&gt;<br />&lt;result column="log_device" property="logDevice"/&gt;<br />&lt;result column="created_date" property="createdDate"/&gt;<br />&lt;result column="created_by" property="createdBy"/&gt;<br />&lt;result column="log_result" property="logResult"/&gt;<br />&lt;result column="created_name" property="createdName"/&gt;<br />&lt;/resultMap&gt;<br /><br />&lt;!-- 通用查询结果列 --&gt;<br />&lt;sql id="Base_Column_List"&gt;<br />log_id, log_url, log_params, log_status, log_message, log_ua, log_controller, log_method, log_time, log_ip, log_device, created_date, created_name, log_result<br />&lt;/sql&gt;<br /><br />&lt;select id="findAll" resultMap="BaseResultMap"&gt;<br />select * from sys_log_api<br />&lt;/select&gt;<br /><br />&lt;/mapper&gt;<br />编写测试类</p>
<p>@SpringBootTest<br />@RunWith(SpringRunner.class)<br />public class ExportTest {<br /><br />@Autowired<br />private ApiMapper apiMapper;<br /><br />/**<br />* 导出测试<br />* @throws Exception<br />*/<br />@Test<br />public void testExportLog() throws Exception {<br />List&lt;ApiLog&gt; list = apiMapper.findAll();<br />Workbook workbook = new ExcelExportHandler().createSheet(new ExportParams("测试导出", "最新日志"), ApiLog.class, list);<br />OutputStream outputStream = new FileOutputStream(new File("D:/测试.xlsx"));<br />workbook.write(outputStream);<br />}<br /><br />/**<br />* 导入测试<br />* @throws Exception<br />*/<br />@Test<br />public void testImportLog() throws Exception {<br />InputStream inputStream = new FileInputStream(new File("D:/测试.xlsx"));<br />List&lt;ApiLog&gt; apiLogs = new ExcelImportHandler().importExcel(inputStream, ApiLog.class, new ImportParams());<br />for (ApiLog apiLog : apiLogs) {<br />System.out.println(apiLog);<br />}<br />}<br /><br />}<br />最后附上Excel注解的代码</p>
<p>@Retention(RetentionPolicy.RUNTIME)<br />@Target({ElementType.FIELD})<br />public @interface Excel {<br /><br />/**<br />* 该列是否需要时间格式化<br />*/<br />boolean needFormat() default false;<br /><br />/**<br />* 时间格式化<br />*/<br />String format() default "";<br /><br />/**<br />* 导出时在excel中每个列的高度 单位为字符，一个汉字=2个字符<br />*/<br />double height() default 10;<br /><br />/**<br />* 导出时的列名。不可重复<br />*/<br />String name();<br /><br />/**<br />* 导出时在excel中每个列的宽 单位为字符，一个汉字=2个字符 如 以列名列内容中较合适的长度 例如姓名列6 【姓名一般三个字】<br />* 性别列4【男女占1，但是列标题两个汉字】 限制1-255<br />*/<br />double width() default 10;<br /><br />/**<br />* 是否自动统计数据,如果是统计,true的话在最后追加一行统计,把所有数据求和<br />*/<br />boolean isStatistics() default false;<br /><br />/**<br />* 是否设置列宽自适应<br />*/<br />boolean autoSize() default false;<br /><br />}<br />最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=null, blogRemark=鸡哥博客, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 20:00:17.958 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/save
2020-05-24 20:00:17.959 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:00:17.960 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:00:17.961 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.save
2020-05-24 20:00:17.962 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=<p>最近在搭公司新项目的架构，测试的过程中深感导出Excel极为不便，因此就产生了写一个通用导出工具类的想法。写完后经测试发现比较好用，因此将公司相关的代码移除，单独拿出来这个模块进行开源。</p>
<p>项目的GitHub地址：POI操作工具</p>
<p>如果您对本工具比较感兴趣，可以加入下面QQ群进行技术交流：781943947</p>
<p>使用方式：</p>
<p>创建数据库（这个操作就不贴代码了）</p>
<p>导入工程下db目录的数据库</p>
<p>创建类ApiLog（实际开发中换成自己的类），加上注解@Excel</p>
<p>@Data<br />public class ApiLog implements Serializable {<br /><br />private static final long serialVersionUID = -3286564461647015367L;<br /><br />/**<br />* 日志id<br />*/<br />@Excel(name = "编号")<br />private Integer logId;<br /><br />/**<br />* 请求路径<br />*/<br />@Excel(name = "请求地址")<br />private String logUrl;<br /><br />/**<br />* 参数<br />*/<br />@Excel(name = "请求参数")<br />private String logParams;<br /><br />/**<br />* 访问状态，1正常0异常<br />*/<br />@Excel(name = "访问状态")<br />private Integer logStatus;<br /><br />/**<br />* 异常信息<br />*/<br />@Excel(name = "异常信息")<br />private String logMessage;<br /><br />/**<br />* 浏览器UA标识<br />*/<br />@Excel(name = "浏览器标识", autoSize = true)<br />private String logUa;<br /><br />/**<br />* 访问controller<br />*/<br />@Excel(name = "控制层")<br />private String logController;<br /><br />/**<br />* 请求方式，get、post等<br />*/<br />@Excel(name = "请求方式")<br />private String logMethod;<br /><br />/**<br />* 响应时间，单位毫秒<br />*/<br />@Excel(name = "响应时间", isStatistics = true)<br />private Long logTime;<br /><br />/**<br />* 请求ip<br />*/<br />@Excel(name = "请求ip")<br />private String logIp;<br /><br />/**<br />* 设备MAC<br />*/<br />@Excel(name = "设备号")<br />private String logDevice;<br /><br />/**<br />* 创建时间<br />*/<br />@Excel(name = "请求时间")<br />private String createdDate;<br /><br />/**<br />* 创建人<br />*/<br />private String createdBy;<br /><br />/**<br />* 创建人姓名<br />*/<br />@Excel(name = "创建人", autoSize = true)<br />private String createdName;<br /><br />/**<br />* 返回值<br />*/<br />@Excel(name = "返回值")<br />private String logResult;<br /><br />/**<br />* 日志内容<br />*/<br />@Excel(name = "日志内容")<br />private String logContent;<br /><br />/**<br />* 日志类型 0:操作日志;1:登录日志;2:定时任务;<br />*/<br />private Integer logType;<br /><br />/**<br />* 操作类型 1查询，2添加，3修改，4删除，5导入，6导出<br />*/<br />private Integer logOperateType;<br /><br />@Override<br />public String toString() {<br />return "ApiLog{" +<br />"logId=" + logId +<br />", logUrl='" + logUrl + '\'' +<br />", logParams='" + logParams + '\'' +<br />", logStatus=" + logStatus +<br />", logMessage='" + logMessage + '\'' +<br />", logUa='" + logUa + '\'' +<br />", logController='" + logController + '\'' +<br />", logMethod='" + logMethod + '\'' +<br />", logTime=" + logTime +<br />", logIp='" + logIp + '\'' +<br />", logDevice='" + logDevice + '\'' +<br />", createdDate='" + createdDate + '\'' +<br />", createdBy='" + createdBy + '\'' +<br />", createdName='" + createdName + '\'' +<br />", logResult='" + logResult + '\'' +<br />", logContent='" + logContent + '\'' +<br />", logType=" + logType +<br />", logOperateType=" + logOperateType +<br />'}';<br />}<br />}<br />编写Mapper（Service就跳过了）</p>
<p>@Component<br />public interface ApiMapper {<br /><br />/**<br />* 查询所有<br />* @return<br />*/<br />List&lt;ApiLog&gt; findAll();<br /><br />}<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;<br />&lt;mapper namespace="com.gej.poi.mapper.ApiMapper"&gt;<br />&lt;!-- 注意：本内容仅限于风越云力内部传阅，禁止外泄以及用于其他的商业目 --&gt;<br />&lt;!-- 通用查询映射结果 --&gt;<br />&lt;resultMap id="BaseResultMap" type="com.gej.poi.pojo.ApiLog"&gt;<br />&lt;id column="log_id" property="logId"/&gt;<br />&lt;result column="log_url" property="logUrl"/&gt;<br />&lt;result column="log_params" property="logParams"/&gt;<br />&lt;result column="log_status" property="logStatus"/&gt;<br />&lt;result column="log_message" property="logMessage"/&gt;<br />&lt;result column="log_ua" property="logUa"/&gt;<br />&lt;result column="log_controller" property="logController"/&gt;<br />&lt;result column="log_method" property="logMethod"/&gt;<br />&lt;result column="log_time" property="logTime"/&gt;<br />&lt;result column="log_ip" property="logIp"/&gt;<br />&lt;result column="log_device" property="logDevice"/&gt;<br />&lt;result column="created_date" property="createdDate"/&gt;<br />&lt;result column="created_by" property="createdBy"/&gt;<br />&lt;result column="log_result" property="logResult"/&gt;<br />&lt;result column="created_name" property="createdName"/&gt;<br />&lt;/resultMap&gt;<br /><br />&lt;!-- 通用查询结果列 --&gt;<br />&lt;sql id="Base_Column_List"&gt;<br />log_id, log_url, log_params, log_status, log_message, log_ua, log_controller, log_method, log_time, log_ip, log_device, created_date, created_name, log_result<br />&lt;/sql&gt;<br /><br />&lt;select id="findAll" resultMap="BaseResultMap"&gt;<br />select * from sys_log_api<br />&lt;/select&gt;<br /><br />&lt;/mapper&gt;<br />编写测试类</p>
<p>@SpringBootTest<br />@RunWith(SpringRunner.class)<br />public class ExportTest {<br /><br />@Autowired<br />private ApiMapper apiMapper;<br /><br />/**<br />* 导出测试<br />* @throws Exception<br />*/<br />@Test<br />public void testExportLog() throws Exception {<br />List&lt;ApiLog&gt; list = apiMapper.findAll();<br />Workbook workbook = new ExcelExportHandler().createSheet(new ExportParams("测试导出", "最新日志"), ApiLog.class, list);<br />OutputStream outputStream = new FileOutputStream(new File("D:/测试.xlsx"));<br />workbook.write(outputStream);<br />}<br /><br />/**<br />* 导入测试<br />* @throws Exception<br />*/<br />@Test<br />public void testImportLog() throws Exception {<br />InputStream inputStream = new FileInputStream(new File("D:/测试.xlsx"));<br />List&lt;ApiLog&gt; apiLogs = new ExcelImportHandler().importExcel(inputStream, ApiLog.class, new ImportParams());<br />for (ApiLog apiLog : apiLogs) {<br />System.out.println(apiLog);<br />}<br />}<br /><br />}<br />最后附上Excel注解的代码</p>
<p>@Retention(RetentionPolicy.RUNTIME)<br />@Target({ElementType.FIELD})<br />public @interface Excel {<br /><br />/**<br />* 该列是否需要时间格式化<br />*/<br />boolean needFormat() default false;<br /><br />/**<br />* 时间格式化<br />*/<br />String format() default "";<br /><br />/**<br />* 导出时在excel中每个列的高度 单位为字符，一个汉字=2个字符<br />*/<br />double height() default 10;<br /><br />/**<br />* 导出时的列名。不可重复<br />*/<br />String name();<br /><br />/**<br />* 导出时在excel中每个列的宽 单位为字符，一个汉字=2个字符 如 以列名列内容中较合适的长度 例如姓名列6 【姓名一般三个字】<br />* 性别列4【男女占1，但是列标题两个汉字】 限制1-255<br />*/<br />double width() default 10;<br /><br />/**<br />* 是否自动统计数据,如果是统计,true的话在最后追加一行统计,把所有数据求和<br />*/<br />boolean isStatistics() default false;<br /><br />/**<br />* 是否设置列宽自适应<br />*/<br />boolean autoSize() default false;<br /><br />}<br />最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=null, blogRead=null, blogCollection=null, blogType=1, blogRemark=鸡哥博客, blogComment=null, blogSource=null, createdTime=null, updateTime=null, version=null, deleted=null)]
2020-05-24 20:00:18.203 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 245
2020-05-24 20:00:18.203 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"添加成功"}
2020-05-24 20:00:18.401 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:00:18.402 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:00:18.402 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:00:18.403 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:00:18.404 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=7, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:00:18.747 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 346
2020-05-24 20:00:18.748 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:06:39.342 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:06:39.358 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:06:39.359 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:06:39.359 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:06:39.360 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:06:39.786 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 444
2020-05-24 20:06:39.788 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:17:04.192 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:17:04.202 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:17:04.203 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:17:04.207 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:17:04.209 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:17:04.575 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 384
2020-05-24 20:17:04.577 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:33:24.761 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/undefined
2020-05-24 20:33:24.769 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-05-24 20:33:24.770 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:33:24.771 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-05-24 20:33:24.772 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[undefined]
2020-05-24 20:33:24.964 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 203
2020-05-24 20:33:24.970 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-05-24 20:33:25.469 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:33:25.470 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:33:25.470 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:33:25.471 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:33:25.471 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264526633971961856, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=鸡哥博客, blogComment=0, createdTime=2020-05-24 12:00:19, updateTime=2020-05-24 12:00:19)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:33:25.842 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 373
2020-05-24 20:33:25.843 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:34:27.948 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 20:34:27.951 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:34:27.952 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:34:27.953 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 20:34:27.953 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:34:27.954 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 20:34:27.955 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 20:34:28.727 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:34:28.732 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:34:28.733 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:34:28.735 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:34:28.735 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:34:28.759 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 20:34:28.760 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:34:28.761 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:34:28.761 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 20:34:28.764 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:34:28.869 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 110
2020-05-24 20:34:28.870 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 20:34:29.031 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 304
2020-05-24 20:34:29.032 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:36:13.080 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/undefined
2020-05-24 20:36:13.080 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-05-24 20:36:13.081 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:36:13.081 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-05-24 20:36:13.082 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[undefined]
2020-05-24 20:36:13.244 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 165
2020-05-24 20:36:13.246 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-05-24 20:36:13.507 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:36:13.508 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:36:13.509 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:36:13.510 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:36:13.511 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264526633971961856, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=鸡哥博客, blogComment=0, createdTime=2020-05-24 12:00:19, updateTime=2020-05-24 12:00:19)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:36:13.827 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 320
2020-05-24 20:36:13.828 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:36:18.227 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 20:36:18.228 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:36:18.229 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:36:18.230 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 20:36:18.230 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:36:18.231 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 20:36:18.231 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 20:36:18.956 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:36:18.957 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:36:18.959 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:36:18.960 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:36:18.961 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:36:18.962 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 20:36:18.963 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:36:18.964 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:36:18.964 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 20:36:18.965 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:36:19.075 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 113
2020-05-24 20:36:19.075 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 20:36:19.275 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 319
2020-05-24 20:36:19.276 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:37:01.144 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 20:37:01.146 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:37:01.147 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:37:01.147 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 20:37:01.148 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:37:01.149 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 5
2020-05-24 20:37:01.152 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 20:37:01.770 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 20:37:01.771 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:37:01.772 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:37:01.773 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 20:37:01.773 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:37:01.881 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 111
2020-05-24 20:37:01.882 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 20:37:04.556 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:37:04.556 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:37:04.557 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:37:04.557 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:37:04.558 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:37:05.032 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 476
2020-05-24 20:37:05.032 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264526633971961856","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg","blogRead":0,"blogRemark":"鸡哥博客","blogTitle":"注解版poi操作工具","createdTime":"2020-05-24 12:00:19","typeName":"java","updateTime":"2020-05-24 12:00:19"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":8,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:37:10.680 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/delete/1264526633971961856
2020-05-24 20:37:10.680 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : DELETE
2020-05-24 20:37:10.681 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:37:10.681 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.delete
2020-05-24 20:37:10.682 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264526633971961856]
2020-05-24 20:37:10.880 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 200
2020-05-24 20:37:10.880 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"删除成功"}
2020-05-24 20:37:11.080 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:37:11.081 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:37:11.081 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:37:11.082 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:37:11.084 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=8, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33), BlogVo(blogId=1264526633971961856, blogTitle=注解版poi操作工具, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KYQSAUPKvAAKy29TJigg077.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=鸡哥博客, blogComment=0, createdTime=2020-05-24 12:00:19, updateTime=2020-05-24 12:00:19)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:37:11.382 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 302
2020-05-24 20:37:11.385 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:39:15.884 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:39:15.894 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:39:15.895 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:39:15.896 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:39:15.897 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:39:16.262 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 378
2020-05-24 20:39:16.264 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:51:49.418 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 20:51:49.444 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:51:49.446 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:51:49.447 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 20:51:49.448 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:51:49.449 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 34
2020-05-24 20:51:49.455 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 20:51:50.177 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:51:50.178 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:51:50.179 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:51:50.179 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:51:50.180 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:51:50.200 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 20:51:50.200 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:51:50.201 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:51:50.201 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 20:51:50.205 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:51:50.330 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 130
2020-05-24 20:51:50.330 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 20:51:50.601 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 424
2020-05-24 20:51:50.602 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 00:49:00"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:51:52.906 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/get/1264357690636476416
2020-05-24 20:51:52.907 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:51:52.908 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:51:52.909 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getById
2020-05-24 20:51:52.910 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-05-24 20:51:53.191 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 285
2020-05-24 20:51:53.344 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":0,"blogId":"1264357690636476416","blogRead":0,"blogTitle":"垃圾回收算法","blogType":1,"createdTime":"2020-05-24 00:49:00","version":1},"msg":"操作成功！"}
2020-05-24 20:52:04.049 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-05-24 20:52:04.050 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:52:04.052 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:52:04.053 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-05-24 20:52:04.062 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3cb71d97]
2020-05-24 20:52:04.416 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 367
2020-05-24 20:52:04.417 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","msg":"上传成功"}
2020-05-24 20:52:11.075 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/update
2020-05-24 20:52:11.076 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : PUT
2020-05-24 20:52:11.076 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:52:11.076 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.update
2020-05-24 20:52:11.077 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>
<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>
<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>
<p>缺点：会产生碎片，不够连贯</p>
<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>
<p>优缺点<br />标记清除算法的优点和缺点</p>
<p>1. 优点</p>
<p>- 是可以解决循环引用的问题</p>
<p>- 必要时才回收(内存不足时)</p>
<p>2. 缺点：</p>
<p>- 回收时，应用需要挂起，也就是stop the world。</p>
<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>
<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>
<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>
<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>
<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>
<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>
<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>
<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>
<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>
<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>
<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>
<p>概念</p>
<p><br />&nbsp;</p>
<p>压缩算法简单介绍</p>
<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>
<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>
<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>
<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>
<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>
<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>
<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>
<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>
<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>
<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=0, blogRead=0, blogCollection=0, blogType=1, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-05-24 00:49:00, updateTime=null, version=1, deleted=null)]
2020-05-24 20:52:11.699 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 624
2020-05-24 20:52:11.699 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"更新成功"}
2020-05-24 20:52:12.182 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:52:12.183 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:52:12.184 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:52:12.184 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:52:12.185 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=7, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 00:49:00), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:52:12.520 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 338
2020-05-24 20:52:12.521 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:52:30.821 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/update
2020-05-24 20:52:30.822 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : PUT
2020-05-24 20:52:30.823 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:52:30.823 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.update
2020-05-24 20:52:30.823 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>
<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>
<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>
<p>缺点：会产生碎片，不够连贯</p>
<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>
<p>优缺点<br />标记清除算法的优点和缺点</p>
<p>1. 优点</p>
<p>- 是可以解决循环引用的问题</p>
<p>- 必要时才回收(内存不足时)</p>
<p>2. 缺点：</p>
<p>- 回收时，应用需要挂起，也就是stop the world。</p>
<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>
<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>
<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>
<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>
<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>
<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>
<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>
<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>
<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>
<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>
<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>
<p>概念</p>
<p><br />&nbsp;</p>
<p>压缩算法简单介绍</p>
<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>
<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>
<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>
<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>
<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>
<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>
<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>
<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>
<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>
<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>
<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>, blogGoods=0, blogRead=0, blogCollection=0, blogType=1, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-05-24 00:49:00, updateTime=null, version=1, deleted=null)]
2020-05-24 20:52:31.150 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 329
2020-05-24 20:52:31.151 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"更新成功"}
2020-05-24 20:52:31.346 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:52:31.346 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:52:31.347 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:52:31.348 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:52:31.349 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=7, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:52:31.659 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 313
2020-05-24 20:52:31.660 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:55:06.881 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:55:06.896 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:55:06.897 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:55:06.897 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:55:06.898 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:55:07.366 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 485
2020-05-24 20:55:07.368 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:56:24.008 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 20:56:24.011 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:56:24.012 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:56:24.013 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 20:56:24.014 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:56:24.014 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 6
2020-05-24 20:56:24.018 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 20:56:24.772 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 20:56:24.772 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 20:56:24.773 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:56:24.773 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 20:56:24.774 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:56:24.774 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 20:56:24.774 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:56:24.775 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:56:24.775 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:56:24.776 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:56:24.904 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 133
2020-05-24 20:56:24.905 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 20:56:25.155 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 381
2020-05-24 20:56:25.156 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 00:50:27"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 20:56:31.542 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/get/1264358056178458624
2020-05-24 20:56:31.543 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:56:31.544 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:56:31.544 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getById
2020-05-24 20:56:31.545 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358056178458624]
2020-05-24 20:56:31.925 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 383
2020-05-24 20:56:31.927 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","blogType":1,"createdTime":"2020-05-24 00:50:27","version":1},"msg":"操作成功！"}
2020-05-24 20:56:40.860 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /upload/uploadImage
2020-05-24 20:56:40.861 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:56:40.862 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:56:40.862 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.UploadController.uploadImage
2020-05-24 20:56:40.863 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2e07a3ed]
2020-05-24 20:56:41.014 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 154
2020-05-24 20:56:41.015 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","msg":"上传成功"}
2020-05-24 20:56:43.658 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/update
2020-05-24 20:56:43.659 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : PUT
2020-05-24 20:56:43.659 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:56:43.661 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.update
2020-05-24 20:56:43.662 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Blog(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>
<p>SqlSession的代码如下</p>
<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>
<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>
<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>
<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException("Expected one result (or null) to be returned by selectOne(), but found: " + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error querying database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error updating database. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error committing transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error rolling back transaction. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error flushing statements. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>
<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>
<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException("Error opening session. Cause: " + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>
<p>SQLSessionManager核心字段如下</p>
<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>
<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>
<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>
<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>
<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>, blogGoods=0, blogRead=0, blogCollection=0, blogType=1, blogRemark=null, blogComment=0, blogSource=null, createdTime=2020-05-24 00:50:27, updateTime=null, version=1, deleted=null)]
2020-05-24 20:56:43.846 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 188
2020-05-24 20:56:43.847 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"msg":"更新成功"}
2020-05-24 20:56:44.413 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 20:56:44.416 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 20:56:44.418 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 20:56:44.418 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 20:56:44.419 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=7, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 00:50:27), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 20:56:44.720 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 307
2020-05-24 20:56:44.721 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:00:25.938 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/get/1264357690636476416
2020-05-24 21:00:25.940 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:00:25.941 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:00:25.941 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getById
2020-05-24 21:00:25.941 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264357690636476416]
2020-05-24 21:00:26.429 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 491
2020-05-24 21:00:26.430 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>标记清除算法<br />概念<br />该算法有两个阶段。</p>\n<p>1. 标记阶段：找到所有可访问的对象，做个标记。</p>\n<p>2. 清除阶段：遍历堆，把未被标记的对象回收</p>\n<p>缺点：会产生碎片，不够连贯</p>\n<p>应用场景<br />该算法一般应用于老年代,因为老年代的对象生命周期比较长。</p>\n<p>优缺点<br />标记清除算法的优点和缺点</p>\n<p>1. 优点</p>\n<p>- 是可以解决循环引用的问题</p>\n<p>- 必要时才回收(内存不足时)</p>\n<p>2. 缺点：</p>\n<p>- 回收时，应用需要挂起，也就是stop the world。</p>\n<p>- 标记和清除的效率不高，尤其是要扫描的对象比较多的时候</p>\n<p>- 会造成内存碎片(会导致明明有内存空间,但是由于不连续,申请稍微大一些的对象无法做到)</p>\n<p>复制算法<br />概念<br />如果jvm使用了coping算法，一开始就会将可用内存分为两块，from域和to域， 每次只是使用from域，to域则空闲着。当from域内存不够了，开始执行GC操作，这个时候，会把from域存活的对象拷贝到to域,然后直接把from域进行内存清理。</p>\n<p>应用场景<br />coping算法一般是使用在新生代中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。jvm将Heap 内存划分为新生代与老年代，又将新生代划分为Eden(伊甸园) 与2块Survivor Space(幸存者区) ,然后在Eden &ndash;&gt;Survivor Space 以及From Survivor Space 与To Survivor Space 之间实行Copying 算法。 不过jvm在应用coping算法时，并不是把内存按照1:1来划分的，这样太浪费内存空间了。一般的jvm都是8:1。也即是说,Eden区:From区:To区域的比例是</p>\n<p>始终有90%的空间是可以用来创建对象的,而剩下的10%用来存放回收后存活的对象。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>1、当Eden区满的时候,会触发第一次young gc,把还活着的对象拷贝到Survivor From区；当Eden区再次触发young gc的时候,会扫描Eden区和From区域,对两个区域进行垃圾回收,经过这次回收后还存活的对象,则直接复制到To区域,并将Eden和From区域清空。</p>\n<p>2、当后续Eden又发生young gc的时候,会对Eden和To区域进行垃圾回收,存活的对象复制到From区域,并将Eden和To区域清空。</p>\n<p>3、可见部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代</p>\n<p>注意:&nbsp;万一存活对象数量比较多，那么To域的内存可能不够存放，这个时候会借助老年代的空间。</p>\n<p>优缺点<br />优点:在存活对象不多的情况下，性能高，能解决内存碎片和java垃圾回收算法之-标记清除 中导致的引用更新问题。</p>\n<p>缺点:&nbsp;会造成一部分的内存浪费。不过可以根据实际情况，将内存块大小比例适当调整；如果存活对象的数量比较大，coping的性能会变得很差。</p>\n<p>标记压缩算法<br />标记清除算法和标记压缩算法非常相同，但是标记压缩算法在标记清除算法之上解决内存碎片化</p>\n<p>概念</p>\n<p><br />&nbsp;</p>\n<p>压缩算法简单介绍</p>\n<p>任意顺序 : 即不考虑原先对象的排列顺序，也不考虑对象之间的引用关系，随意移动对象；</p>\n<p>线性顺序 : 考虑对象的引用关系，例如a对象引用了b对象，则尽可能将a和b移动到一块；</p>\n<p>滑动顺序 : 按照对象原来在堆中的顺序滑动到堆的一端。</p>\n<p>优缺点<br />优点:解决内存碎片问题，缺点压缩阶段，由于移动了可用对象，需要去更新引用。</p>\n<p>分代算法<br />概述<br />这种算法，根据对象的存活周期的不同将内存划分成几块，新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。可以用抓重点的思路来理解这个算法。</p>\n<p>新生代对象朝生夕死,对象数量多，只要重点扫描这个区域，那么就可以大大提高垃圾收集的效率。另外老年代对象存储久，无需经常扫描老年代，避免扫描导致的开销。</p>\n<p>新生代<br />在新生代，每次垃圾收集器都发现有大批对象死去，只有少量存活，采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；可以参看我之前写的java垃圾回收算法之-coping复制</p>\n<p>老年代<br />而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须&ldquo;标记－清除-压缩&rdquo;算法进行回收。参看java垃圾回收算法之-标记_清除压缩</p>\n<p>新创建的对象被分配在新生代，如果对象经过几次回收后仍然存活，那么就把这个对象划分到老年代。</p>\n<p>老年代区存放Young区Survivor满后触发minor GC后仍然存活的对象，当Eden区满后会将存活的对象放入Survivor区域，如果Survivor区存不下这些对象，GC收集器就会将这些对象直接存放到Old区中，如果Survivor区中的对象足够老，也直接存放到Old区中。如果Old区满了，将会触发Full GC回收整个堆内存。</p>\n<p>最后宣传一下技术交流群，如果你觉得该博客对你有帮助，不放动动手指加一下交流群。</p>","blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","blogType":1,"createdTime":"2020-05-24 00:49:00","version":2},"msg":"操作成功！"}
2020-05-24 21:00:32.409 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/get/1264358056178458624
2020-05-24 21:00:32.411 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:00:32.411 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:00:32.412 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getById
2020-05-24 21:00:32.412 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[1264358056178458624]
2020-05-24 21:00:32.993 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 584
2020-05-24 21:00:32.994 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<p>展开<br />SqlSession<br />SqlSession是Mybatis的核心接口之一，对外提供常用的数据库操作api。mybatis提供了两个SqlSession的实现，其中最常用的是DefaultSqlSession。</p>\n<p>SqlSession的代码如下</p>\n<p>/**<br />* 接口层，也是开发人员使用mybatis去操作sql所使用的主要的接口<br />*<br />* @author Clinton Begin<br />*/<br />public interface SqlSession extends Closeable {<br /><br />/**<br />* 查询sql单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement sql<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement);<br /><br />/**<br />* 指定sql并传入实参去查单条数据<br />*<br />* @param &lt;T&gt; 返回的数据类型<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @return Mapped object<br />*/<br />&lt;T&gt; T selectOne(String statement, Object parameter);<br /><br />/**<br />* 执行sql查询多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement sql<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement);<br /><br />/**<br />* 指定sql并传入实参去查多条数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);<br /><br />/**<br />* 使用预编译的sql，指定传入的实参以及结果集范围<br />* 查询指定范围的所有数据<br />*<br />* @param &lt;E&gt; 返回的数据类型<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @return List of mapped object<br />*/<br />&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 执行sql，返回map对象<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, String mapKey);<br /><br />/**<br />* 指定sql和实参，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);<br /><br />/**<br />* 指定sql、实参、范围，返回map<br />*<br />* @param &lt;K&gt; the returned Map keys type<br />* @param &lt;V&gt; the returned Map values type<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Map containing key pair data.<br />*/<br />&lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter);<br /><br />/**<br />* A Cursor offers the same results as a List, except it fetches data lazily using an Iterator.<br />*<br />* @param &lt;T&gt; the returned cursor element type.<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param rowBounds Bounds to limit object retrieval<br />* @return Cursor of mapped objects<br />*/<br />&lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement, Object parameter, RowBounds rowBounds);<br /><br />/**<br />* 将查询结果通过此处的ResultHandler对象封装成对应的对象<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement<br />* using a {@code ResultHandler}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, ResultHandler handler);<br /><br />/**<br />* Retrieve a single row mapped from the statement key and parameter<br />* using a {@code ResultHandler} and {@code RowBounds}.<br />*<br />* @param statement Unique identifier matching the statement to use.<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);<br /><br />/**<br />* 执行insert<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement);<br /><br />/**<br />* Execute an insert statement with the given parameter object. Any generated<br />* autoincrement values or selectKey entries will modify the given parameter<br />* object properties. Only the number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the insert.<br />*/<br />int insert(String statement, Object parameter);<br /><br />/**<br />* 执行update<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement);<br /><br />/**<br />* Execute an update statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the update.<br />*/<br />int update(String statement, Object parameter);<br /><br />/**<br />* 执行delete<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement);<br /><br />/**<br />* Execute a delete statement. The number of rows affected will be returned.<br />*<br />* @param statement Unique identifier matching the statement to execute.<br />* @param parameter A parameter object to pass to the statement.<br />* @return int The number of rows affected by the delete.<br />*/<br />int delete(String statement, Object parameter);<br /><br />/**<br />* 提交事务<br />*/<br />void commit();<br /><br />/**<br />* Flushes batch statements and commits database connection.<br />*<br />* @param force forces connection commit<br />*/<br />void commit(boolean force);<br /><br />/**<br />* 回滚事务<br />*/<br />void rollback();<br /><br />/**<br />* Discards pending batch statements and rolls database connection back.<br />* Note that database connection will not be rolled back if no updates/deletes/inserts were called.<br />*<br />* @param force forces connection rollback<br />*/<br />void rollback(boolean force);<br /><br />/**<br />* 将请求刷新到数据库<br />*<br />* @return BatchResult list of updated records<br />* @since 3.0.6<br />*/<br />List&lt;BatchResult&gt; flushStatements();<br /><br />/**<br />* 关闭SqlSession<br />*/<br />@Override<br />void close();<br /><br />/**<br />* 清空 缓存<br />*/<br />void clearCache();<br /><br />/**<br />* Retrieves current configuration.<br />*<br />* @return Configuration<br />*/<br />Configuration getConfiguration();<br /><br />/**<br />* 使用type获取对应的Mapper<br />*<br />* @param &lt;T&gt; the mapper type<br />* @param type Mapper interface class<br />* @return a mapper bound to this SqlSession<br />*/<br />&lt;T&gt; T getMapper(Class&lt;T&gt; type);<br /><br />/**<br />* 获取该SqlSession对应的数据库连接<br />*<br />* @return Connection<br />*/<br />Connection getConnection();<br />}<br />DefaultSqlSession<br />在mybatis单独使用的时候，DefaultSqlSession是最常使用的SqlSession实现。DefaultSqlSession核心字段如下，其中已经过多介绍的类将不再注释。</p>\n<p><br />private final Configuration configuration;<br />private final Executor executor;<br /><br />/**<br />* 是否自动提交事务<br />*/<br />private final boolean autoCommit;<br /><br />/**<br />* 当前缓存是否有脏数据<br />*/<br />private boolean dirty;<br />DefaultSqlSession中使用到了策略模式（不知道策略模式的请看我以前的帖子）。DefaultSqlSession扮演了上下文，只是通过executor字段的不同，而选择不同的Executor去操作数据库。</p>\n<p>DefaultSqlSession为每种SQL操作都提供了大量的重载，对于不同的参数都提供了一个重载方法， 便于开发者去调用。这里只贴出核心的方法，对于重载方法将不进行介绍。</p>\n<p>* 根据sql和实参查询一条数据<br />* @param statement 预编译的带有?的sql<br />* @param parameter 用户传入的实参，与前面sql绑定<br />* @param &lt;T&gt;<br />* @return<br />*/<br />@Override<br />public &lt;T&gt; T selectOne(String statement, Object parameter) {<br />// 调用selectList查询多条<br />List&lt;T&gt; list = this.selectList(statement, parameter);<br />// 如果查询到的数据长度1是或者0就正常，否则抛出异常<br />if (list.size() == 1) {<br />return list.get(0);<br />} else if (list.size() &gt; 1) {<br />// 这里的异常信息是不是很熟悉呢<br />throw new TooManyResultsException(\"Expected one result (or null) to be returned by selectOne(), but found: \" + list.size());<br />} else {<br />return null;<br />}<br />}<br /><br />/**<br />* 查询结果封装成map返回<br />* 阅读源码发现，这里的selectMap貌似并不是将结果集按照属性映射成map<br />* 而是把map当做list去使用。<br />* 查询出多条数据，使用不同的key去封装到map<br />* 这里的V应该是这一条数据映射的对象，或者是Map&lt;String, Object&gt;<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter A parameter object to pass to the statement.<br />* @param mapKey The property to use as key for each value in the list.<br />* @param rowBounds Bounds to limit object retrieval<br />* @param &lt;K&gt;<br />* @param &lt;V&gt;<br />* @return<br />*/<br />@Override<br />public &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {<br />// 查询列表<br />final List&lt;? extends V&gt; list = selectList(statement, parameter, rowBounds);<br />// 创建Map返回集处理器<br />final DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = new DefaultMapResultHandler&lt;&gt;(mapKey,<br />configuration.getObjectFactory(), configuration.getObjectWrapperFactory(), configuration.getReflectorFactory());<br />final DefaultResultContext&lt;V&gt; context = new DefaultResultContext&lt;&gt;();<br />for (V o : list) {<br />// 暂存一下当前结果对象<br />context.nextResultObject(o);<br />// 处理上下文中的结果对象<br />mapResultHandler.handleResult(context);<br />}<br />// 将map返回回去<br />return mapResultHandler.getMappedResults();<br />}<br /><br />/**<br />* 根据传入的sql、实参、查询范围去查询一个列表<br />* @param statement 预编译的带有问号的sql<br />* @param parameter 用户传入的实参，与前面的sql绑定<br />* @param rowBounds 指定查询范围<br />* @param &lt;E&gt;<br />* @return<br />*/<br />@Override<br />public &lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter, RowBounds rowBounds) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 根据sql、实参、范围查询<br />* 将查询结果交给指定的ResultHandler去处理<br />* @param statement Unique identifier matching the statement to use.<br />* @param parameter<br />* @param rowBounds RowBound instance to limit the query results<br />* @param handler ResultHandler that will handle each retrieved row<br />*/<br />@Override<br />public void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler) {<br />try {<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error querying database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public int update(String statement, Object parameter) {<br />try {<br />dirty = true;<br />MappedStatement ms = configuration.getMappedStatement(statement);<br />return executor.update(ms, wrapCollection(parameter));<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error updating database. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void commit(boolean force) {<br />try {<br />// 提交事务。提交之后将dirty设为false<br />// 此时的缓存中视为没有脏数据<br />executor.commit(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error committing transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public void rollback(boolean force) {<br />try {<br />executor.rollback(isCommitOrRollbackRequired(force));<br />dirty = false;<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error rolling back transaction. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />@Override<br />public List&lt;BatchResult&gt; flushStatements() {<br />try {<br />return executor.flushStatements();<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error flushing statements. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />代码比较简单，就不做过多的介绍。</p>\n<p>DefaultSqlSessionFactory<br />DefaultSqlSessionFactory是一个工厂类，提供了两种创建DefaultSqlSession的方式，一种是通过数据源创建SqlSession，一种是通过用户传入的数据库连接对象来创建SqlSession。另外代码里有大量的openSession都是用于创建SqlSession对象的，但是其实现都是基于这两种方式，因此这里只把两种创建SqlSession的方式的代码贴出来，如下。</p>\n<p>/**<br />* 通过数据源去创建SqlSession<br />* @param execType<br />* @param level<br />* @param autoCommit<br />* @return<br />*/<br />private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {<br />Transaction tx = null;<br />try {<br />// 获取environment。这个是mybatis中配置的环境<br />final Environment environment = configuration.getEnvironment();<br />// 根据环境去获取TransactionFactory对象<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />// 创建Transaction对象<br />tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br />// 创建Executor对象<br />final Executor executor = configuration.newExecutor(tx, execType);<br />// 创建DefaultSqlSession<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />closeTransaction(tx);<br />// may have fetched a connection so lets call close()<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br /><br />/**<br />* 通过用户提供的Connection对象去创建<br />* @param execType<br />* @param connection<br />* @return<br />*/<br />private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {<br />try {<br />boolean autoCommit;<br />try {<br />autoCommit = connection.getAutoCommit();<br />} catch (SQLException e) {<br />// Failover to true, as most poor drivers<br />// or databases won't support transactions<br />autoCommit = true;<br />}<br />final Environment environment = configuration.getEnvironment();<br />final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);<br />final Transaction tx = transactionFactory.newTransaction(connection);<br />final Executor executor = configuration.newExecutor(tx, execType);<br />return new DefaultSqlSession(configuration, executor, autoCommit);<br />} catch (Exception e) {<br />throw ExceptionFactory.wrapException(\"Error opening session. Cause: \" + e, e);<br />} finally {<br />ErrorContext.instance().reset();<br />}<br />}<br />SqlSessionManager<br />SqlSessionManager同时实现了SqlSession接口和SQLSessionFactory接口，因此它拥有操作数据库的能力以及创建SqlSession的功能。</p>\n<p>SQLSessionManager核心字段如下</p>\n<p>private final SqlSessionFactory sqlSessionFactory;<br /><br />/**<br />* localSqlSession中记录的SqlSession对象的代理对象<br />*/<br />private final SqlSession sqlSessionProxy;<br /><br />/**<br />* 记录当前线程的SqlSession对象<br />*/<br />private final ThreadLocal&lt;SqlSession&gt; localSqlSession = new ThreadLocal&lt;&gt;();<br />其中ThreadLocal的作用往往是作为当前线程的上下文，可以为当前线程提供全局变量。对ThreadLocal不了解的朋友也请查看我以前的文章。</p>\n<p>SqlSessionManager提供了两种模式。一种是同一线程每次通过SqlSessionManager对象访问数据库时，都会创建一个DefaultSqlSession对象完成数据库操作，另一种则是使用localSqlSession绑定当前线程的SqlSession，在当前线程中循环使用同一个SqlSession。后者使用往往居多，这也是大家经常说的&ldquo;SqlSession与线程绑定 ，每个请求都会创建SqlSession&rdquo;的原因。</p>\n<p>sqlSessionProxy是一个代理对象，在SqlSessionmanager的构造方法中使用JDK的动态代理创建完成，代码如下。</p>\n<p>private SqlSessionManager(SqlSessionFactory sqlSessionFactory) {<br />this.sqlSessionFactory = sqlSessionFactory;<br />// 使用动态代理去创建 SqlSession<br />this.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br />SqlSessionFactory.class.getClassLoader(),<br />new Class[]{SqlSession.class},<br />new SqlSessionInterceptor());<br />}<br />SqlSessionManager中实现的SqlSession 接口方法，都是直接调用sqlSessionProxy字段记录的SqlSession代理对象的方法实现的。在创建该代理对象时使用到的SqlSessionInterceptor是SqlSessionManager的内部类，代码如下。</p>\n<p>private class SqlSessionInterceptor implements InvocationHandler {<br />public SqlSessionInterceptor() {<br />// Prevent Synthetic Access<br />}<br /><br />@Override<br />public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br />// 获取当前线程的SqlSession<br />final SqlSession sqlSession = SqlSessionManager.this.localSqlSession.get();<br />if (sqlSession != null) {<br />try {<br />// SqlSession不为空就调用真正的SqlSession去完成数据库的操作<br />return method.invoke(sqlSession, args);<br />} catch (Throwable t) {<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />} else {<br />try (SqlSession autoSqlSession = openSession()) {<br />// 如果当前线程的SqlSession为空，就创建新的SqlSession对象<br />try {<br />// 使用创建的SqlSession对象完成数据库操作<br />final Object result = method.invoke(autoSqlSession, args);<br />// 提交事务<br />autoSqlSession.commit();<br />return result;<br />} catch (Throwable t) {<br />autoSqlSession.rollback();<br />throw ExceptionUtil.unwrapThrowable(t);<br />}<br />}<br />}<br />}<br />}<br />总结<br />SqlSession是单体mybatis使用最多的一个接口，可能我们在整合SSM之后就看不到这个接口了，但是其底层实现的时候也是会创建SqlSession的，虽然这个比较简单，但是也是相当重要的一个模块。</p>","blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","blogType":1,"createdTime":"2020-05-24 00:50:27","version":2},"msg":"操作成功！"}
2020-05-24 21:24:52.305 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:24:52.305 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:24:52.499 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:24:52.499 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:24:52.499 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:24:52.499 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:24:52.499 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:24:52.499 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:24:52.501 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 21:24:52.501 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 21:24:53.633 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1328
2020-05-24 21:24:53.634 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:24:53.636 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 1331
2020-05-24 21:24:53.636 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:35:36.644 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 21:35:36.675 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 21:35:36.676 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:35:36.677 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 21:35:36.678 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 21:35:36.680 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 37
2020-05-24 21:35:36.683 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 21:35:38.084 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:35:38.085 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:35:38.085 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:35:38.086 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:35:38.087 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 21:35:38.053 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 21:35:38.124 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 21:35:38.125 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:35:38.126 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 21:35:38.127 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 21:35:38.507 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 454
2020-05-24 21:35:38.508 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 21:35:38.707 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 623
2020-05-24 21:35:38.708 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:35:42.581 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:35:42.585 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:35:42.586 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:35:42.588 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:35:42.590 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=7, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 12:56:45), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=created_time, sortMethod=desc)]
2020-05-24 21:35:43.484 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 903
2020-05-24 21:35:43.485 INFO  [http-nio-1001-exec-4]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"desc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:36:37.682 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:36:37.706 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:36:37.712 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:36:37.713 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:36:37.715 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 21:36:38.119 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 438
2020-05-24 21:36:38.121 INFO  [http-nio-1001-exec-5]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:36:59.883 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 21:36:59.886 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 21:36:59.887 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:36:59.887 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 21:36:59.888 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 21:36:59.890 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 7
2020-05-24 21:36:59.902 INFO  [http-nio-1001-exec-2]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 21:37:00.929 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:37:00.930 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:37:00.930 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:37:00.931 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:37:00.944 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 21:37:00.929 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 21:37:00.969 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 21:37:00.970 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:37:00.970 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 21:37:00.971 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 21:37:01.135 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 206
2020-05-24 21:37:01.135 INFO  [http-nio-1001-exec-7]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 21:37:01.287 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 358
2020-05-24 21:37:01.288 INFO  [http-nio-1001-exec-6]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:37:03.175 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:37:03.176 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:37:03.177 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:37:03.177 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:37:03.178 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=1, totalCount=7, list=[BlogVo(blogId=1264357690636476416, blogTitle=垃圾回收算法, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:49:00, updateTime=2020-05-24 12:52:13), BlogVo(blogId=1264358056178458624, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:27, updateTime=2020-05-24 12:56:45), BlogVo(blogId=1264358089300877312, blogTitle=Mybatis源码阅读（五 ）：接口层——SqlSession, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:50:35, updateTime=2020-05-24 00:50:35), BlogVo(blogId=1264358511910559744, blogTitle=Java只使用位运算实现加减乘除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 00:52:15, updateTime=2020-05-24 00:52:15), BlogVo(blogId=1264363719424188416, blogTitle=java进阶篇：用位运算实现加、减、乘、除, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:12:57, updateTime=2020-05-24 01:12:57), BlogVo(blogId=1264365258452664320, blogTitle=不使用比较运算符如何比较两个数的大小, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=java, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:19:04, updateTime=2020-05-24 01:19:04), BlogVo(blogId=1264365631460507648, blogTitle=Flutter、ReactNative、uniapp对比, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=linux, blogSource=null, blogRemark=null, blogComment=0, createdTime=2020-05-24 01:20:33, updateTime=2020-05-24 01:20:33)], params={}, sortColumn=created_time, sortMethod=asc)]
2020-05-24 21:37:03.775 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 600
2020-05-24 21:37:03.776 INFO  [http-nio-1001-exec-3]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortColumn":"created_time","sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:47:10.944 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:47:10.949 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:47:10.950 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:47:10.950 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:47:10.951 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 21:47:11.351 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 407
2020-05-24 21:47:11.352 INFO  [http-nio-1001-exec-9]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
2020-05-24 21:47:13.186 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /admin/info
2020-05-24 21:47:13.187 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 21:47:13.188 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:47:13.189 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.AdminController.getLoginInfo
2020-05-24 21:47:13.190 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 21:47:13.190 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 4
2020-05-24 21:47:13.192 INFO  [http-nio-1001-exec-8]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"name":"稽哥","password":"","username":"admin"},"msg":"操作成功！"}
2020-05-24 21:47:14.002 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /type/getList
2020-05-24 21:47:14.003 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : GET
2020-05-24 21:47:14.004 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:47:14.005 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.TypeController.getList
2020-05-24 21:47:14.005 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[]
2020-05-24 21:47:14.169 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 167
2020-05-24 21:47:14.170 INFO  [http-nio-1001-exec-10]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":[{"typeBlogCount":0,"typeId":1,"typeName":"java"},{"typeBlogCount":0,"typeId":2,"typeName":"linux"},{"typeBlogCount":0,"typeId":3,"typeName":"docker"},{"typeBlogCount":0,"typeId":4,"typeName":"springboot"},{"typeBlogCount":0,"typeId":5,"typeName":"nginx"},{"typeBlogCount":0,"typeId":6,"typeName":"mybatis"}],"msg":"操作成功！"}
2020-05-24 21:47:14.307 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:114 -请求地址 : /blog/getByPage
2020-05-24 21:47:14.308 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:115 -请求方式 : POST
2020-05-24 21:47:14.308 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:118 -IP : 127.0.0.1
2020-05-24 21:47:14.309 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:120 -方法 : com.jg.blog.controller.BlogController.getByPage
2020-05-24 21:47:14.309 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.printRequestLog:122 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-05-24 21:47:14.728 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAround:68 -耗时 : 421
2020-05-24 21:47:14.729 INFO  [http-nio-1001-exec-1]com.jg.blog.aspect.RequestAspect.doAfterReturning:82 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264357690636476416","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbfWAMxLPAABgjnKno8E447.jpg","blogRead":0,"blogTitle":"垃圾回收算法","createdTime":"2020-05-24 00:49:00","typeName":"java","updateTime":"2020-05-24 12:52:13"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358056178458624","blogImage":"http://39.97.183.122/group1/M00/00/00/rBGvAl7KbwqAAb-IAAAILq5d_SI847.png","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:27","typeName":"java","updateTime":"2020-05-24 12:56:45"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358089300877312","blogRead":0,"blogTitle":"Mybatis源码阅读（五 ）：接口层——SqlSession","createdTime":"2020-05-24 00:50:35","typeName":"java","updateTime":"2020-05-24 00:50:35"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264358511910559744","blogRead":0,"blogTitle":"Java只使用位运算实现加减乘除","createdTime":"2020-05-24 00:52:15","typeName":"linux","updateTime":"2020-05-24 00:52:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264363719424188416","blogRead":0,"blogTitle":"java进阶篇：用位运算实现加、减、乘、除","createdTime":"2020-05-24 01:12:57","typeName":"java","updateTime":"2020-05-24 01:12:57"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365258452664320","blogRead":0,"blogTitle":"不使用比较运算符如何比较两个数的大小","createdTime":"2020-05-24 01:19:04","typeName":"java","updateTime":"2020-05-24 01:19:04"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1264365631460507648","blogRead":0,"blogTitle":"Flutter、ReactNative、uniapp对比","createdTime":"2020-05-24 01:20:33","typeName":"linux","updateTime":"2020-05-24 01:20:33"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":7,"totalPage":1},"msg":"操作成功！"}
